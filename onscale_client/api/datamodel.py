# generated by datamodel-codegen:
#   filename:  swagger.json
#   timestamp: 2022-11-21T10:23:10+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Model(BaseModel):
    __root__: Any


class AESKey(BaseModel):
    plaintext_key: Optional[str] = Field(
        None,
        alias='plaintextKey',
        description='base64 encoded byte[]',
        example='a/VqYX0QWgplY0uGTlSC3H...',
    )


class AccountAccess(BaseModel):
    account_admin: Optional[bool] = Field(None, alias='accountAdmin', example=True)
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    account_lead: Optional[bool] = Field(None, alias='accountLead', example=False)
    cognito_email: Optional[str] = Field(
        None, alias='cognitoEmail', description='email', example='josh@dc-control.com'
    )
    has_mfa: Optional[bool] = Field(None, alias='hasMFA', example=True)
    max_core_hour_request: Optional[int] = Field(
        None, alias='maxCoreHourRequest', example=5000
    )
    suspended: Optional[bool] = Field(None, example=False)
    user_id: Optional[str] = Field(None, alias='userId')
    user_max_core_allowed: Optional[int] = Field(
        None, alias='userMaxCoreAllowed', example=64
    )


class AccountAdjustRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    core_hour_credit: Optional[float] = Field(
        None, alias='coreHourCredit', example=150.0
    )


class AccountBucketInformation(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    bucket: Optional[str] = None
    provider: Optional[str] = None
    region: Optional[str] = None
    root_dir: Optional[str] = Field(None, alias='rootDir')


class AccountCoreHourSummary(BaseModel):
    account_ch_available: Optional[float] = Field(None, alias='accountCHAvailable')
    account_ch_credit: Optional[float] = Field(None, alias='accountCHCredit')
    account_ch_debit: Optional[float] = Field(None, alias='accountCHDebit')
    account_id: Optional[str] = Field(None, alias='accountId')
    account_name: Optional[str] = Field(None, alias='accountName')
    account_overage_since_last_credit: Optional[float] = Field(
        None, alias='accountOverageSinceLastCredit'
    )
    user_ch_available: Optional[float] = Field(None, alias='userCHAvailable')
    user_ch_credit: Optional[float] = Field(None, alias='userCHCredit')
    user_ch_debit: Optional[float] = Field(None, alias='userCHDebit')
    user_id: Optional[str] = Field(None, alias='userId')
    user_overage_since_last_credit: Optional[float] = Field(
        None, alias='userOverageSinceLastCredit'
    )


class AccountDateRangeRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='57d38c55-657e-4c51-8f8f-1fb9dde53557',
    )
    end_day: Optional[int] = Field(
        None, alias='endDay', description='endDay', example=1
    )
    end_month: Optional[int] = Field(
        None, alias='endMonth', description='endMonth', example=0
    )
    end_year: Optional[int] = Field(
        None, alias='endYear', description='endYear', example=2019
    )
    start_day: Optional[int] = Field(
        None, alias='startDay', description='startDay', example=1
    )
    start_month: Optional[int] = Field(
        None, alias='startMonth', description='startMonth', example=0
    )
    start_year: Optional[int] = Field(
        None, alias='startYear', description='startYear', example=2018
    )


class AccountDeleteRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='2c5ce1e6-5abb-4e24-831e-04ce9b22f94e',
    )
    hash: Optional[str] = Field(None, example='hash_key_to_confirm_deletion')


class AccountDeleteResponse(BaseModel):
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account_to_be_deleted'
    )
    hash: Optional[str] = Field(None, example='hash_key_to_confirm_deletion')
    summary: Optional[Dict[str, Dict[str, Any]]] = None


class AccountDetails(BaseModel):
    addr1: Optional[str] = Field(None, example='19200 Stevens Creek Blvd')
    addr2: Optional[str] = None
    ccv: Optional[str] = Field(None, example='123')
    city: Optional[str] = Field(None, example='Cupertino')
    company_name: Optional[str] = Field(None, alias='companyName', example='OnScale')
    country: Optional[str] = Field(None, example='US')
    credit_card: Optional[str] = Field(
        None, alias='creditCard', example='4111-1111-1111-1111'
    )
    email_address: Optional[str] = Field(
        None, alias='emailAddress', example='Robbie.Banks@onscale.com'
    )
    expire_month: Optional[str] = Field(None, alias='expireMonth', example='01')
    expire_year: Optional[str] = Field(None, alias='expireYear', example='2020')
    first_name: Optional[str] = Field(None, alias='firstName', example='Robbie')
    last_name: Optional[str] = Field(None, alias='lastName', example='Banks')
    overage: Optional[bool] = Field(None, example=False)
    phone_number: Optional[str] = Field(
        None, alias='phoneNumber', example='+14046474769'
    )
    state: Optional[str] = Field(None, example='CA')
    subscription_type: Optional[str] = Field(
        None, alias='subscriptionType', example='on-free'
    )
    token_id: Optional[str] = Field(None, alias='tokenId', example='TOKEN_ID')
    zip: Optional[str] = Field(None, example='95014')


class AccountDockerTag(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    docker_tag: Optional[str] = Field(None, alias='dockerTag')


class AccountDockerTagUpdateRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    docker_tags: Optional[List[str]] = Field(None, alias='dockerTags')


class AccountItemRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    item_ids: Optional[List[str]] = Field(None, alias='itemIds')
    prioritized: Optional[bool] = None


class AccountJobListRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    end_date: Optional[datetime] = Field(None, alias='endDate', example='2019-05-31')
    include_children_jobs: Optional[bool] = Field(
        None, alias='includeChildrenJobs', example=False
    )
    include_combined: Optional[bool] = Field(
        None, alias='includeCombined', example=False
    )
    include_created: Optional[bool] = Field(None, alias='includeCreated', example=False)
    include_finished: Optional[bool] = Field(
        None, alias='includeFinished', example=True
    )
    include_job_status: Optional[bool] = Field(
        None, alias='includeJobStatus', example=True
    )
    include_queued: Optional[bool] = Field(None, alias='includeQueued', example=True)
    job_status: Optional[str] = Field(None, alias='jobStatus', example='finished')
    no_project_job_only: Optional[bool] = Field(
        None, alias='noProjectJobOnly', example=False
    )
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=10)
    project_job_only: Optional[bool] = Field(
        None, alias='projectJobOnly', example=False
    )
    start_date: Optional[datetime] = Field(
        None, alias='startDate', example='2018-06-01'
    )


class TransactionType(Enum):
    CREDIT = 'CREDIT'
    DEBIT = 'DEBIT'
    RECONCILIATION = 'RECONCILIATION'
    ALLOCATION = 'ALLOCATION'
    BLOCK = 'BLOCK'


class AccountLedger(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', description='UUID')
    blob_id: Optional[str] = Field(None, alias='blobId', description='UUID')
    cognito_email: Optional[str] = Field(
        None, alias='cognitoEmail', description='email', example='josh@dc-control.com'
    )
    design_id: Optional[str] = Field(None, alias='designId')
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    invoice_accepted: Optional[bool] = Field(None, alias='invoiceAccepted')
    invoice_required: Optional[bool] = Field(None, alias='invoiceRequired')
    invoice_submitted: Optional[bool] = Field(None, alias='invoiceSubmitted')
    job_id: Optional[str] = Field(None, alias='jobId', description='UUID')
    mesh_id: Optional[str] = Field(None, alias='meshId', description='UUID')
    overage_amount: Optional[float] = Field(None, alias='overageAmount')
    project_id: Optional[str] = Field(None, alias='projectId')
    reconciliation_id: Optional[str] = Field(None, alias='reconciliationId')
    simulation_id: Optional[str] = Field(None, alias='simulationId', description='UUID')
    supervisor_id: Optional[str] = Field(None, alias='supervisorId')
    transaction_amount: Optional[float] = Field(
        None, alias='transactionAmount', example=1257.0
    )
    transaction_date: Optional[int] = Field(
        None,
        alias='transactionDate',
        description='1585700000000',
        example=1585700000000,
    )
    transaction_description: Optional[str] = Field(
        None, alias='transactionDescription', example='Credit Added 2/12/2017'
    )
    transaction_expiration_date: Optional[int] = Field(
        None,
        alias='transactionExpirationDate',
        description='1585700000000',
        example=1585700000000,
    )
    transaction_id: Optional[str] = Field(
        None, alias='transactionId', description='UUID'
    )
    transaction_type: Optional[TransactionType] = Field(
        None, alias='transactionType', example='CREDIT'
    )
    user_id: Optional[str] = Field(None, alias='userId')


class AccountLedgerListRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    from_date: Optional[datetime] = Field(None, alias='fromDate', example='2020-10-01')
    to_date: Optional[datetime] = Field(None, alias='toDate', example='2020-11-01')


class AccountListPageRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    include_usage: Optional[bool] = Field(None, alias='includeUsage', example=False)
    include_user_ids: Optional[bool] = Field(
        None, alias='includeUserIds', example=False
    )
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=10)


class AccountPlanCode(BaseModel):
    active: Optional[bool] = None
    core_hour_limit: Optional[float] = Field(None, alias='coreHourLimit')
    on_demand_rate: Optional[float] = Field(None, alias='onDemandRate')
    periodicity: Optional[str] = None
    plan_code: Optional[str] = Field(None, alias='planCode')
    plan_name: Optional[str] = Field(None, alias='planName')
    rate: Optional[float] = None


class AccountPlanUpdateRequest(BaseModel):
    active: Optional[bool] = Field(None, example=True)
    core_hour_limit: Optional[float] = Field(None, alias='coreHourLimit', example=10.0)
    on_demand_rate: Optional[float] = Field(None, alias='onDemandRate', example=10.0)
    periodicity: Optional[str] = Field(None, example='Monthly')
    plan_code: Optional[str] = Field(None, alias='planCode', example='on-free')
    plan_name: Optional[str] = Field(None, alias='planName', example='Free')
    public_to_beamtool: Optional[bool] = Field(
        None, alias='publicToBeamtool', example=True
    )
    public_to_portal: Optional[bool] = Field(None, alias='publicToPortal', example=True)
    public_to_solve: Optional[bool] = Field(None, alias='publicToSolve', example=True)
    rate: Optional[float] = Field(None, example=0.0)


class AccountProductRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='101a1ce7-9e1a-4117-9801-dbde14acd43c',
    )
    onscale_cli: Optional[bool] = Field(None, alias='onscaleCli')
    onscale_lab: Optional[bool] = Field(None, alias='onscaleLab')
    onscale_python: Optional[bool] = Field(None, alias='onscalePython')
    onscale_solve: Optional[bool] = Field(None, alias='onscaleSolve')


class AccountReportRequest(BaseModel):
    eday: Optional[int] = None
    emonth: Optional[int] = None
    eyear: Optional[int] = None
    sday: Optional[int] = None
    smonth: Optional[int] = None
    syear: Optional[int] = None


class AccountRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )


class ObjectType(Enum):
    PROJECT = 'PROJECT'
    DESIGN = 'DESIGN'
    DESIGNINSTANCE = 'DESIGNINSTANCE'
    USER = 'USER'
    JOB = 'JOB'


class AccountSearchRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    field_name: Optional[str] = Field(None, alias='fieldName', example='projectTitle')
    keyword: str = Field(..., example='keyword')
    object_type: Optional[ObjectType] = Field(
        None, alias='objectType', description='String', example='PROJECT'
    )


class AccountSetCoreAllowedRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    lead_core_allowed: Optional[int] = Field(None, alias='leadCoreAllowed', example=64)
    user_core_allowed: Optional[int] = Field(None, alias='userCoreAllowed', example=64)


class AccountSetEnterpriseRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    enterprise: Optional[bool] = None


class AccountSetRebateRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    rebate_rate: Optional[float] = Field(None, alias='rebateRate', example=50.0)


class AccountSummary(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    account_name: Optional[str] = Field(None, alias='accountName')
    core_hours_available: Optional[float] = Field(None, alias='coreHoursAvailable')
    core_hours_credit: Optional[float] = Field(None, alias='coreHoursCredit')
    core_hours_debit: Optional[float] = Field(None, alias='coreHoursDebit')


class AccountSummaryResponse(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    account_name: Optional[str] = Field(None, alias='accountName')
    core_hours_available: Optional[float] = Field(None, alias='coreHoursAvailable')
    plan_code: Optional[str] = Field(None, alias='planCode')


class AccountTagRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    end_day: Optional[int] = Field(
        None, alias='endDay', description='endDay', example=1
    )
    end_month: Optional[int] = Field(
        None, alias='endMonth', description='endMonth', example=0
    )
    end_year: Optional[int] = Field(
        None, alias='endYear', description='endYear', example=2019
    )
    start_day: Optional[int] = Field(
        None, alias='startDay', description='startDay', example=1
    )
    start_month: Optional[int] = Field(
        None, alias='startMonth', description='startMonth', example=0
    )
    start_year: Optional[int] = Field(
        None, alias='startYear', description='startYear', example=2018
    )
    tag: Optional[str] = Field(None, example='TestTag1')
    tag_type: Optional[str] = Field(None, alias='tagType', example='ProjectTag')


class AccountTransaction(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    amount_in_cents: Optional[int] = Field(None, alias='amountInCents')
    collected_at: Optional[int] = Field(
        None, alias='collectedAt', description='1585700000000', example=1585700000000
    )
    created_at: Optional[int] = Field(
        None, alias='createdAt', description='1585700000000', example=1585700000000
    )
    credit_last_four: Optional[str] = Field(None, alias='creditLastFour')
    currency: Optional[str] = None
    description: Optional[str] = None
    invoice_id: Optional[str] = Field(None, alias='invoiceId')
    message: Optional[str] = None
    payment_method: Optional[str] = Field(None, alias='paymentMethod')
    transaction_id: Optional[str] = Field(None, alias='transactionId')
    transaction_state: Optional[str] = Field(None, alias='transactionState')
    transaction_type: Optional[str] = Field(None, alias='transactionType')


class AccountUpdateRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='57d38c55-657e-4c51-8f8f-1fb9dde53557',
    )
    account_name: Optional[str] = Field(
        None, alias='accountName', example='OnScale Test Account'
    )
    addr1: Optional[str] = Field(None, example='19200 Stevens Creek Blvd')
    addr2: Optional[str] = None
    city: Optional[str] = Field(None, example='Cupertino')
    company_name: Optional[str] = Field(None, alias='companyName', example='OnScale')
    country: Optional[str] = Field(None, example='US')
    email_address: Optional[str] = Field(
        None, alias='emailAddress', example='Robbie.Banks@onscale.com'
    )
    first_name: Optional[str] = Field(None, alias='firstName', example='Robbie')
    last_name: Optional[str] = Field(None, alias='lastName', example='Banks')
    phone_number: Optional[str] = Field(
        None, alias='phoneNumber', example='+14046474769'
    )
    state: Optional[str] = Field(None, example='CA')
    zip: Optional[str] = Field(None, example='95014')


class AccountUserRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    user_id: Optional[str] = Field(
        None,
        alias='userId',
        description='UUID',
        example='bd6bd9e4-d749-468e-b1bc-c7430ad4de05',
    )


class AllocateCoreHourRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    cognito_email: Optional[str] = Field(
        None, alias='cognitoEmail', description='email', example='josh@dc-control.com'
    )
    new_core_hours_allowed: Optional[float] = Field(
        None, alias='newCoreHoursAllowed', example=100.0
    )


class AllowSupportLoggingRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    allow_support_logging: Optional[bool] = Field(None, alias='allowSupportLogging')


class Precision(Enum):
    SINGLE = 'SINGLE'
    DOUBLE = 'DOUBLE'


class Analysis(BaseModel):
    analysis_id: Optional[str] = Field(
        None,
        alias='analysisId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    analysis_type: Optional[str] = Field(None, alias='analysisType')
    blob_id: Optional[str] = Field(None, alias='blobId')
    cipher_salt: Optional[str] = Field(
        None,
        alias='cipherSalt',
        description='UUID',
        example='00000000-0000-0000-0000-000000000000',
    )
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    design_id: Optional[str] = Field(None, alias='designId')
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    job_id: Optional[str] = Field(None, alias='jobId')
    life_time_limit: Optional[int] = Field(None, alias='lifeTimeLimit')
    physics_types: Optional[List[str]] = Field(None, alias='physicsTypes')
    precision: Optional[Precision] = Field(None, example='single')
    project_id: Optional[str] = Field(None, alias='projectId')
    python_hash: Optional[str] = Field(None, alias='pythonHash')
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')
    solver: Optional[str] = None
    time_duration: Optional[int] = Field(None, alias='timeDuration')
    time_step: Optional[int] = Field(None, alias='timeStep')
    user_id: Optional[str] = Field(None, alias='userId')


class Precision1(Enum):
    DOUBLE = 'DOUBLE'
    SINGLE = 'SINGLE'


class Solver(Enum):
    FLEX = 'FLEX'
    REFLEX = 'REFLEX'
    OPENFOAM = 'OPENFOAM'
    MOEBIUS = 'MOEBIUS'


class AnalysisCreateRequest(BaseModel):
    analysis_type: Optional[str] = Field(
        None, alias='analysisType', example='Simulation'
    )
    blob_id: str = Field(
        ...,
        alias='blobId',
        description='UUID',
        example='d66d33ee-72be-4f65-9bc1-de57697e90c6',
    )
    design_instance_id: str = Field(
        ...,
        alias='designInstanceId',
        description='UUID',
        example='5fb7ce2d-5be2-4e66-b452-76353ef57689',
    )
    docker_tag: Optional[str] = Field(
        None, alias='dockerTag', description='string', example='flexSolver'
    )
    docker_tag_id: Optional[str] = Field(
        None,
        alias='dockerTagId',
        description='UUID',
        example='5fb7ce2d-5be2-4e66-b452-76353ef57689',
    )
    init_job: Optional[bool] = Field(
        None, alias='initJob', description='Boolean', example=True
    )
    mesh_hash: Optional[str] = Field(
        None, alias='meshHash', description='string', example='meshHash'
    )
    physics_types: Optional[List[str]] = Field(None, alias='physicsTypes')
    precision: Precision1 = Field(..., description='string', example='DOUBLE')
    python_hash: Optional[str] = Field(
        None, alias='pythonHash', description='string', example='pythonHash'
    )
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')
    solver: Optional[Solver] = Field(None, example='flex')
    time_duration: Optional[int] = Field(None, alias='timeDuration')
    time_step: Optional[int] = Field(None, alias='timeStep')


class AnalysisRequest(BaseModel):
    analysis_id: str = Field(
        ...,
        alias='analysisId',
        description='UUID',
        example='34b80348-cf3f-4b2a-8f0a-e93a91749909',
    )


class AnalysisSearchRequest(BaseModel):
    design_instance_id: str = Field(
        ...,
        alias='designInstanceId',
        description='UUID',
        example='5fb7ce2d-5be2-4e66-b452-76353ef57689',
    )
    python_hash: Optional[str] = Field(
        None, alias='pythonHash', description='string', example='pythonHash'
    )


class AnalysisSubmitRequest(BaseModel):
    analysis_id: str = Field(
        ...,
        alias='analysisId',
        description='UUID',
        example='34b80348-cf3f-4b2a-8f0a-e93a91749909',
    )
    console_parameters: Optional[List[str]] = Field(None, alias='consoleParameters')
    core_hour_estimate: Optional[float] = Field(None, alias='coreHourEstimate')
    estimate_hash: Optional[str] = Field(
        None, alias='estimateHash', example='25bd707596237fa436411e746944d9dc'
    )
    estimated_memory: Optional[int] = Field(None, alias='estimatedMemory', example=9)
    estimated_run_time: Optional[int] = Field(
        None, alias='estimatedRunTime', example=123
    )
    job_name: Optional[str] = Field(None, alias='jobName', example='Solid Mechanics')
    number_of_cores: Optional[int] = Field(None, alias='numberOfCores', example=2)
    number_of_parts: Optional[int] = Field(None, alias='numberOfParts')
    parameters: Optional[Dict[str, List[str]]] = None
    required_blobs: Optional[List[List[str]]] = Field(None, alias='requiredBlobs')
    string_to_hash: Optional[str] = Field(None, alias='stringToHash')
    string_to_hash_extra: Optional[str] = Field(None, alias='stringToHashExtra')


class ApiException(BaseModel):
    code: Optional[int] = Field(None, description='integer', example=400)
    message: Optional[str] = None


class Audit(BaseModel):
    action_description: Optional[str] = Field(None, alias='actionDescription')
    action_detail: Optional[str] = Field(None, alias='actionDetail')
    action_type: Optional[str] = Field(None, alias='actionType')
    audit_id: Optional[str] = Field(None, alias='auditId')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    object_id: Optional[str] = Field(None, alias='objectId')
    user_id: Optional[str] = Field(None, alias='userId')


class ActionType(Enum):
    API_REFERRAL_PORTAL_2 = 'API_REFERRAL_PORTAL_2'
    API_REFERRAL_PORTAL_2_WIN = 'API_REFERRAL_PORTAL_2_WIN'


class AuditActionTypeRequest(BaseModel):
    action_type: Optional[ActionType] = Field(
        None, alias='actionType', example='API_REFERRAL_PORTAL_2'
    )


class AuthenticationResponse(BaseModel):
    access_token: Optional[str] = Field(None, alias='accessToken')
    expires_in: Optional[int] = Field(None, alias='expiresIn')
    id_token: Optional[str] = Field(None, alias='idToken')
    refresh_token: Optional[str] = Field(None, alias='refreshToken')


class BlobType(Enum):
    BINCAD = 'BINCAD'
    BREP = 'BREP'
    CAD = 'CAD'
    CADMETADATA = 'CADMETADATA'
    CSV = 'CSV'
    ESTIMATION = 'ESTIMATION'
    ICON = 'ICON'
    IMAGE = 'IMAGE'
    LIST = 'LIST'
    MESHAUTO = 'MESHAUTO'
    MESHCUSTOM = 'MESHCUSTOM'
    MESHSUMMARY = 'MESHSUMMARY'
    MLDATA = 'MLDATA'
    MLMODEL = 'MLMODEL'
    MODELDB = 'MODELDB'
    MODELERMETADATA = 'MODELERMETADATA'
    RUNTIMEGRAPHIC = 'RUNTIMEGRAPHIC'
    SIMAPI = 'SIMAPI'
    SIMMETADATA = 'SIMMETADATA'
    MATERIAL = 'MATERIAL'
    THUMBNAIL = 'THUMBNAIL'
    VISUALIZATION = 'VISUALIZATION'


class ObjectType1(Enum):
    PROJECT = 'PROJECT'
    DESIGN = 'DESIGN'
    DESIGNINSTANCE = 'DESIGNINSTANCE'
    USER = 'USER'
    JOB = 'JOB'
    SIMULATION = 'SIMULATION'


class Blob(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    blob_description: Optional[str] = Field(None, alias='blobDescription')
    blob_id: Optional[str] = Field(None, alias='blobId')
    blob_invalidated: Optional[bool] = Field(None, alias='blobInvalidated')
    blob_mime_type: Optional[str] = Field(None, alias='blobMimeType')
    blob_path: Optional[str] = Field(None, alias='blobPath')
    blob_title: Optional[str] = Field(None, alias='blobTitle')
    blob_type: BlobType = Field(
        ..., alias='blobType', description='String', example='CAD'
    )
    create_date: Optional[int] = Field(None, alias='createDate')
    expiration_date: Optional[int] = Field(None, alias='expirationDate')
    file_size: Optional[int] = Field(None, alias='fileSize')
    hash: Optional[str] = None
    hpc_id: Optional[str] = Field(None, alias='hpcId')
    object_id: Optional[str] = Field(None, alias='objectId')
    object_type: ObjectType1 = Field(
        ..., alias='objectType', description='String', example='DESIGN'
    )
    original_file_name: Optional[str] = Field(None, alias='originalFileName')
    parent_blob_id: Optional[str] = Field(None, alias='parentBlobId')
    secondary_hash: Optional[str] = Field(None, alias='secondaryHash')
    user_id: Optional[str] = Field(None, alias='userId')


class BlobIdRequest(BaseModel):
    blob_id: Optional[str] = Field(
        None,
        alias='blobId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )


class BlobInterfaceRequest(BaseModel):
    blob_id: Optional[str] = Field(
        None,
        alias='blobId',
        description='UUID',
        example='169488f7-274a-4096-b643-5c2fb0009f03',
    )
    domain1: Optional[int] = Field(None, example=1)
    domain2: Optional[int] = Field(None, example=4)


class BlobRequest(BaseModel):
    blob_type: Optional[str] = Field(None, alias='blobType', example='CAD')
    object_id: Optional[str] = Field(
        None, alias='objectId', example='d2bd5b90-9187-4842-ac10-d21c6931859d'
    )
    object_type: Optional[str] = Field(None, alias='objectType', example='PROJECT')


class CalendarUsage(BaseModel):
    day: Optional[int] = None
    month: Optional[int] = None
    overage_amount: Optional[float] = Field(None, alias='overageAmount')
    quarter: Optional[int] = None
    total_amount: Optional[float] = Field(None, alias='totalAmount')
    week: Optional[int] = None
    year: Optional[int] = None


class ChartPoint(BaseModel):
    label: Optional[str] = None
    string_counter: Optional[List[List[str]]] = Field(None, alias='stringCounter')
    sub_chart_id: Optional[str] = Field(None, alias='subChartId')
    tooltip: Optional[str] = None
    values: Optional[List[float]] = None
    x: Optional[int] = None


class LevelType(Enum):
    TOP = 'TOP'
    MIDDLE = 'MIDDLE'


class ReportType(Enum):
    ACTIVE_ACCOUNTS = 'ACTIVE_ACCOUNTS'
    PLANCODE = 'PLANCODE'
    CORE_HOUR_BURN = 'CORE_HOUR_BURN'
    TIMELINE = 'TIMELINE'


class ChartReport(BaseModel):
    chart_id: Optional[str] = Field(None, alias='chartId')
    chart_report_values: Optional[List[ChartPoint]] = Field(
        None, alias='chartReportValues'
    )
    chart_title: Optional[str] = Field(None, alias='chartTitle')
    chart_value: Optional[int] = Field(None, alias='chartValue')
    column_titles: Optional[List[str]] = Field(None, alias='columnTitles')
    index_title: Optional[str] = Field(None, alias='indexTitle')
    level_type: Optional[LevelType] = Field(None, alias='levelType')
    max_value: Optional[float] = Field(None, alias='maxValue')
    min_value: Optional[float] = Field(None, alias='minValue')
    report_type: Optional[ReportType] = Field(None, alias='reportType')
    value_title: Optional[str] = Field(None, alias='valueTitle')
    values_are_dates: Optional[bool] = Field(None, alias='valuesAreDates')


class ChatBaseRequest(BaseModel):
    chat_session_id: Optional[str] = Field(
        None,
        alias='chatSessionId',
        description='UUID',
        example='d2bd5b90-9187-4842-ac10-d21c6931859d',
    )


class ChatInvitationRequest(BaseModel):
    chat_session_id: Optional[str] = Field(
        None,
        alias='chatSessionId',
        description='UUID',
        example='d2bd5b90-9187-4842-ac10-d21c6931859d',
    )
    invited_user_ids: Optional[List[str]] = Field(None, alias='invitedUserIds')


class ChatSendRequest(BaseModel):
    chat_session_id: Optional[str] = Field(
        None,
        alias='chatSessionId',
        description='UUID',
        example='d2bd5b90-9187-4842-ac10-d21c6931859d',
    )
    message: Optional[str] = Field(None, description='String', example='Hello')


class ChatSession(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    chat_session_id: Optional[str] = Field(
        None,
        alias='chatSessionId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    chat_type: Optional[str] = Field(None, alias='chatType')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    end_date: Optional[int] = Field(
        None, alias='endDate', description='1585700000000', example=1585700000000
    )
    project_id: Optional[str] = Field(None, alias='projectId')
    user_id: Optional[str] = Field(
        None,
        alias='userId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )


class ChatSessionMessage(BaseModel):
    chat_session_id: Optional[str] = Field(
        None,
        alias='chatSessionId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    chat_session_message_id: Optional[str] = Field(
        None,
        alias='chatSessionMessageId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    content: Optional[int] = Field(
        None, description='String', example='message content'
    )
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    user_id: Optional[str] = Field(
        None,
        alias='userId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )


class ChatSessionUser(BaseModel):
    chat_session_id: Optional[str] = Field(
        None,
        alias='chatSessionId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    join_date: Optional[int] = Field(
        None, alias='joinDate', description='1585700000000', example=1585700000000
    )
    left_date: Optional[int] = Field(
        None, alias='leftDate', description='1585700000000', example=1585700000000
    )
    user_id: Optional[str] = Field(
        None,
        alias='userId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )


class ChatStartSessionRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    chat_type: Optional[str] = Field(None, alias='chatType', example='PROJECT')
    invited_user_ids: Optional[List[str]] = Field(None, alias='invitedUserIds')
    project_id: Optional[str] = Field(
        None, alias='projectId', example='d2bd5b90-9187-4842-ac10-d21c6931859d'
    )


class ContainerReport(BaseModel):
    container_type: Optional[str] = Field(None, alias='containerType')
    time_group_map: Optional[Dict[str, int]] = Field(None, alias='timeGroupMap')


class Contributor(BaseModel):
    access_type: Optional[str] = Field(None, alias='accessType')
    account_admin: Optional[bool] = Field(None, alias='accountAdmin')
    account_lead: Optional[bool] = Field(None, alias='accountLead')
    core_hour_used: Optional[float] = Field(None, alias='coreHourUsed')
    department: Optional[str] = None
    first_name: Optional[str] = Field(None, alias='firstName')
    last_action: Optional[str] = Field(None, alias='lastAction')
    last_date: Optional[int] = Field(
        None, alias='lastDate', description='1585700000000', example=1585700000000
    )
    last_name: Optional[str] = Field(None, alias='lastName')
    title: Optional[str] = None
    user_id: Optional[str] = Field(None, alias='userId')


class CouponType(Enum):
    VAR = 'VAR'
    SINGLETON = 'SINGLETON'
    MULTIPLE = 'MULTIPLE'


class CouponMasterCreateRequest(BaseModel):
    core_hour_amount: Optional[float] = Field(
        None, alias='coreHourAmount', example=20.0
    )
    coupon_description: Optional[str] = Field(
        None, alias='couponDescription', example='Master Coupon Description'
    )
    coupon_name: Optional[str] = Field(
        None, alias='couponName', example='Master Coupon Name'
    )
    coupon_type: Optional[CouponType] = Field(None, alias='couponType', example='VAR')
    expired_date: Optional[datetime] = Field(
        None, alias='expiredDate', example='2021-10-01'
    )
    locked_days: Optional[int] = Field(None, alias='lockedDays', example=30)
    max_redeemable_times: Optional[int] = Field(
        None, alias='maxRedeemableTimes', example=100
    )
    percentage: Optional[float] = Field(None, example=10.0)
    start_date: Optional[datetime] = Field(
        None, alias='startDate', example='2021-01-01'
    )
    var_account_id: Optional[str] = Field(
        None,
        alias='var_accountId',
        description='UUID',
        example='2c5ce1e6-5abb-4e24-831e-04ce9b22f94e',
    )


class CouponMasterListRequest(BaseModel):
    include_expired: Optional[bool] = Field(None, alias='includeExpired', example=False)
    var_account_id: Optional[str] = Field(
        None,
        alias='var_accountId',
        description='UUID',
        example='2c5ce1e6-5abb-4e24-831e-04ce9b22f94e',
    )


class CouponMasterLoadRequest(BaseModel):
    coupon_master_id: Optional[str] = Field(
        None,
        alias='couponMasterId',
        description='UUID',
        example='8800f1b0-d68e-4ce0-8518-ef3b41ef44eb',
    )
    included_redeemable: Optional[bool] = Field(
        None, alias='includedRedeemable', example=False
    )


class CouponMasterRequest(BaseModel):
    coupon_master_id: Optional[str] = Field(
        None,
        alias='couponMasterId',
        description='UUID',
        example='8800f1b0-d68e-4ce0-8518-ef3b41ef44eb',
    )


class CouponMasterUpdateRequest(BaseModel):
    core_hour_amount: Optional[float] = Field(
        None, alias='coreHourAmount', example=20.0
    )
    coupon_description: Optional[str] = Field(
        None, alias='couponDescription', example='Master Coupon Description'
    )
    coupon_master_id: Optional[str] = Field(
        None,
        alias='couponMasterId',
        description='UUID',
        example='8800f1b0-d68e-4ce0-8518-ef3b41ef44eb',
    )
    coupon_name: Optional[str] = Field(
        None, alias='couponName', example='Master Coupon Name'
    )
    expire_date: Optional[datetime] = Field(
        None, alias='expireDate', example='2021-10-01'
    )
    locked_days: Optional[int] = Field(None, alias='lockedDays', example=30)
    max_redeemable_times: Optional[int] = Field(
        None, alias='maxRedeemableTimes', example=100
    )
    percentage: Optional[float] = Field(None, example=10.0)
    start_date: Optional[datetime] = Field(
        None, alias='startDate', example='2021-01-01'
    )


class CouponRedeemRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    coupon_code: Optional[str] = Field(
        None, alias='couponCode', description='String', example='PCCTYHB1SU'
    )


class CouponRedeemable(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    account_ledger_id: Optional[str] = Field(None, alias='accountLedgerId')
    coupon_code: Optional[str] = Field(None, alias='couponCode')
    coupon_master_id: Optional[str] = Field(None, alias='couponMasterId')
    coupon_redeemable_id: Optional[str] = Field(None, alias='couponRedeemableId')
    create_date: Optional[datetime] = Field(None, alias='createDate')
    create_user_id: Optional[str] = Field(None, alias='createUserId')
    expire_date: Optional[datetime] = Field(None, alias='expireDate')
    expired: Optional[bool] = None
    redeemed_core_hours: Optional[float] = Field(None, alias='redeemedCoreHours')
    redeemed_date: Optional[datetime] = Field(None, alias='redeemedDate')
    redeemed_type: Optional[str] = Field(None, alias='redeemedType')
    user_id: Optional[str] = Field(None, alias='userId')
    var_account_id: Optional[str] = Field(None, alias='var_accountId')
    void_date: Optional[datetime] = Field(None, alias='voidDate')


class CouponRedeemableCreateRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    coupon_master_id: Optional[str] = Field(
        None,
        alias='couponMasterId',
        description='UUID',
        example='8800f1b0-d68e-4ce0-8518-ef3b41ef44eb',
    )
    expire_date: Optional[datetime] = Field(
        None, alias='expireDate', example='2021-10-01'
    )


class CouponRedeemableListRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='2c5ce1e6-34bb-4e24-831e-04ce9b22f94e',
    )
    coupon_master_id: Optional[str] = Field(
        None,
        alias='couponMasterId',
        description='UUID',
        example='8800f1b0-d68e-4ce0-8518-ef3b41ef44eb',
    )
    not_redeemed_only: Optional[bool] = Field(
        None, alias='notRedeemedOnly', example=False
    )
    redeemed_only: Optional[bool] = Field(None, alias='redeemedOnly', example=False)
    var_account_id: Optional[str] = Field(
        None,
        alias='var_accountId',
        description='UUID',
        example='2c5ce1e6-5abb-4e24-831e-04ce9b22f94e',
    )


class CouponRedeemableRequest(BaseModel):
    coupon_redeemable_id: Optional[str] = Field(
        None,
        alias='couponRedeemableId',
        description='UUID',
        example='261799bd-aad9-45c3-bba4-c79b7b1dce80',
    )


class CustomMeshParams(BaseModel):
    cell_gradation: Optional[str] = Field(None, alias='cellGradation')
    custom: Optional[bool] = None
    interior_cell_size: Optional[str] = Field(None, alias='interiorCellSize')
    surface_course_cell_size: Optional[str] = Field(None, alias='surfaceCourseCellSize')
    surface_fine_cell_size: Optional[str] = Field(None, alias='surfaceFineCellSize')


class DateRangeRequest(BaseModel):
    end_day: Optional[int] = Field(
        None, alias='endDay', description='endDay', example=1
    )
    end_month: Optional[int] = Field(
        None, alias='endMonth', description='endMonth', example=0
    )
    end_year: Optional[int] = Field(
        None, alias='endYear', description='endYear', example=2019
    )
    start_day: Optional[int] = Field(
        None, alias='startDay', description='startDay', example=1
    )
    start_month: Optional[int] = Field(
        None, alias='startMonth', description='startMonth', example=0
    )
    start_year: Optional[int] = Field(
        None, alias='startYear', description='startYear', example=2018
    )


class DayRequest(BaseModel):
    calendar: Optional[datetime] = None
    day: Optional[int] = Field(None, description='Number', example=10)
    month: Optional[int] = Field(None, description='Number', example=8)
    year: Optional[int] = Field(None, description='Number', example=2018)


class DefaultUpdateRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    default_max_sim_core_hour: Optional[float] = Field(
        None, alias='defaultMaxSimCoreHour', example=100.0
    )
    default_project_core_hour: Optional[float] = Field(
        None, alias='defaultProjectCoreHour', example=100.0
    )


class Physics(Enum):
    ACOUSTIC = 'ACOUSTIC'
    AEROACOUSTIC = 'AEROACOUSTIC'
    ELECTROMAGNETIC = 'ELECTROMAGNETIC'
    ELECTROMECHANICAL = 'ELECTROMECHANICAL'
    FLUID = 'FLUID'
    FLUIDELECTROMECHANICAL = 'FLUIDELECTROMECHANICAL'
    FLUIDELECTROTHERMOMECHANICAL = 'FLUIDELECTROTHERMOMECHANICAL'
    FLUIDMECHANICAL = 'FLUIDMECHANICAL'
    FLUIDTHERMAL = 'FLUIDTHERMAL'
    FLUIDTHERMOMECHANICAL = 'FLUIDTHERMOMECHANICAL'
    MECHANICAL = 'MECHANICAL'
    THERMAL = 'THERMAL'
    THERMOELECTROMAGNETIC = 'THERMOELECTROMAGNETIC'
    THERMOMECHANICAL = 'THERMOMECHANICAL'


class DesignArchiveRequest(BaseModel):
    archive: Optional[bool] = None
    design_id: Optional[str] = Field(
        None,
        alias='designId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )


class DesignBlobRequest(BaseModel):
    blob_id: Optional[str] = Field(None, alias='blobId')
    design_id: Optional[str] = Field(None, alias='designId')


class DesignCloneRequest(BaseModel):
    cloned_design_title: Optional[str] = Field(
        None, alias='clonedDesignTitle', example='New Design'
    )
    cloned_instance_title: Optional[str] = Field(
        None, alias='clonedInstanceTitle', example='Version 1'
    )
    design_instance_id: Optional[str] = Field(
        None,
        alias='designInstanceId',
        description='UUID',
        example='fce88a01-c789-46e3-a1de-e6377921b405',
    )


class Physics1(Enum):
    ACOUSTIC = 'ACOUSTIC'
    AEROACOUSTIC = 'AEROACOUSTIC'
    ELECTROMAGNETIC = 'ELECTROMAGNETIC'
    ELECTROMECHANICAL = 'ELECTROMECHANICAL'
    FLUID = 'FLUID'
    FLUIDELECTROMECHANICAL = 'FLUIDELECTROMECHANICAL'
    FLUIDELECTROTHERMOMECHANICAL = 'FLUIDELECTROTHERMOMECHANICAL'
    FLUIDMECHANICAL = 'FLUIDMECHANICAL'
    FLUIDTHERMAL = 'FLUIDTHERMAL'
    FLUIDTHERMOMECHANICAL = 'FLUIDTHERMOMECHANICAL'
    MECHANICAL = 'MECHANICAL'
    THERMAL = 'THERMAL'
    THERMOELECTROMAGNETIC = 'THERMOELECTROMAGNETIC'
    THERMOMECHANICAL = 'THERMOMECHANICAL'


class DesignCreateRequest(BaseModel):
    design_description: Optional[str] = Field(
        None, alias='designDescription', example='Design Description'
    )
    design_goal: Optional[str] = Field(None, alias='designGoal')
    design_title: Optional[str] = Field(None, alias='designTitle', example='Design #1')
    physics: Optional[Physics1] = Field(None, example='MECHANICAL')
    project_id: Optional[str] = Field(
        None,
        alias='projectId',
        description='UUID',
        example='ff7bb91d-12dd-465a-b305-e2e7c3200e84',
    )


class DesignInstance(BaseModel):
    analysis_list: Optional[List[Analysis]] = Field(None, alias='analysisList')
    archived: Optional[bool] = None
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    description: Optional[str] = None
    design_id: Optional[str] = Field(
        None,
        alias='designId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    design_instance_hash: Optional[str] = Field(None, alias='designInstanceHash')
    design_instance_id: Optional[str] = Field(
        None,
        alias='designInstanceId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    design_instance_title: Optional[str] = Field(
        None, alias='designInstanceTitle', example='Instance Title'
    )
    locked: Optional[bool] = None
    project_id: Optional[str] = Field(None, alias='projectId')
    user_id: Optional[str] = Field(None, alias='userId')


class DesignInstanceArchiveRequest(BaseModel):
    archive: Optional[bool] = None
    design_instance_id: Optional[str] = Field(
        None,
        alias='designInstanceId',
        description='UUID',
        example='fce88a01-c789-46e3-a1de-e6377921b405',
    )


class DesignInstanceFileListRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None,
        alias='designInstanceId',
        description='UUID',
        example='fce88a01-c789-46e3-a1de-e6377921b405',
    )
    directory: Optional[str] = None
    include_shared_file: Optional[bool] = Field(None, alias='includeSharedFile')
    include_sub_directory: Optional[bool] = Field(
        None, alias='includeSubDirectory', example=True
    )


class DesignInstanceFilePath(BaseModel):
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    directory: Optional[str] = None
    file_name: str = Field(
        ..., alias='fileName', description='UUID', example='disk.flxinp'
    )
    path: Optional[str] = None
    project_id: Optional[str] = Field(None, alias='projectId')


class DesignInstanceFileRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None,
        alias='designInstanceId',
        description='UUID',
        example='fce88a01-c789-46e3-a1de-e6377921b405',
    )
    directory: Optional[str] = None
    file_name: Optional[str] = Field(None, alias='fileName')
    shared_file: Optional[bool] = Field(None, alias='sharedFile', example=False)


class DesignInstanceRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None,
        alias='designInstanceId',
        description='UUID',
        example='fce88a01-c789-46e3-a1de-e6377921b405',
    )


class DesignRequest(BaseModel):
    design_id: Optional[str] = Field(
        None,
        alias='designId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )


class DesignUpdateDescriptionRequest(BaseModel):
    design_description: Optional[str] = Field(
        None, alias='designDescription', example='Design Description'
    )
    design_id: Optional[str] = Field(
        None,
        alias='designId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )


class DesignUpdateGoalRequest(BaseModel):
    design_goal: Optional[str] = Field(None, alias='designGoal')
    design_id: Optional[str] = Field(
        None,
        alias='designId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )


class DesignUpdateRequest(BaseModel):
    design_description: Optional[str] = Field(
        None, alias='designDescription', example='Design Description'
    )
    design_goal: Optional[str] = Field(None, alias='designGoal', example='Design Goal')
    design_id: Optional[str] = Field(
        None,
        alias='designId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )
    design_title: Optional[str] = Field(None, alias='designTitle', example='Design #1')


class DesignUpdateTitleRequest(BaseModel):
    design_id: Optional[str] = Field(
        None,
        alias='designId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )
    design_title: Optional[str] = Field(None, alias='designTitle', example='Design #1')


class DestinationRequest(BaseModel):
    destination: str = Field(..., example='https://solve.ngtest.portal.onscale.com')


class DockerTagCreateRequest(BaseModel):
    cad_conversion: Optional[str] = Field(
        None, alias='cadConversion', example='cadconversion'
    )
    cad_interface: Optional[str] = Field(
        None, alias='cadInterface', example='cadinterface'
    )
    driver_solver: Optional[str] = Field(
        None, alias='driverSolver', example='kyle-driver'
    )
    flex: Optional[str] = Field(None, example='flex')
    flex_estimate: Optional[str] = Field(
        None, alias='flexEstimate', example='flexEstimate'
    )
    flex_mesh: Optional[str] = Field(None, alias='flexMesh', example='flexMesh')
    init_container: Optional[str] = Field(None, alias='initContainer', example='latest')
    moebius: Optional[str] = Field(None, example='moebius')
    moebius_estimate: Optional[str] = Field(
        None, alias='moebiusEstimate', example='moebiusEstimate'
    )
    moebius_mesh: Optional[str] = Field(
        None, alias='moebiusMesh', example='moebiusMesh'
    )
    open_foam: Optional[str] = Field(None, alias='openFoam', example='openfoam')
    openfoam_estimate: Optional[str] = Field(
        None, alias='openfoamEstimate', example='openfoamEstimate'
    )
    post_processor: Optional[str] = Field(
        None, alias='postProcessor', example='postprocess'
    )
    reflex: Optional[str] = Field(None, example='reflex')
    reflex_estimate: Optional[str] = Field(
        None, alias='reflexEstimate', example='reflexEstimate'
    )
    reflex_mesh: Optional[str] = Field(None, alias='reflexMesh', example='reflexMesh')
    simapi_notebook: Optional[str] = Field(
        None, alias='simapiNotebook', example='simapiNotebook'
    )
    stage: Optional[str] = Field(None, example='test')
    supervisor: Optional[str] = Field(None, example='supervisor')


class DocumentsGetDocumentsResponseItemsCreatedBy(BaseModel):
    href: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None


class DocumentsGetDocumentsResponseItemsDefaultWorkspace(BaseModel):
    href: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None


class DocumentsGetDocumentsResponseItemsModifiedBy(BaseModel):
    href: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None


class DocumentsGetDocumentsResponseItemsThumbnailSizes(BaseModel):
    href: Optional[str] = None
    media_type: Optional[str] = Field(None, alias='mediaType')
    render_mode: Optional[str] = Field(None, alias='renderMode')
    size: Optional[str] = None
    view_orientation: Optional[str] = Field(None, alias='viewOrientation')


class DocumentsGetElementListResponseElementsThumbnailInfoSizes(BaseModel):
    href: Optional[str] = None
    media_type: Optional[str] = Field(None, alias='mediaType')
    size: Optional[str] = None


class EmailRequest(BaseModel):
    email_address: Optional[str] = Field(
        None, alias='emailAddress', example='josh@dc-control.com'
    )


class EnterpriseUser(BaseModel):
    account_access_list: Optional[List[AccountAccess]] = Field(
        None, alias='accountAccessList'
    )
    department: Optional[str] = None
    first_name: Optional[str] = Field(None, alias='firstName')
    last_name: Optional[str] = Field(None, alias='lastName')
    title: Optional[str] = None
    user_id: Optional[str] = Field(None, alias='userId')


class EnumOption(BaseModel):
    option: Optional[str] = None
    option_name: Optional[str] = Field(None, alias='optionName')


class Precision2(Enum):
    SINGLE = 'SINGLE'
    DOUBLE = 'DOUBLE'


class Estimate(BaseModel):
    application: Optional[str] = None
    blob_id: Optional[str] = Field(None, alias='blobId')
    cipher_salt: Optional[str] = Field(
        None,
        alias='cipherSalt',
        description='UUID',
        example='00000000-0000-0000-0000-000000000000',
    )
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId')
    estimate_id: Optional[str] = Field(None, alias='estimateId')
    job_id: Optional[str] = Field(None, alias='jobId')
    life_time_limit: Optional[int] = Field(None, alias='lifeTimeLimit')
    precision: Optional[Precision2] = Field(None, example='single')
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')
    solver: Optional[str] = None
    user_id: Optional[str] = Field(None, alias='userId')


class FavoriteListRequest(BaseModel):
    object_type: Optional[str] = Field(None, alias='objectType', example='PROJECT')


class FavoriteRequest(BaseModel):
    object_id: Optional[str] = Field(None, alias='objectId')
    object_type: Optional[str] = Field(None, alias='objectType', example='PROJECT')


class FileAlias(BaseModel):
    file_alias: Optional[str] = Field(None, alias='fileAlias')
    file_name: Optional[str] = Field(None, alias='fileName')


class FilePath(BaseModel):
    file_name: str = Field(
        ..., alias='fileName', description='UUID', example='disk.flxinp'
    )
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )
    path: Optional[str] = None
    simulation_id: Optional[str] = Field(
        None,
        alias='simulationId',
        description='UUID',
        example='5408d232-22cd-4fb3-a5af-d328f650d198',
    )


class Filter(BaseModel):
    filter_by: Optional[str] = Field(None, alias='filterBy', example='p_wid')
    max_value: Optional[float] = Field(None, alias='maxValue', example=1.0)
    min_value: Optional[float] = Field(None, alias='minValue', example=0.0)
    text_match: Optional[str] = Field(None, alias='textMatch', example='a')


class GroupCreateRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    group_name: Optional[str] = Field(
        None, alias='groupName', example='Design Group #1'
    )
    user_id_list: Optional[List[str]] = Field(None, alias='userIdList')


class GroupRequest(BaseModel):
    group_id: Optional[str] = Field(
        None,
        alias='groupId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )


class GroupUserRequest(BaseModel):
    group_id: Optional[str] = Field(
        None,
        alias='groupId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )
    user_id_list: Optional[List[str]] = Field(None, alias='userIdList')


class HistogramReport(BaseModel):
    chart_id: Optional[str] = Field(None, alias='chartId')
    chart_title: Optional[str] = Field(None, alias='chartTitle')
    data: Optional[Dict[str, float]] = None
    labels_title: Optional[str] = Field(None, alias='labelsTitle')
    value_title: Optional[str] = Field(None, alias='valueTitle')


class Hpc(BaseModel):
    hpc_account_bucket: Optional[str] = Field(None, alias='hpcAccountBucket')
    hpc_active: Optional[bool] = Field(None, alias='hpcActive')
    hpc_cloud: Optional[str] = Field(None, alias='hpcCloud')
    hpc_cluster_name: Optional[str] = Field(None, alias='hpcClusterName')
    hpc_description: Optional[str] = Field(None, alias='hpcDescription')
    hpc_id: Optional[str] = Field(None, alias='hpcId')
    hpc_region: Optional[str] = Field(None, alias='hpcRegion')
    max_node_cores: Optional[int] = Field(None, alias='maxNodeCores')
    max_node_ram: Optional[int] = Field(None, alias='maxNodeRam')


class HpcReport(BaseModel):
    hpc_id: Optional[str] = Field(None, alias='hpcId')
    time_group_map: Optional[Dict[str, int]] = Field(None, alias='timeGroupMap')


class Method(Enum):
    POST = 'POST'
    GET = 'GET'
    PUT = 'PUT'
    DELETE = 'DELETE'


class HttpRequest(BaseModel):
    form_fields: Optional[Dict[str, str]] = Field(None, alias='formFields')
    headers: Optional[Dict[str, str]] = None
    method: Optional[Method] = Field(None, description='string', example='POST')
    uri: Optional[str] = Field(
        None, description='string', example='https://onscale-useast1.s3.amazonaws.com'
    )


class InstanceCreateRequest(BaseModel):
    description: Optional[str] = Field(None, example='Default')
    design_id: Optional[str] = Field(
        None,
        alias='designId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )
    design_instance_hash: Optional[str] = Field(None, alias='designInstanceHash')
    design_instance_id: Optional[str] = Field(
        None,
        alias='designInstanceId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )
    design_instance_title: Optional[str] = Field(
        None, alias='designInstanceTitle', example='Instance Title'
    )


class InstanceUpdateTitleRequest(BaseModel):
    description: Optional[str] = Field(None, example='Default')
    design_instance_id: Optional[str] = Field(
        None,
        alias='designInstanceId',
        description='UUID',
        example='0892e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    design_instance_title: Optional[str] = Field(
        None, alias='designInstanceTitle', example='Instance Title'
    )


class ItemIdListRequest(BaseModel):
    item_id_list: Optional[List[str]] = Field(None, alias='itemIdList')


class ItemIdRequest(BaseModel):
    item_id: Optional[str] = Field(
        None,
        alias='itemId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )


class Operation(Enum):
    SIMULATION = 'SIMULATION'
    EMSIMULATION = 'EMSIMULATION'
    MPI = 'MPI'
    EMMPI = 'EMMPI'
    MNMPI = 'MNMPI'
    EMMNMPI = 'EMMNMPI'
    MOEBIUS_MPI = 'MOEBIUS_MPI'
    MOEBIUS_MNMPI = 'MOEBIUS_MNMPI'
    OPENFOAM = 'OPENFOAM'
    OPENFOAM_MNMPI = 'OPENFOAM_MNMPI'
    REFLEX_MPI = 'REFLEX_MPI'
    REFLEX_MNMPI = 'REFLEX_MNMPI'
    ESTIMATE = 'ESTIMATE'
    REVIEW = 'REVIEW'
    BUILD = 'BUILD'


class Precision3(Enum):
    SINGLE = 'SINGLE'
    DOUBLE = 'DOUBLE'


class Preprocessor(Enum):
    NONE = 'NONE'
    MODELWRITER = 'MODELWRITER'


class JobAccess(BaseModel):
    cognito_email: Optional[str] = Field(
        None, alias='cognitoEmail', description='email', example='josh@dc-control.com'
    )
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )


class JobAccessRequest(BaseModel):
    cognito_email: Optional[str] = Field(
        None, alias='cognitoEmail', description='email', example='josh@dc-control.com'
    )
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )


class JobArchiveResponse(BaseModel):
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )


class JobCostResponse(BaseModel):
    job_cost: Optional[float] = Field(None, alias='jobCost')
    job_id: Optional[str] = Field(
        None, alias='jobId', description='float', example='11.45'
    )


class JobCreateResponse(BaseModel):
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )


class Precision4(Enum):
    DOUBLE = 'DOUBLE'
    SINGLE = 'SINGLE'


class Solver1(Enum):
    FLEX = 'FLEX'
    REFLEX = 'REFLEX'
    OPENFOAM = 'OPENFOAM'
    MOEBIUS = 'MOEBIUS'


class JobEstimateRequest(BaseModel):
    application: Optional[str] = None
    blob_id: Optional[str] = Field(
        None,
        alias='blobId',
        description='UUID',
        example='46306033-059a-4ddc-95a5-26641a56634c',
    )
    docker_tag: Optional[str] = Field(None, alias='dockerTag', description='string')
    docker_tag_id: Optional[str] = Field(
        None,
        alias='dockerTagId',
        description='UUID',
        example='5fb7ce2d-5be2-4e66-b452-76353ef57689',
    )
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='36e71237-eab5-48a1-82a5-8725bedcfaf9',
    )
    precision: Precision4 = Field(..., description='string', example='DOUBLE')
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')
    solver: Optional[Solver1] = Field(None, example='reflex')


class JobFile(BaseModel):
    directory: Optional[bool] = None
    download_request: Optional[HttpRequest] = Field(None, alias='downloadRequest')
    file_date: Optional[int] = Field(
        None, alias='fileDate', description='1585700000000', example=1585700000000
    )
    file_hash: Optional[str] = Field(
        None,
        alias='fileHash',
        description='Hex MD5 hash value',
        example='3804a442bf0a705da7c2a32b1df64304',
    )
    file_name: Optional[str] = Field(None, alias='fileName')
    file_size: Optional[int] = Field(None, alias='fileSize')
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )


class JobGetKeyResponse(BaseModel):
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )
    key: Optional[AESKey] = None


class JobInitRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    hpc_id: Optional[str] = Field(
        None,
        alias='hpcId',
        description='UUID',
        example='0f778276-7f91-4b03-99a1-4a88e4002dca',
    )


class JobListLoadRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    end_date: Optional[datetime] = Field(None, alias='endDate', example='2020-10-01')
    max_num: Optional[int] = Field(None, alias='maxNum', example=100)
    start_date: Optional[datetime] = Field(
        None, alias='startDate', example='2020-06-01'
    )


class JobListPageRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    design_id: Optional[str] = Field(None, alias='designId')
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    end_date: Optional[datetime] = Field(None, alias='endDate', example='2019-05-31')
    include_children_account: Optional[bool] = Field(
        None, alias='includeChildrenAccount', example=False
    )
    include_children_jobs: Optional[bool] = Field(
        None, alias='includeChildrenJobs', example=False
    )
    include_combined: Optional[bool] = Field(
        None, alias='includeCombined', example=False
    )
    include_created: Optional[bool] = Field(None, alias='includeCreated', example=False)
    include_finished: Optional[bool] = Field(
        None, alias='includeFinished', example=True
    )
    include_job_status: Optional[bool] = Field(
        None, alias='includeJobStatus', example=True
    )
    include_project_access_jobs: Optional[bool] = Field(
        None, alias='includeProjectAccessJobs', example=False
    )
    include_queued: Optional[bool] = Field(None, alias='includeQueued', example=True)
    job_status: Optional[str] = Field(None, alias='jobStatus', example='finished')
    no_project_job_only: Optional[bool] = Field(
        None, alias='noProjectJobOnly', example=False
    )
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=20)
    project_id: Optional[str] = Field(None, alias='projectId')
    project_job_only: Optional[bool] = Field(
        None, alias='projectJobOnly', example=False
    )
    start_date: Optional[datetime] = Field(
        None, alias='startDate', example='2018-06-01'
    )


class JobLoadRequest(BaseModel):
    exclude_job_status: Optional[bool] = Field(
        None, alias='excludeJobStatus', example=False
    )
    exclude_simulation: Optional[bool] = Field(
        None, alias='excludeSimulation', example=False
    )
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )


class JobPostProcessorRequest(BaseModel):
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId', description='UUID')
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='996b2fdd-3e52-40fe-938f-5301816d01d0',
    )


class JobRequest(BaseModel):
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )


class JobRestartRequest(BaseModel):
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )
    simulation_parameters: Optional[List[str]] = Field(
        None, alias='simulationParameters'
    )


class JobStatus1(Enum):
    CREATED = 'CREATED'
    QUEUED = 'QUEUED'
    PAUSED = 'PAUSED'
    FAILED = 'FAILED'
    FINISHED = 'FINISHED'


class JobStatus(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )
    job_status: Optional[JobStatus1] = Field(None, alias='jobStatus')
    job_status_date: Optional[int] = Field(
        None, alias='jobStatusDate', description='1585700000000', example=1585700000000
    )


class JobUpdateRequest(BaseModel):
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )
    job_name: Optional[str] = Field(
        None,
        alias='jobName',
        description='new job name',
        example='New Name of this Job',
    )


class LoginRequest(BaseModel):
    email_address: str = Field(..., alias='emailAddress', example='xkcd@xkcd.com')
    mfa_token: Optional[int] = Field(None, alias='mfaToken', example=123456)
    password: str = Field(..., example='correcthorsebatterystaple')


class Material(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    color: Optional[str] = None
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    hidden: Optional[bool] = None
    material_category: Optional[str] = Field(None, alias='materialCategory')
    material_description: Optional[str] = Field(None, alias='materialDescription')
    material_format: Optional[str] = Field(None, alias='materialFormat')
    material_id: Optional[str] = Field(None, alias='materialId')
    material_model: Optional[str] = Field(None, alias='materialModel')
    material_title: Optional[str] = Field(None, alias='materialTitle')
    plain_json: Optional[str] = Field(None, alias='plainJson')
    public: Optional[bool] = None
    solver_used_name: Optional[str] = Field(None, alias='solverUsedName')
    user_id: Optional[str] = Field(None, alias='userId')
    version: Optional[int] = None


class MaterialCreateRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    color: Optional[str] = Field(None, example='red')
    material_category: Optional[str] = Field(
        None, alias='materialCategory', example='fluid'
    )
    material_description: Optional[str] = Field(
        None, alias='materialDescription', example='Material Description'
    )
    material_format: Optional[str] = Field(
        None, alias='materialFormat', example='os.2.0'
    )
    material_json: Optional[str] = Field(None, alias='materialJson')
    material_model: Optional[str] = Field(
        None, alias='materialModel', example='Linear Isotropic'
    )
    material_title: Optional[str] = Field(
        None, alias='materialTitle', example='Material Title 1'
    )
    public: Optional[bool] = Field(None, description='Boolean', example=False)
    solver_used_name: Optional[str] = Field(None, alias='solverUsedName', example='aln')


class MaterialRequest(BaseModel):
    material_id: Optional[str] = Field(
        None,
        alias='materialId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )


class Mesh(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    blob_id: Optional[str] = Field(None, alias='blobId')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    custom: Optional[bool] = None
    custom_mesh_params: Optional[CustomMeshParams] = Field(
        None, alias='customMeshParams'
    )
    design_id: Optional[str] = Field(None, alias='designId')
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId')
    end_date: Optional[datetime] = Field(None, alias='endDate')
    final_status: Optional[str] = Field(None, alias='finalStatus')
    life_time_limit: Optional[int] = Field(None, alias='lifeTimeLimit')
    mesh_id: Optional[str] = Field(None, alias='meshId')
    project_id: Optional[str] = Field(None, alias='projectId')
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')
    solver: Optional[str] = None
    start_date: Optional[datetime] = Field(None, alias='startDate')
    user_id: Optional[str] = Field(None, alias='userId')


class Solver2(Enum):
    FLEX = 'FLEX'
    REFLEX = 'REFLEX'
    OPENFOAM = 'OPENFOAM'
    MOEBIUS = 'MOEBIUS'


class MeshCreateRequest(BaseModel):
    blob_id: str = Field(
        ...,
        alias='blobId',
        description='UUID',
        example='d66d33ee-72be-4f65-9bc1-de57697e90c6',
    )
    cell_gradation: Optional[str] = Field(None, alias='cellGradation')
    design_instance_id: str = Field(
        ...,
        alias='designInstanceId',
        description='UUID',
        example='5fb7ce2d-5be2-4e66-b452-76353ef57689',
    )
    docker_tag: Optional[str] = Field(
        None, alias='dockerTag', description='string', example='flexSolver'
    )
    docker_tag_id: Optional[str] = Field(
        None,
        alias='dockerTagId',
        description='UUID',
        example='5fb7ce2d-5be2-4e66-b452-76353ef57689',
    )
    interior_cell_size: Optional[str] = Field(None, alias='interiorCellSize')
    mesh_hash: Optional[str] = Field(
        None, alias='meshHash', description='string', example='meshHash'
    )
    python_hash: Optional[str] = Field(
        None, alias='pythonHash', description='string', example='pythonHash'
    )
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')
    solver: Optional[Solver2] = Field(None, example='flex')
    surface_course_cell_size: Optional[str] = Field(None, alias='surfaceCourseCellSize')
    surface_fine_cell_size: Optional[str] = Field(None, alias='surfaceFineCellSize')


class MeshIdRequest(BaseModel):
    mesh_id: Optional[str] = Field(
        None,
        alias='meshId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )


class Message(BaseModel):
    content: Optional[str] = None
    message_id: Optional[str] = Field(None, alias='messageId')
    object_id: Optional[str] = Field(None, alias='objectId')
    object_type: Optional[str] = Field(None, alias='objectType')
    subject: Optional[str] = None
    user_id: Optional[str] = Field(None, alias='userId')


class MessageTransaction(BaseModel):
    message_id: Optional[str] = Field(None, alias='messageId')
    message_transaction_id: Optional[str] = Field(None, alias='messageTransactionId')
    parent_transaction_id: Optional[str] = Field(None, alias='parentTransactionId')
    read_date: Optional[int] = Field(
        None, alias='readDate', description='1585700000000', example=1585700000000
    )
    sent_date: Optional[int] = Field(
        None, alias='sentDate', description='1585700000000', example=1585700000000
    )
    user_id: Optional[str] = Field(None, alias='userId')


class MonthlyUsage(BaseModel):
    month: Optional[int] = None
    overage_amount: Optional[float] = Field(None, alias='overageAmount')
    total_amount: Optional[float] = Field(None, alias='totalAmount')
    year: Optional[int] = None


class NodeReport(BaseModel):
    node_type: Optional[str] = Field(None, alias='nodeType')
    time_group_map: Optional[Dict[str, int]] = Field(None, alias='timeGroupMap')


class NotebookResponse(BaseModel):
    ch_cost_per_hour: Optional[float] = Field(None, alias='chCostPerHour')
    secret: Optional[str] = None
    url: Optional[str] = None


class NotebookStartRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None,
        alias='designInstanceId',
        description='UUID',
        example='fce88a01-c789-46e3-a1de-e6377921b405',
    )
    docker_tag_id: Optional[str] = Field(
        None,
        alias='dockerTagId',
        description='UUID',
        example='5fb7ce2d-5be2-4e66-b452-76353ef57689',
    )


class Notification(BaseModel):
    content: Optional[str] = None
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    end_date: Optional[int] = Field(
        None, alias='endDate', description='1585700000000', example=1585700000000
    )
    immediate_delivery: Optional[bool] = Field(None, alias='immediateDelivery')
    notification_id: Optional[str] = Field(
        None,
        alias='notificationId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    object_id: Optional[str] = Field(
        None,
        alias='objectId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    object_type: Optional[str] = Field(None, alias='objectType')
    start_date: Optional[datetime] = Field(None, alias='startDate')
    user_id: Optional[str] = Field(
        None,
        alias='userId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )


class NotificationAddRequest(BaseModel):
    content: Optional[str] = None
    end_date: Optional[datetime] = Field(None, alias='endDate')
    immediate_delivery: Optional[bool] = Field(None, alias='immediateDelivery')
    invited_user_ids: Optional[List[str]] = Field(None, alias='invitedUserIds')
    object_id: Optional[str] = Field(None, alias='objectId')
    object_type: Optional[str] = Field(None, alias='objectType')
    start_date: Optional[datetime] = Field(None, alias='startDate')


class NotificationAnnouncementRequest(BaseModel):
    exclude_acknowledged: Optional[bool] = Field(None, alias='excludeAcknowledged')


class NotificationBaseRequest(BaseModel):
    notification_id: Optional[str] = Field(None, alias='notificationId')


class NotificationEndRequest(BaseModel):
    end_date: Optional[datetime] = Field(None, alias='endDate')
    notification_id: Optional[str] = Field(None, alias='notificationId')


class NotificationObjectRequest(BaseModel):
    object_id: Optional[str] = Field(None, alias='objectId')
    object_type: Optional[str] = Field(None, alias='objectType')


class Number(BaseModel):
    pass


class ObjectIdRequest(BaseModel):
    object_id: Optional[str] = Field(
        None,
        alias='objectId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )


class ObjectMessageRequest(BaseModel):
    object_id: str = Field(
        ..., alias='objectId', example='02023dff-6896-41e0-9282-ec7836b8d659'
    )
    object_type: str = Field(..., alias='objectType', example='PROJECT')


class OfflineLicenseRequest(BaseModel):
    account_id: Optional[str] = Field(
        None, alias='accountId', example='0952e70b-277a-4cfb-a207-b5da0f07cd70'
    )
    core_hours: Optional[float] = Field(None, alias='coreHours', example=20.0)
    shared_secret: Optional[str] = Field(
        None, alias='sharedSecret', example='ABCDEFGHIJKLMNOP'
    )


class OfflineLicenseResponse(BaseModel):
    signed_license_key: Optional[str] = Field(None, alias='signedLicenseKey')


class OfflineTransaction(BaseModel):
    job_completed_timestamp: Optional[int] = Field(None, alias='jobCompletedTimestamp')
    milliseconds_consumed: Optional[int] = Field(None, alias='millisecondsConsumed')


class WvmType(Enum):
    WORKSPACE = 'WORKSPACE'
    VERSION = 'VERSION'
    MICROVERSION = 'MICROVERSION'


class OnshapeDocumentConfigurationRequest(BaseModel):
    document_id: Optional[str] = Field(
        None, alias='documentId', example='7f003708a7f1b1c00852b092'
    )
    element_id: Optional[str] = Field(
        None, alias='elementId', example='b53aee1db4541c279705da51'
    )
    wvm_id: str = Field(..., alias='wvmId', example='8ee44424160284d60b567093')
    wvm_type: WvmType = Field(..., alias='wvmType', example='Workspace')


class WvmType1(Enum):
    WORKSPACE = 'WORKSPACE'
    VERSION = 'VERSION'
    MICROVERSION = 'MICROVERSION'


class OnshapeDocumentElementRequest(BaseModel):
    document_id: Optional[str] = Field(
        None, alias='documentId', example='746fcfc10c99ee8344c64c68'
    )
    wvm_id: str = Field(..., alias='wvmId', example='ab639f01269d6962479d3140')
    wvm_type: WvmType1 = Field(..., alias='wvmType', example='Workspace')


class OnshapeDocumentRequest(BaseModel):
    document_id: Optional[str] = Field(
        None, alias='documentId', example='746fcfc10c99ee8344c64c68'
    )


class OnshapeDocumentSearchRequest(BaseModel):
    offset: Optional[float] = Field(None, example=0.0)
    query_string: Optional[str] = Field(
        None,
        alias='queryString',
        example='Nozzle type:document,part,partstudio,assembly',
    )


class OnshapeFolderListPageRequest(BaseModel):
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=20)
    tree_href: Optional[str] = Field(None, alias='treeHref')


class WvType(Enum):
    WORKSPACE = 'WORKSPACE'
    VERSION = 'VERSION'


class OnshapeImportAssemblyRequest(BaseModel):
    configuration: Optional[Dict[str, str]] = Field(
        None, example='{"List_TTolFmILSxvGUv": "short"}'
    )
    design_id: Optional[str] = Field(
        None, alias='designId', example='d3029018-abe7-47a6-a301-30379089fbff'
    )
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId')
    document_id: Optional[str] = Field(
        None, alias='documentId', example='7f003708a7f1b1c00852b092'
    )
    element_id: Optional[str] = Field(
        None, alias='elementId', example='a2df1367f931a5cd2d2093fa'
    )
    preferred_file_name: Optional[str] = Field(None, alias='preferredFileName')
    wv_id: Optional[str] = Field(None, alias='wvId', example='8ee44424160284d60b567093')
    wv_type: Optional[WvType] = Field(None, alias='wvType', example='Workspace')


class WvType1(Enum):
    WORKSPACE = 'WORKSPACE'
    VERSION = 'VERSION'


class OnshapeImportPartRequest(BaseModel):
    configuration: Optional[Dict[str, str]] = Field(
        None, example='{"List_XI4Eh9Q2rsMyrB": "variable", "beam_length": "1.0"}'
    )
    design_id: Optional[str] = Field(
        None, alias='designId', example='d3029018-abe7-47a6-a301-30379089fbff'
    )
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId')
    document_id: Optional[str] = Field(
        None, alias='documentId', example='7f003708a7f1b1c00852b092'
    )
    element_id: Optional[str] = Field(
        None, alias='elementId', example='b53aee1db4541c279705da51'
    )
    part_id: Optional[str] = Field(None, alias='partId', example='JHD')
    preferred_file_name: Optional[str] = Field(None, alias='preferredFileName')
    wv_id: Optional[str] = Field(None, alias='wvId', example='8ee44424160284d60b567093')
    wv_type: Optional[WvType1] = Field(None, alias='wvType', example='Workspace')


class OnshapePurchaseAssignRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    onshape_subscription_id: Optional[str] = Field(None, alias='onshapeSubscriptionId')


class OnshapeWebhookModelChangeRequest(BaseModel):
    data: Optional[str] = None
    document_id: Optional[str] = Field(None, alias='documentId')
    element_id: Optional[str] = Field(None, alias='elementId')
    event: Optional[str] = None
    message_id: Optional[str] = Field(None, alias='messageId')
    timestamp: Optional[datetime] = None
    version_id: Optional[str] = Field(None, alias='versionId')
    webhook_id: Optional[str] = Field(None, alias='webhookId')
    workspace_id: Optional[str] = Field(None, alias='workspaceId')


class ParaviewResponse(BaseModel):
    cost_per_hour: Optional[float] = Field(None, alias='costPerHour')
    path: Optional[str] = None
    port: Optional[str] = None
    private_key: Optional[str] = Field(None, alias='privateKey')


class PartsGetPartsResponsePartsAppearanceColor(BaseModel):
    blue: Optional[Number] = None
    green: Optional[Number] = None
    red: Optional[Number] = None


class PartsGetPartsResponsePartsMaterialProperties(BaseModel):
    description: Optional[str] = None
    name: Optional[str] = None
    units: Optional[str] = None
    value: Optional[Number] = None


class Status(Enum):
    NOTFOUND = 'NOTFOUND'
    PAUSED = 'PAUSED'
    NOTPAUSED = 'NOTPAUSED'


class PauseSimulationResponse(BaseModel):
    job_id: Optional[str] = Field(None, alias='jobId')
    last_simulation_status: Optional[str] = Field(None, alias='lastSimulationStatus')
    simulation_id: Optional[str] = Field(None, alias='simulationId')
    status: Optional[Status] = None


class PostProcessorResponse(BaseModel):
    ch_cost_per_hour: Optional[float] = Field(None, alias='chCostPerHour')
    secret: Optional[str] = None
    url: Optional[str] = None


class ProjectAccess(BaseModel):
    access_type: Optional[str] = Field(None, alias='accessType')
    archived: Optional[bool] = None
    archived_designs: Optional[List[str]] = Field(None, alias='archivedDesigns')
    archived_instances: Optional[List[str]] = Field(None, alias='archivedInstances')
    group_id: Optional[str] = Field(None, alias='groupId')
    last_action: Optional[str] = Field(None, alias='lastAction')
    last_update: Optional[datetime] = Field(None, alias='lastUpdate')
    project_access_id: Optional[str] = Field(
        None,
        alias='projectAccessId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    project_id: Optional[str] = Field(
        None,
        alias='projectId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    user_id: Optional[str] = Field(None, alias='userId')


class AccessType(Enum):
    """ __code__owner_ = '{@code "owner"' """
    """ _write_ = '"write"' """
    """ _read__ = '"read"}' """


class ProjectAddGroupRequest(BaseModel):
    access_type: Optional[AccessType] = Field(
        None, alias='accessType', description='String', example='write'
    )
    group_id: Optional[str] = Field(
        None,
        alias='groupId',
        description='UUID',
        example='21441968-019c-4ae7-a76b-c3059eac0bd0',
    )
    project_id: Optional[str] = Field(
        None,
        alias='projectId',
        description='UUID',
        example='ff7bb91d-12dd-465a-b305-e2e7c3200e84',
    )


class AccessType1(Enum):
    """ __code__owner_ = '{@code "owner"' """
    """ _write_ = '"write"' """
    """ _read__ = '"read"}' """


class ProjectAddUserRequest(BaseModel):
    access_type: Optional[AccessType1] = Field(
        None, alias='accessType', description='String', example='write'
    )
    project_id: Optional[str] = Field(
        None,
        alias='projectId',
        description='UUID',
        example='ff7bb91d-12dd-465a-b305-e2e7c3200e84',
    )
    user_id: Optional[str] = Field(
        None,
        alias='userId',
        description='UUID',
        example='21441968-019c-4ae7-a76b-c3059eac0bd0',
    )


class ProjectBlobRequest(BaseModel):
    blob_id: Optional[str] = Field(None, alias='blobId')
    project_id: Optional[str] = Field(None, alias='projectId')


class ProjectCalendarReport(BaseModel):
    calendar_usages: Optional[List[CalendarUsage]] = Field(None, alias='calendarUsages')
    end_calendar: Optional[datetime] = Field(None, alias='endCalendar')
    group_by: Optional[str] = Field(None, alias='groupBy')
    project_id: Optional[str] = Field(None, alias='projectId')
    start_calendar: Optional[datetime] = Field(None, alias='startCalendar')


class ProjectCoreHourLimitRequest(BaseModel):
    core_hour_limit: Optional[float] = Field(
        None, alias='coreHourLimit', description='Float', example=50.0
    )
    project_id: Optional[str] = Field(
        None,
        alias='projectId',
        description='UUID',
        example='ff7bb91d-12dd-465a-b305-e2e7c3200e84',
    )


class ProjectCreateRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    core_hour_limit: Optional[float] = Field(
        None, alias='coreHourLimit', description='Float', example=50.0
    )
    hpc_id: Optional[str] = Field(
        None,
        alias='hpcId',
        description='UUID',
        example='0f778276-7f91-4b03-99a1-4a88e4002dca',
    )
    project_goal: Optional[str] = Field(
        None, alias='projectGoal', description='String', example='Project Goals'
    )
    project_title: Optional[str] = Field(
        None, alias='projectTitle', description='String', example='Project #1'
    )


class ProjectDeleteRequest(BaseModel):
    hash: Optional[str] = Field(None, example='hash_key_to_confirm_deletion')
    project_id: Optional[str] = Field(
        None,
        alias='projectId',
        description='UUID',
        example='ff7bb91d-12dd-465a-b305-e2e7c3200e84',
    )


class ProjectDeleteResponse(BaseModel):
    hash: Optional[str] = Field(None, example='hash_key_to_confirm_deletion')
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project_to_be_deleted'
    )
    summary: Optional[Dict[str, Dict[str, Any]]] = None


class ProjectListRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    include_usage: Optional[bool] = Field(None, alias='includeUsage', example=False)
    include_user_ids: Optional[bool] = Field(
        None, alias='includeUserIds', example=False
    )


class ProjectRemoveGroupRequest(BaseModel):
    group_id: Optional[str] = Field(
        None,
        alias='groupId',
        description='UUID',
        example='21441968-019c-4ae7-a76b-c3059eac0bd0',
    )
    project_id: Optional[str] = Field(
        None,
        alias='projectId',
        description='UUID',
        example='ff7bb91d-12dd-465a-b305-e2e7c3200e84',
    )


class ProjectRemoveUserRequest(BaseModel):
    project_id: Optional[str] = Field(
        None,
        alias='projectId',
        description='UUID',
        example='ff7bb91d-12dd-465a-b305-e2e7c3200e84',
    )
    user_id: Optional[str] = Field(
        None,
        alias='userId',
        description='UUID',
        example='21441968-019c-4ae7-a76b-c3059eac0bd0',
    )

class ProjectRequest(BaseModel):
    project_id: Optional[str] = Field(
        None,
        alias='projectId',
        description='UUID',
        example='ff7bb91d-12dd-465a-b305-e2e7c3200e84',
    )


class ProjectUpdateGoalRequest(BaseModel):
    project_goal: Optional[str] = Field(
        None, alias='projectGoal', description='String', example='Project Goals'
    )
    project_id: Optional[str] = Field(
        None,
        alias='projectId',
        description='UUID',
        example='ff7bb91d-12dd-465a-b305-e2e7c3200e84',
    )


class ProjectUpdateRequest(BaseModel):
    project_goal: Optional[str] = Field(
        None, alias='projectGoal', description='String', example='Project Goals'
    )
    project_id: Optional[str] = Field(
        None,
        alias='projectId',
        description='UUID',
        example='ff7bb91d-12dd-465a-b305-e2e7c3200e84',
    )
    project_title: Optional[str] = Field(
        None, alias='projectTitle', description='String', example='Project #1'
    )


class ProjectUpdateTitleRequest(BaseModel):
    project_id: Optional[str] = Field(
        None,
        alias='projectId',
        description='UUID',
        example='ff7bb91d-12dd-465a-b305-e2e7c3200e84',
    )
    project_title: Optional[str] = Field(
        None, alias='projectTitle', description='String', example='Project #1'
    )


class PythonInterpreterRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId')
    hpc_id: Optional[str] = Field(
        None,
        alias='hpcId',
        description='UUID',
        example='0f778276-7f91-4b03-99a1-4a88e4002dca',
    )


class PythonInterpreterResponse(BaseModel):
    ch_cost_per_hour: Optional[float] = Field(None, alias='chCostPerHour')
    secret: Optional[str] = None
    url: Optional[str] = None


class ReadMessageRequest(BaseModel):
    message_id: Optional[str] = Field(
        None, alias='messageId', example='8d364017-dd5e-49dd-9e50-4b4392300265'
    )


class RefreshTokenRequest(BaseModel):
    refresh_token: Optional[str] = Field(
        None, alias='refreshToken', example='refreshTokenFromCognito'
    )


class ReleaseNote(BaseModel):
    create_date: Optional[datetime] = Field(None, alias='createDate')
    notes: Optional[str] = Field(None, description='string', example='release notes')
    release_note_id: Optional[str] = Field(
        None,
        alias='releaseNoteId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    version: Optional[str] = None


class ReleaseNoteAddRequest(BaseModel):
    notes: Optional[str] = Field(
        None, description='str', example='release notes for this release.'
    )
    version: Optional[str] = Field(None, description='str', example='1.0.0')


class ReleaseNoteRequest(BaseModel):
    release_note_id: Optional[str] = Field(
        None,
        alias='releaseNoteId',
        description='UUID',
        example='21441968-019c-4ae7-a76b-c3059eac0bd0',
    )


class Operation1(Enum):
    SIMULATION = 'SIMULATION'
    EMSIMULATION = 'EMSIMULATION'
    MPI = 'MPI'
    EMMPI = 'EMMPI'
    MNMPI = 'MNMPI'
    EMMNMPI = 'EMMNMPI'
    MOEBIUS_MPI = 'MOEBIUS_MPI'
    MOEBIUS_MNMPI = 'MOEBIUS_MNMPI'
    OPENFOAM = 'OPENFOAM'
    OPENFOAM_MNMPI = 'OPENFOAM_MNMPI'
    REFLEX_MPI = 'REFLEX_MPI'
    REFLEX_MNMPI = 'REFLEX_MNMPI'
    ESTIMATE = 'ESTIMATE'
    REVIEW = 'REVIEW'
    BUILD = 'BUILD'


class Precision5(Enum):
    SINGLE = 'SINGLE'
    DOUBLE = 'DOUBLE'


class Preprocessor1(Enum):
    NONE = 'NONE'
    MODELWRITER = 'MODELWRITER'


class SendCoreHourRequest(BaseModel):
    core_hour_amount: Optional[float] = Field(
        None, alias='coreHourAmount', description='Float', example=20.0
    )
    from_account_id: Optional[str] = Field(
        None,
        alias='fromAccountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    to_account_id: Optional[str] = Field(
        None,
        alias='toAccountId',
        description='UUID',
        example='0989e70b-277a-4cfb-a207-b5da0f07cd70',
    )


class SendMessageRequest(BaseModel):
    content: Optional[str] = Field(None, example='Message Content')
    object_id: Optional[str] = Field(
        None, alias='objectId', example='02023dff-6896-41e0-9282-ec7836b8d659'
    )
    object_type: Optional[str] = Field(None, alias='objectType', example='PROJECT')
    subject: Optional[str] = Field(None, example='Message Subject')
    user_ids: Optional[List[str]] = Field(None, alias='userIds')


class SimulationListPageRequest(BaseModel):
    descending_sort: Optional[bool] = Field(None, alias='descendingSort', example=False)
    filter_by_status: Optional[str] = Field(
        None, alias='filterByStatus', example='COMPLETED'
    )
    filters: Optional[List[Filter]] = None
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=20)
    sort_by: Optional[str] = Field(None, alias='sortBy', example='p_wid')


class SimulationProgress(BaseModel):
    progress: Optional[int] = None
    simulation_id: Optional[str] = Field(None, alias='simulationId')


class SimulationRequest(BaseModel):
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )
    simulation_id: Optional[str] = Field(
        None,
        alias='simulationId',
        description='UUID',
        example='896985ff-23fd-4636-9c18-098a26e51d53',
    )


class SimulationRestartRequest(BaseModel):
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='2ad07ef4-7ac2-4618-8e0b-9b6788538ddf',
    )
    new_ram_estimate: Optional[int] = Field(
        None,
        alias='newRamEstimate',
        description='updated ram estimate in MBs',
        example=1000,
    )
    restart_file: Optional[str] = Field(
        None,
        alias='restartFile',
        description='file used to seed simulation',
        example='restart_data.bin',
    )
    simulation_id: Optional[str] = Field(
        None,
        alias='simulationId',
        description='UUID',
        example='160b96ec-7a8c-4a1b-a19f-0e10b01d5db8',
    )
    time_to_end: Optional[str] = Field(
        None,
        alias='timeToEnd',
        description='seconds as scientific notation',
        example='1e-3',
    )


class SimulationStatus1(Enum):
    RUNNING = 'RUNNING'
    QUEUED = 'QUEUED'
    DELAYED = 'DELAYED'
    RESTARTED = 'RESTARTED'
    FAILED = 'FAILED'
    PAUSED = 'PAUSED'
    CANCELLED = 'CANCELLED'
    COMPLETED = 'COMPLETED'


class SimulationStatus(BaseModel):
    job_id: Optional[str] = Field(None, alias='jobId')
    simulation_id: Optional[str] = Field(None, alias='simulationId')
    simulation_status: Optional[SimulationStatus1] = Field(
        None, alias='simulationStatus'
    )
    simulation_status_comment: Optional[str] = Field(
        None, alias='simulationStatusComment'
    )
    simulation_status_date: Optional[int] = Field(None, alias='simulationStatusDate')


class SimulationStatusReportRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    end_date: Optional[datetime] = Field(None, alias='endDate', example='2019-05-31')
    start_date: Optional[datetime] = Field(
        None, alias='startDate', example='2018-06-01'
    )
    status_number_only: Optional[bool] = Field(
        None, alias='statusNumberOnly', example=False
    )
    user_id: Optional[str] = Field(None, alias='userId')


class SimulationStatusReportResponse(BaseModel):
    request: Optional[SimulationStatusReportRequest] = None
    simulation_status_map: Optional[Dict[str, str]] = Field(
        None, alias='simulationStatusMap'
    )
    status_simulation_number: Optional[Dict[str, int]] = Field(
        None, alias='statusSimulationNumber'
    )


class SimulationsRunningResponse(BaseModel):
    queued_simulations: Optional[int] = Field(None, alias='queuedSimulations')
    running_simulations: Optional[int] = Field(None, alias='runningSimulations')


class Status1(Enum):
    NOTFOUND = 'NOTFOUND'
    STOPPED = 'STOPPED'


class StopSimulationResponse(BaseModel):
    job_id: Optional[str] = Field(None, alias='jobId')
    simulation_id: Optional[str] = Field(None, alias='simulationId')
    status: Optional[Status1] = None


class StringListResponse(BaseModel):
    string_list: Optional[List[str]] = Field(None, alias='stringList')


class SubscriptionUpdateOverageRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    overage: Optional[bool] = Field(None, example=False)


class SubscriptionUpdateRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='57d38c55-657e-4c51-8f8f-1fb9dde53557',
    )
    account_name: Optional[str] = Field(
        None, alias='accountName', example='OnScale Test Account'
    )
    ccv: Optional[str] = Field(None, example='123')
    credit_card: Optional[str] = Field(
        None, alias='creditCard', example='4111-1111-1111-1111'
    )
    expire_month: Optional[str] = Field(None, alias='expireMonth', example='01')
    expire_year: Optional[str] = Field(None, alias='expireYear', example='2020')
    overage: Optional[bool] = Field(None, example=False)
    subscription_type: Optional[str] = Field(
        None, alias='subscriptionType', example='on-free'
    )
    token_id: Optional[str] = Field(None, alias='tokenId', example='TOKEN_ID')


class Operation2(Enum):
    AGGREGATEDATA = 'AGGREGATEDATA'


class Supervisor(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    core_hour_budget: Optional[float] = Field(None, alias='coreHourBudget')
    create_date: Optional[int] = Field(None, alias='createDate')
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId')
    file_aliases: Optional[List[str]] = Field(None, alias='fileAliases')
    file_dependencies: Optional[List[str]] = Field(None, alias='fileDependencies')
    hpc_id: Optional[str] = Field(None, alias='hpcId')
    included_supervisor_ids: Optional[List[str]] = Field(
        None, alias='includedSupervisorIds'
    )
    operation: Operation2 = Field(..., example='aggregatedata')
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')
    supervisor_id: Optional[str] = Field(None, alias='supervisorId')
    user_id: Optional[str] = Field(None, alias='userId')


class SupervisorCreateRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    core_hour_budget: Optional[float] = Field(
        None, alias='coreHourBudget', description='Float', example=50.0
    )
    design_instance_id: Optional[str] = Field(
        None,
        alias='designInstanceId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )
    file_aliases: Optional[List[str]] = Field(None, alias='fileAliases')
    file_dependencies: Optional[List[str]] = Field(None, alias='fileDependencies')
    hpc_id: Optional[str] = Field(
        None,
        alias='hpcId',
        description='UUID',
        example='0f778276-7f91-4b03-99a1-4a88e4002dca',
    )
    included_supervisor_ids: Optional[List[str]] = Field(
        None, alias='includedSupervisorIds'
    )
    operation: Optional[str] = None
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')


class SupervisorFileListRequest(BaseModel):
    directory: Optional[str] = None
    file_name: Optional[str] = Field(None, alias='fileName')
    include_sub_directory: Optional[bool] = Field(None, alias='includeSubDirectory')
    supervisor_id: Optional[str] = Field(
        None, alias='supervisorId', example='5b693303-60c9-441f-b816-08eb47ae75cf'
    )


class SupervisorFilePath(BaseModel):
    directory: Optional[str] = None
    file_name: str = Field(
        ..., alias='fileName', description='UUID', example='disk.flxinp'
    )
    path: Optional[str] = None
    supervisor_id: Optional[str] = Field(None, alias='supervisorId')


class SupervisorFileRequest(BaseModel):
    directory: Optional[str] = None
    file_name: Optional[str] = Field(None, alias='fileName')
    supervisor_id: Optional[str] = Field(
        None, alias='supervisorId', example='5b693303-60c9-441f-b816-08eb47ae75cf'
    )


class SupervisorLaunchRequest(BaseModel):
    blob_id: Optional[str] = Field(
        None,
        alias='blobId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )
    docker_tag_id: Optional[str] = Field(
        None,
        alias='dockerTagId',
        description='UUID',
        example='5fb7ce2d-5be2-4e66-b452-76353ef57689',
    )
    supervisor_id: Optional[str] = Field(
        None,
        alias='supervisorId',
        description='UUID',
        example='d6ef1b5c-417c-4ed3-bae0-5d2944f02e9f',
    )


class SupportFindUserRequest(BaseModel):
    email_address: Optional[str] = Field(None, alias='emailAddress')
    project_id: Optional[str] = Field(
        None,
        alias='projectId',
        description='UUID',
        example='ff7bb91d-12dd-465a-b305-e2e7c3200e84',
    )


class Tag(BaseModel):
    item_id: Optional[str] = Field(
        None,
        alias='itemId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )
    tag: Optional[str] = Field(None, description='any string')
    type: Optional[str] = Field(None, description='any string')


class TagRequest(BaseModel):
    item_id: Optional[str] = Field(
        None,
        alias='itemId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )
    tag: Optional[str] = Field(None, description='any string')
    type: Optional[str] = Field(None, description='any string')


class TagSearch(BaseModel):
    tag: Optional[str] = Field(None, description='any string')
    type: Optional[str] = Field(None, description='any string')


class TagSearchRequest(BaseModel):
    tags: Optional[List[TagSearch]] = None


class TagType(BaseModel):
    tag: Optional[str] = None
    type: Optional[str] = None


class TagTypeJobCost(BaseModel):
    job_cost: Optional[float] = Field(None, alias='jobCost')
    tag_type: Optional[TagType] = Field(None, alias='tagType')


class TemporaryCredential(BaseModel):
    key: Optional[str] = None
    secret: Optional[str] = None
    session_id: Optional[str] = Field(None, alias='sessionId')


class TimeGroup(BaseModel):
    group_id: Optional[str] = Field(None, alias='groupId')
    max_time: Optional[int] = Field(None, alias='maxTime')
    min_time: Optional[int] = Field(None, alias='minTime')


class TimeGroupReportRequest(BaseModel):
    end_day: Optional[int] = Field(
        None, alias='endDay', description='endDay', example=1
    )
    end_month: Optional[int] = Field(
        None, alias='endMonth', description='endMonth', example=0
    )
    end_year: Optional[int] = Field(
        None, alias='endYear', description='endYear', example=2019
    )
    start_day: Optional[int] = Field(
        None, alias='startDay', description='startDay', example=1
    )
    start_month: Optional[int] = Field(
        None, alias='startMonth', description='startMonth', example=0
    )
    start_year: Optional[int] = Field(
        None, alias='startYear', description='startYear', example=2018
    )
    time_groups: Optional[List[TimeGroup]] = Field(None, alias='timeGroups')


class TransactionReportRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    descending_sort: Optional[bool] = Field(None, alias='descendingSort', example=True)
    end_date: Optional[datetime] = Field(None, alias='endDate', example='2020-01-01')
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=10)
    start_date: Optional[datetime] = Field(
        None, alias='startDate', example='2019-01-01'
    )
    transaction_state: Optional[str] = Field(
        None, alias='transactionState', example='successful'
    )
    transaction_type: Optional[str] = Field(
        None, alias='transactionType', example='purchase'
    )


class TransactionReportResponse(BaseModel):
    page_count: Optional[int] = Field(None, alias='pageCount')
    page_number: Optional[int] = Field(None, alias='pageNumber')
    page_size: Optional[int] = Field(None, alias='pageSize')
    transaction_count: Optional[int] = Field(None, alias='transactionCount')
    transactions: Optional[List[AccountTransaction]] = None


class TreeItemOwner(BaseModel):
    accept_ownership_transfer: Optional[bool] = Field(
        None, alias='acceptOwnershipTransfer'
    )
    href: Optional[str] = None
    id: Optional[str] = None
    image: Optional[str] = None
    is_enterprise_owned_resource: Optional[bool] = Field(
        None, alias='isEnterpriseOwnedResource'
    )
    name: Optional[str] = None
    state: Optional[int] = None
    type: Optional[int] = None


class GroupBy(Enum):
    YEARLY = 'YEARLY'
    QUARTERLY = 'QUARTERLY'
    MONTHLY = 'MONTHLY'
    WEEKLY = 'WEEKLY'
    DAILY = 'DAILY'


class UsageReportRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    end_date: datetime = Field(..., alias='endDate', example='2019-05-31')
    group_by: GroupBy = Field(..., alias='groupBy', example='MONTHLY')
    start_date: datetime = Field(..., alias='startDate', example='2018-06-01')


class User(BaseModel):
    cognito_email: Optional[str] = Field(None, alias='cognitoEmail')
    company_name: Optional[str] = Field(None, alias='companyName')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    default_plan_code: Optional[str] = Field(None, alias='defaultPlanCode')
    department: Optional[str] = None
    first_name: Optional[str] = Field(None, alias='firstName')
    has_mfa: Optional[bool] = Field(None, alias='hasMFA')
    last_job_time: Optional[int] = Field(
        None, alias='lastJobTime', description='1585700000000', example=1585700000000
    )
    last_name: Optional[str] = Field(None, alias='lastName')
    phone_number: Optional[str] = Field(None, alias='phoneNumber')
    registration_type: Optional[str] = Field(None, alias='registrationType')
    send_completion_email: Optional[bool] = Field(None, alias='sendCompletionEmail')
    title: Optional[str] = None
    user_id: Optional[str] = Field(None, alias='userId')


class UserCoreHourBalance(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    account_name: Optional[str] = Field(None, alias='accountName')
    denominator: Optional[float] = None
    numerator: Optional[float] = None


class UserEvent(BaseModel):
    event_date: Optional[int] = Field(None, alias='eventDate')
    event_id: Optional[str] = Field(
        None,
        alias='eventId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    event_source: Optional[str] = Field(None, alias='eventSource')
    event_type: Optional[str] = Field(None, alias='eventType')
    event_value: Optional[str] = Field(None, alias='eventValue')
    user_id: Optional[str] = Field(None, alias='userId')


class EventSource(Enum):
    ONSCALELAB = 'ONSCALELAB'
    ONSCALEPORTAL = 'ONSCALEPORTAL'
    ONSCALEWEB = 'ONSCALEWEB'
    ONSCALESOLVE = 'ONSCALESOLVE'


class UserEventRequest(BaseModel):
    event_source: Optional[EventSource] = Field(
        None, alias='eventSource', description='String', example='ONSCALELAB'
    )
    event_type: Optional[str] = Field(
        None, alias='eventType', description='String', example='Init Job'
    )
    event_value: Optional[str] = Field(None, alias='eventValue')


class UserIdGroupId(BaseModel):
    group_id: Optional[str] = Field(
        None,
        alias='groupId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    user_id: Optional[str] = Field(
        None,
        alias='userId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )


class UserModifyRequest(BaseModel):
    company_name: str = Field(..., alias='companyName', example='Albuquerque Academy')
    department: Optional[str] = None
    first_name: str = Field(..., alias='firstName', example='Nancy')
    last_name: str = Field(..., alias='lastName', example='Smith')
    phone_number: Optional[str] = Field(
        None, alias='phoneNumber', example='+14046474769'
    )
    send_completion_email: Optional[bool] = Field(
        None, alias='sendCompletionEmail', example=False
    )
    title: Optional[str] = None


class UserUsageReportRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    user_id: Optional[str] = Field(None, alias='userId')


class Account(BaseModel):
    account_created: Optional[int] = Field(
        None, alias='accountCreated', description='1585700000000', example=1585700000000
    )
    account_details: Optional[AccountDetails] = Field(None, alias='accountDetails')
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    account_name: Optional[str] = Field(
        None, alias='accountName', example='OnScale Test Account'
    )
    allow_support_logging: Optional[bool] = Field(None, alias='allowSupportLogging')
    beam_tool: Optional[bool] = Field(None, alias='beamTool', example=False)
    billing_enabled: Optional[bool] = Field(None, alias='billingEnabled', example=False)
    credit_limit: Optional[float] = Field(None, alias='creditLimit')
    current_period_ends_at: Optional[datetime] = Field(
        None, alias='currentPeriodEndsAt'
    )
    default_max_sim_core_hour: Optional[float] = Field(
        None, alias='defaultMaxSimCoreHour'
    )
    default_project_core_hour: Optional[float] = Field(
        None, alias='defaultProjectCoreHour'
    )
    email_address: Optional[str] = Field(None, alias='emailAddress')
    enterprise: Optional[bool] = Field(None, example=False)
    expiration_date: Optional[int] = Field(
        None, alias='expirationDate', description='1585700000000', example=1585700000000
    )
    last_job_time: Optional[int] = Field(
        None, alias='lastJobTime', description='1585700000000', example=1585700000000
    )
    lead_core_allowed: Optional[int] = Field(None, alias='leadCoreAllowed')
    max_simultaneous_simulations: Optional[int] = Field(
        None, alias='maxSimultaneousSimulations'
    )
    offline_rebate_rate: Optional[float] = Field(None, alias='offlineRebateRate')
    onscale_cli: Optional[bool] = Field(None, alias='onscaleCli', example=False)
    onscale_lab: Optional[bool] = Field(None, alias='onscaleLab', example=False)
    onscale_python: Optional[bool] = Field(None, alias='onscalePython', example=False)
    onscale_solve: Optional[bool] = Field(None, alias='onscaleSolve', example=False)
    onshape_subscription_id: Optional[str] = Field(None, alias='onshapeSubscriptionId')
    onshape_user_id: Optional[str] = Field(None, alias='onshapeUserId')
    overage: Optional[bool] = Field(None, example=False)
    parent_account_id: Optional[str] = Field(None, alias='parentAccountId')
    plan_code: Optional[str] = Field(None, alias='planCode', example='on-free')
    subscription_size: Optional[int] = Field(None, alias='subscriptionSize')
    subscription_term_months: Optional[int] = Field(
        None, alias='subscriptionTermMonths'
    )
    user_core_allowed: Optional[int] = Field(None, alias='userCoreAllowed')


class AccountAllocationResponse(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    allocation_available: Optional[float] = Field(None, alias='allocationAvailable')
    core_hours_available: Optional[float] = Field(None, alias='coreHoursAvailable')
    email_address: Optional[str] = Field(None, alias='emailAddress')
    recent_transactions: Optional[List[AccountLedger]] = Field(
        None, alias='recentTransactions'
    )


class AccountBalance(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    allocation_available: Optional[float] = Field(None, alias='allocationAvailable')
    core_hours_available: Optional[float] = Field(None, alias='coreHoursAvailable')
    recent_transactions: Optional[List[AccountLedger]] = Field(
        None, alias='recentTransactions'
    )


class AccountCalendarReport(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    calendar_usages: Optional[List[CalendarUsage]] = Field(None, alias='calendarUsages')
    end_calendar: Optional[datetime] = Field(None, alias='endCalendar')
    group_by: Optional[str] = Field(None, alias='groupBy')
    start_calendar: Optional[datetime] = Field(None, alias='startCalendar')


class AccountListResponse(BaseModel):
    account: Optional[Account] = None
    account_access: Optional[AccountAccess] = Field(None, alias='accountAccess')


class AccountReport(BaseModel):
    account: Optional[Account] = None
    core_hours_consumed: Optional[float] = Field(None, alias='coreHoursConsumed')


class AccountUsageReport(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    monthly_usages: Optional[List[MonthlyUsage]] = Field(None, alias='monthlyUsages')


class AccountsGetPurchasesResponseItemsCard(BaseModel):
    exp_month: Optional[Number] = Field(None, alias='expMonth')
    exp_year: Optional[Number] = Field(None, alias='expYear')
    last4: Optional[str] = None
    type: Optional[str] = None


class AdminLiveJobsResponse(BaseModel):
    job_data: Optional[Dict[str, List[SimulationProgress]]] = Field(
        None, alias='jobData'
    )


class ConfigurationListReponse(BaseModel):
    default_value: Optional[float] = Field(None, alias='defaultValue')
    id: Optional[str] = None
    max_value: Optional[float] = Field(None, alias='maxValue')
    min_value: Optional[float] = Field(None, alias='minValue')
    name: Optional[str] = None
    options: Optional[List[EnumOption]] = None
    quantity: Optional[str] = None
    units: Optional[str] = None


class CouponMaster(BaseModel):
    core_hour_amount: Optional[float] = Field(None, alias='coreHourAmount')
    coupon_code: Optional[str] = Field(None, alias='couponCode')
    coupon_description: Optional[str] = Field(None, alias='couponDescription')
    coupon_master_id: Optional[str] = Field(None, alias='couponMasterId')
    coupon_name: Optional[str] = Field(None, alias='couponName')
    coupon_type: Optional[str] = Field(None, alias='couponType')
    create_date: Optional[datetime] = Field(None, alias='createDate')
    create_user_id: Optional[str] = Field(None, alias='createUserId')
    expired: Optional[bool] = None
    expired_date: Optional[datetime] = Field(None, alias='expiredDate')
    locked_days: Optional[int] = Field(None, alias='lockedDays')
    max_redeemable_times: Optional[int] = Field(None, alias='maxRedeemableTimes')
    percentage: Optional[float] = None
    redeemable_list: Optional[List[CouponRedeemable]] = Field(
        None, alias='redeemableList'
    )
    start_date: Optional[datetime] = Field(None, alias='startDate')
    var_account_id: Optional[str] = Field(None, alias='var_accountId')


class Design(BaseModel):
    archived: Optional[bool] = None
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    design_description: Optional[str] = Field(None, alias='designDescription')
    design_goal: Optional[str] = Field(None, alias='designGoal')
    design_id: Optional[str] = Field(
        None,
        alias='designId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    design_instance_list: Optional[List[DesignInstance]] = Field(
        None, alias='designInstanceList'
    )
    design_title: Optional[str] = Field(None, alias='designTitle')
    physics: Optional[Physics] = Field(None, example='MECHANICAL')
    project_id: Optional[str] = Field(None, alias='projectId')
    user_id: Optional[str] = Field(None, alias='userId')


class DocumentsGetDocumentsResponseItemsOwner(BaseModel):
    href: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    type: Optional[Number] = None


class DocumentsGetDocumentsResponseItemsThumbnail(BaseModel):
    href: Optional[str] = None
    id: Optional[str] = None
    sizes: Optional[List[DocumentsGetDocumentsResponseItemsThumbnailSizes]] = None


class DocumentsGetElementListResponseElementsThumbnailInfo(BaseModel):
    sizes: Optional[
        List[DocumentsGetElementListResponseElementsThumbnailInfoSizes]
    ] = None


class Group(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    group_id: Optional[str] = Field(
        None,
        alias='groupId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    group_name: Optional[str] = Field(None, alias='groupName')
    user_id_group_id_list: Optional[List[UserIdGroupId]] = Field(
        None, alias='userIdGroupIdList'
    )


class HourlyBurnReport(BaseModel):
    hours: Optional[Dict[str, Dict[str, float]]] = None
    hpcs: Optional[Dict[str, Hpc]] = None


class JobProgress(BaseModel):
    job_id: Optional[str] = Field(None, alias='jobId')
    simulation_progress_list: Optional[List[SimulationProgress]] = Field(
        None, alias='simulationProgressList'
    )


class LinkedFile(BaseModel):
    file_path: Optional[List[FileAlias]] = Field(None, alias='filePath')
    job_id: Optional[str] = Field(None, alias='jobId')
    key: Optional[JobGetKeyResponse] = None
    s3key: Optional[str] = None
    s3secret: Optional[str] = None
    s3session: Optional[str] = None
    temporary_credential: Optional[TemporaryCredential] = Field(
        None, alias='temporaryCredential'
    )


class OfflineLicenseReturnRequest(BaseModel):
    confirmation_key: Optional[str] = Field(None, alias='confirmationKey')
    offline_transactions: Optional[List[OfflineTransaction]] = Field(
        None, alias='offlineTransactions'
    )
    transaction_id: Optional[str] = Field(None, alias='transactionId')


class PartsGetPartsResponsePartsAppearance(BaseModel):
    color: Optional[PartsGetPartsResponsePartsAppearanceColor] = None
    is_generated: Optional[bool] = Field(None, alias='isGenerated')
    opacity: Optional[Number] = None


class PartsGetPartsResponsePartsMaterial(BaseModel):
    id: Optional[str] = None
    library_name: Optional[str] = Field(None, alias='libraryName')
    properties: Optional[List[PartsGetPartsResponsePartsMaterialProperties]] = None


class Project(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    archived: Optional[bool] = None
    core_hour_limit: Optional[float] = Field(None, alias='coreHourLimit')
    core_hour_used: Optional[float] = Field(None, alias='coreHourUsed')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    design_list: Optional[List[Design]] = Field(None, alias='designList')
    hpc_id: Optional[str] = Field(None, alias='hpcId')
    last_update: Optional[int] = Field(
        None, alias='lastUpdate', description='1585700000000', example=1585700000000
    )
    last_update_by_me: Optional[int] = Field(
        None, alias='lastUpdateByMe', description='1585700000000', example=1585700000000
    )
    my_access_type: Optional[str] = Field(None, alias='myAccessType')
    project_goal: Optional[str] = Field(None, alias='projectGoal')
    project_id: Optional[str] = Field(None, alias='projectId')
    project_title: Optional[str] = Field(None, alias='projectTitle')
    user_id: Optional[str] = Field(None, alias='userId')
    user_id_list: Optional[List[str]] = Field(None, alias='userIdList')


class ReportBundle(BaseModel):
    account_index: Optional[Dict[str, Account]] = Field(None, alias='accountIndex')
    chart_reports: Optional[List[ChartReport]] = Field(None, alias='chartReports')
    histogram_reports: Optional[List[HistogramReport]] = Field(
        None, alias='histogramReports'
    )


class Simulation(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    console_parameter_map: Optional[Dict[str, Dict[str, Any]]] = Field(
        None, alias='consoleParameterMap'
    )
    console_parameters: Optional[str] = Field(
        None, alias='consoleParameters', example='var1=a, var2=b, var3=c'
    )
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    job_id: Optional[str] = Field(None, alias='jobId')
    last_status: Optional[str] = Field(None, alias='lastStatus')
    last_status_comment: Optional[str] = Field(None, alias='lastStatusComment')
    last_status_date: Optional[int] = Field(
        None, alias='lastStatusDate', description='1585700000000', example=1585700000000
    )
    parent_simulation_id: Optional[str] = Field(None, alias='parentSimulationId')
    percentage_completed: Optional[int] = Field(None, alias='percentageCompleted')
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')
    simulation_id: Optional[str] = Field(
        None,
        alias='simulationId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d5a',
    )
    simulation_index: Optional[int] = Field(None, alias='simulationIndex')
    simulation_status: Optional[List[SimulationStatus]] = Field(
        None, alias='simulationStatus'
    )
    user_id: Optional[str] = Field(None, alias='userId')


class SimulationListPageResponse(BaseModel):
    console_parameter_names: Optional[List[str]] = Field(
        None, alias='consoleParameterNames', unique_items=True
    )
    descendant_simulation_map: Optional[Dict[str, List[Simulation]]] = Field(
        None, alias='descendantSimulationMap'
    )
    page_count: Optional[int] = Field(None, alias='pageCount')
    request: Optional[SimulationListPageRequest] = None
    simulations: Optional[List[Simulation]] = None
    status_summary: Optional[Dict[str, int]] = Field(None, alias='statusSummary')


class StartTimeReport(BaseModel):
    end_calendar: Optional[datetime] = Field(None, alias='endCalendar')
    hpc_container_report: Optional[Dict[str, Dict[str, ContainerReport]]] = Field(
        None, alias='hpcContainerReport'
    )
    hpc_list: Optional[List[Hpc]] = Field(None, alias='hpcList')
    hpc_node_report: Optional[Dict[str, Dict[str, NodeReport]]] = Field(
        None, alias='hpcNodeReport'
    )
    hpc_report: Optional[Dict[str, HpcReport]] = Field(None, alias='hpcReport')
    start_calendar: Optional[datetime] = Field(None, alias='startCalendar')
    time_groups: Optional[List[TimeGroup]] = Field(None, alias='timeGroups')


class TagAccountSearchRequest(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    tags: Optional[List[TagSearch]] = None


class TreeItem(BaseModel):
    can_move: Optional[bool] = Field(None, alias='canMove')
    created_at: Optional[datetime] = Field(None, alias='createdAt')
    created_by: Optional[TreeItemOwner] = Field(None, alias='createdBy')
    description: Optional[str] = None
    has_pending_owner: Optional[bool] = Field(None, alias='hasPendingOwner')
    href: Optional[str] = None
    id: Optional[str] = None
    is_container: Optional[bool] = Field(None, alias='isContainer')
    is_enterprise_owned: Optional[bool] = Field(None, alias='isEnterpriseOwned')
    is_mutable: Optional[bool] = Field(None, alias='isMutable')
    modified_at: Optional[datetime] = Field(None, alias='modifiedAt')
    modified_by: Optional[TreeItemOwner] = Field(None, alias='modifiedBy')
    name: Optional[str] = None
    owner: Optional[TreeItemOwner] = None
    project_id: Optional[str] = Field(None, alias='projectId')
    resource_type: Optional[str] = Field(None, alias='resourceType')


class AccountsGetPurchasesResponseItems(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    amount_cents: Optional[Number] = Field(None, alias='amountCents')
    application_id: Optional[str] = Field(None, alias='applicationId')
    canceled_at: Optional[str] = Field(None, alias='canceledAt')
    card: Optional[AccountsGetPurchasesResponseItemsCard] = None
    consumed_ids: Optional[List[str]] = Field(None, alias='consumedIds')
    group: Optional[str] = None
    id: Optional[str] = None
    plan_id: Optional[str] = Field(None, alias='planId')
    plan_name: Optional[str] = Field(None, alias='planName')
    plan_type: Optional[Number] = Field(None, alias='planType')
    seats: Optional[Number] = None
    state: Optional[Number] = None
    subscription_end_at: Optional[str] = Field(None, alias='subscriptionEndAt')
    user_ids: Optional[List[str]] = Field(None, alias='userIds')


class DocumentsGetDocumentsResponseItems(BaseModel):
    active: Optional[bool] = None
    can_unshare: Optional[bool] = Field(None, alias='canUnshare')
    created_at: Optional[datetime] = Field(None, alias='createdAt')
    created_by: Optional[DocumentsGetDocumentsResponseItemsCreatedBy] = Field(
        None, alias='createdBy'
    )
    default_workspace: Optional[
        DocumentsGetDocumentsResponseItemsDefaultWorkspace
    ] = Field(None, alias='defaultWorkspace')
    href: Optional[str] = None
    id: Optional[str] = None
    modified_at: Optional[datetime] = Field(None, alias='modifiedAt')
    modified_by: Optional[DocumentsGetDocumentsResponseItemsModifiedBy] = Field(
        None, alias='modifiedBy'
    )
    name: Optional[str] = None
    owner: Optional[DocumentsGetDocumentsResponseItemsOwner] = None
    permission: Optional[str] = None
    public: Optional[bool] = None
    size_bytes: Optional[Number] = Field(None, alias='sizeBytes')
    starred: Optional[str] = None
    tags: Optional[List[str]] = None
    thumbnail: Optional[DocumentsGetDocumentsResponseItemsThumbnail] = None
    total_workspaces_scheduled_for_update: Optional[Number] = Field(
        None, alias='totalWorkspacesScheduledForUpdate'
    )
    total_workspaces_updating: Optional[Number] = Field(
        None, alias='totalWorkspacesUpdating'
    )
    trash: Optional[bool] = None
    trashed_at: Optional[datetime] = Field(None, alias='trashedAt')


class DocumentsGetElementListResponseElements(BaseModel):
    angle_units: Optional[str] = Field(None, alias='angleUnits')
    element_type: Optional[str] = Field(None, alias='elementType')
    id: Optional[str] = None
    length_units: Optional[str] = Field(None, alias='lengthUnits')
    mass_units: Optional[str] = Field(None, alias='massUnits')
    microversion_id: Optional[str] = Field(None, alias='microversionId')
    name: Optional[str] = None
    thumbnail_info: Optional[
        DocumentsGetElementListResponseElementsThumbnailInfo
    ] = Field(None, alias='thumbnailInfo')
    thumbnails: Optional[Dict[str, Dict[str, Any]]] = None
    type: Optional[str] = None


class Job(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    application: Optional[str] = Field(None, example='onscalelab')
    console_parameter_names: Optional[List[str]] = Field(
        None, alias='consoleParameterNames'
    )
    core_hour_estimate: Optional[float] = Field(
        None, alias='coreHourEstimate', example=1.0
    )
    cores_required: Optional[int] = Field(None, alias='coresRequired', example=1)
    deleted_date: Optional[int] = Field(
        None, alias='deletedDate', description='1585700000000', example=1585700000000
    )
    design_id: Optional[str] = Field(None, alias='designId')
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    docker_tag: Optional[str] = Field(None, alias='dockerTag', example='tag')
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId')
    file_aliases: Optional[List[str]] = Field(None, alias='fileAliases')
    file_dependencies: Optional[List[str]] = Field(None, alias='fileDependencies')
    file_dependent_job_id_list: Optional[List[str]] = Field(
        None, alias='fileDependentJobIdList'
    )
    final_status: Optional[str] = Field(None, alias='finalStatus')
    hpc_id: Optional[str] = Field(
        None,
        alias='hpcId',
        description='UUID',
        example='0f778276-7f91-4b03-99a1-4a88e4002dca',
    )
    job_cost: Optional[float] = Field(None, alias='jobCost')
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )
    job_name: Optional[str] = Field(None, alias='jobName', example='testJob')
    job_status: Optional[List[JobStatus]] = Field(None, alias='jobStatus')
    job_type: Optional[str] = Field(None, alias='jobType', example='test job')
    last_status: Optional[str] = Field(None, alias='lastStatus')
    last_status_date: Optional[int] = Field(
        None, alias='lastStatusDate', description='1585700000000', example=1585700000000
    )
    log_group: Optional[str] = Field(
        None, alias='logGroup', description='string', example='flexeast'
    )
    main_file: Optional[str] = Field(None, alias='mainFile', example='disk.flxinp')
    number_of_parts: Optional[int] = Field(None, alias='numberOfParts', example=1)
    operation: Optional[Operation] = Field(None, example='simulation')
    parent_job_id: Optional[str] = Field(None, alias='parentJobId')
    physics_types: Optional[List[str]] = Field(None, alias='physicsTypes')
    precision: Optional[Precision3] = Field(None, example='single')
    preprocessor: Optional[Preprocessor] = Field(None, example='none')
    project_id: Optional[str] = Field(None, alias='projectId')
    queued_status_date: Optional[int] = Field(
        None,
        alias='queuedStatusDate',
        description='1585700000000',
        example=1585700000000,
    )
    ram_estimate: Optional[int] = Field(None, alias='ramEstimate', example=100)
    simulation_count: Optional[int] = Field(None, alias='simulationCount', example=1)
    simulations: Optional[List[Simulation]] = None
    supervisor_id: Optional[str] = Field(None, alias='supervisorId', description='UUID')
    tags: Optional[List[Tag]] = None
    time_to_end: Optional[str] = Field(
        None,
        alias='timeToEnd',
        description='seconds as scientific notation',
        example='1e-3',
    )
    user_id: Optional[str] = Field(None, alias='userId')


class JobFileCredentialsResponse(BaseModel):
    key: Optional[str] = None
    linked_files: Optional[List[LinkedFile]] = Field(None, alias='linkedFiles')
    secret: Optional[str] = None
    session: Optional[str] = None


class JobListLoadResponse(BaseModel):
    finished_job_list: Optional[List[Job]] = Field(None, alias='finishedJobList')
    queued_job_list: Optional[List[Job]] = Field(None, alias='queuedJobList')


class JobListResponse(BaseModel):
    has_more_job: Optional[bool] = Field(None, alias='hasMoreJob')
    job_count: Optional[int] = Field(None, alias='jobCount')
    job_list_combined: Optional[List[Job]] = Field(None, alias='jobListCombined')
    job_list_created: Optional[List[Job]] = Field(None, alias='jobListCreated')
    job_list_finished: Optional[List[Job]] = Field(None, alias='jobListFinished')
    job_list_queued: Optional[List[Job]] = Field(None, alias='jobListQueued')
    page_count: Optional[int] = Field(None, alias='pageCount')
    page_number: Optional[int] = Field(None, alias='pageNumber')
    page_size: Optional[int] = Field(None, alias='pageSize')


class PartsGetPartsResponseParts(BaseModel):
    appearance: Optional[PartsGetPartsResponsePartsAppearance] = None
    body_type: Optional[str] = Field(None, alias='bodyType')
    custom_properties: Optional[Dict[str, Dict[str, Any]]] = Field(
        None, alias='customProperties'
    )
    element_id: Optional[str] = Field(None, alias='elementId')
    is_hidden: Optional[bool] = Field(None, alias='isHidden')
    is_mesh: Optional[bool] = Field(None, alias='isMesh')
    material: Optional[PartsGetPartsResponsePartsMaterial] = None
    microversion_id: Optional[str] = Field(None, alias='microversionId')
    name: Optional[str] = None
    part_id: Optional[str] = Field(None, alias='partId')
    part_query: Optional[str] = Field(None, alias='partQuery')


class PerformanceReport(BaseModel):
    five_to_seven_minutes0: Optional[List[str]] = Field(
        None, alias='fiveToSevenMinutes0'
    )
    five_to_seven_minutes1: Optional[List[str]] = Field(
        None, alias='fiveToSevenMinutes1'
    )
    five_to_seven_minutes2: Optional[List[str]] = Field(
        None, alias='fiveToSevenMinutes2'
    )
    five_to_seven_minutes3: Optional[List[str]] = Field(
        None, alias='fiveToSevenMinutes3'
    )
    five_to_seven_minutes4: Optional[List[str]] = Field(
        None, alias='fiveToSevenMinutes4'
    )
    five_to_seven_minutes5: Optional[List[str]] = Field(
        None, alias='fiveToSevenMinutes5'
    )
    job_map: Optional[Dict[str, Job]] = Field(None, alias='jobMap')
    less_than_minute0: Optional[List[str]] = Field(None, alias='lessThanMinute0')
    less_than_minute1: Optional[List[str]] = Field(None, alias='lessThanMinute1')
    less_than_minute2: Optional[List[str]] = Field(None, alias='lessThanMinute2')
    less_than_minute3: Optional[List[str]] = Field(None, alias='lessThanMinute3')
    less_than_minute4: Optional[List[str]] = Field(None, alias='lessThanMinute4')
    less_than_minute5: Optional[List[str]] = Field(None, alias='lessThanMinute5')
    more_than_seven_minutes0: Optional[List[str]] = Field(
        None, alias='moreThanSevenMinutes0'
    )
    more_than_seven_minutes1: Optional[List[str]] = Field(
        None, alias='moreThanSevenMinutes1'
    )
    more_than_seven_minutes2: Optional[List[str]] = Field(
        None, alias='moreThanSevenMinutes2'
    )
    more_than_seven_minutes3: Optional[List[str]] = Field(
        None, alias='moreThanSevenMinutes3'
    )
    more_than_seven_minutes4: Optional[List[str]] = Field(
        None, alias='moreThanSevenMinutes4'
    )
    more_than_seven_minutes5: Optional[List[str]] = Field(
        None, alias='moreThanSevenMinutes5'
    )
    one_to_three_minutes0: Optional[List[str]] = Field(None, alias='oneToThreeMinutes0')
    one_to_three_minutes1: Optional[List[str]] = Field(None, alias='oneToThreeMinutes1')
    one_to_three_minutes2: Optional[List[str]] = Field(None, alias='oneToThreeMinutes2')
    one_to_three_minutes3: Optional[List[str]] = Field(None, alias='oneToThreeMinutes3')
    one_to_three_minutes4: Optional[List[str]] = Field(None, alias='oneToThreeMinutes4')
    one_to_three_minutes5: Optional[List[str]] = Field(None, alias='oneToThreeMinutes5')
    three_to_five_minutes0: Optional[List[str]] = Field(
        None, alias='threeToFiveMinutes0'
    )
    three_to_five_minutes1: Optional[List[str]] = Field(
        None, alias='threeToFiveMinutes1'
    )
    three_to_five_minutes2: Optional[List[str]] = Field(
        None, alias='threeToFiveMinutes2'
    )
    three_to_five_minutes3: Optional[List[str]] = Field(
        None, alias='threeToFiveMinutes3'
    )
    three_to_five_minutes4: Optional[List[str]] = Field(
        None, alias='threeToFiveMinutes4'
    )
    three_to_five_minutes5: Optional[List[str]] = Field(
        None, alias='threeToFiveMinutes5'
    )


class ReportJob(BaseModel):
    account_id: Optional[str] = Field(
        None,
        alias='accountId',
        description='UUID',
        example='0952e70b-277a-4cfb-a207-b5da0f07cd70',
    )
    application: Optional[str] = Field(None, example='onscalelab')
    console_parameter_names: Optional[List[str]] = Field(
        None, alias='consoleParameterNames', unique_items=True
    )
    core_hour_estimate: Optional[float] = Field(
        None, alias='coreHourEstimate', example=1.0
    )
    cores_required: Optional[int] = Field(None, alias='coresRequired', example=1)
    deleted_date: Optional[int] = Field(
        None, alias='deletedDate', description='1585700000000', example=1585700000000
    )
    design_id: Optional[str] = Field(None, alias='designId')
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    docker_tag: Optional[str] = Field(None, alias='dockerTag', example='tag')
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId')
    email_address: Optional[str] = Field(None, alias='emailAddress')
    file_aliases: Optional[List[str]] = Field(None, alias='fileAliases')
    file_dependencies: Optional[List[str]] = Field(None, alias='fileDependencies')
    file_dependent_job_id_list: Optional[List[str]] = Field(
        None, alias='fileDependentJobIdList'
    )
    final_status: Optional[str] = Field(None, alias='finalStatus')
    hpc_id: Optional[str] = Field(
        None,
        alias='hpcId',
        description='UUID',
        example='0f778276-7f91-4b03-99a1-4a88e4002dca',
    )
    job_cost: Optional[float] = Field(None, alias='jobCost')
    job_id: Optional[str] = Field(
        None,
        alias='jobId',
        description='UUID',
        example='7b6985ff-23fd-4636-9c18-098a26e51d53',
    )
    job_name: Optional[str] = Field(None, alias='jobName', example='testJob')
    job_status: Optional[List[JobStatus]] = Field(None, alias='jobStatus')
    job_type: Optional[str] = Field(None, alias='jobType', example='test job')
    last_status: Optional[str] = Field(None, alias='lastStatus')
    last_status_date: Optional[int] = Field(
        None, alias='lastStatusDate', description='1585700000000', example=1585700000000
    )
    log_group: Optional[str] = Field(
        None, alias='logGroup', description='string', example='flexeast'
    )
    main_file: Optional[str] = Field(None, alias='mainFile', example='disk.flxinp')
    number_of_parts: Optional[int] = Field(None, alias='numberOfParts', example=1)
    operation: Optional[Operation1] = Field(None, example='simulation')
    parent_job_id: Optional[str] = Field(None, alias='parentJobId')
    physics_types: Optional[List[str]] = Field(None, alias='physicsTypes')
    precision: Optional[Precision5] = Field(None, example='single')
    preprocessor: Optional[Preprocessor1] = Field(None, example='none')
    project_id: Optional[str] = Field(None, alias='projectId')
    queued_status_date: Optional[int] = Field(
        None,
        alias='queuedStatusDate',
        description='1585700000000',
        example=1585700000000,
    )
    ram_estimate: Optional[int] = Field(None, alias='ramEstimate', example=100)
    simulation_count: Optional[int] = Field(None, alias='simulationCount', example=1)
    simulations: Optional[List[Simulation]] = None
    supervisor_id: Optional[str] = Field(None, alias='supervisorId', description='UUID')
    tags: Optional[List[Tag]] = None
    time_to_end: Optional[str] = Field(
        None,
        alias='timeToEnd',
        description='seconds as scientific notation',
        example='1e-3',
    )
    user_id: Optional[str] = Field(None, alias='userId')


class AccountSearchResponse(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    design_instance_list: Optional[List[DesignInstance]] = Field(
        None, alias='designInstanceList'
    )
    design_list: Optional[List[Design]] = Field(None, alias='designList')
    field_name: Optional[str] = Field(None, alias='fieldName')
    job_list: Optional[List[Job]] = Field(None, alias='jobList')
    keyword: Optional[str] = None
    object_type: Optional[str] = Field(None, alias='objectType')
    project_list: Optional[List[Project]] = Field(None, alias='projectList')


class FailureReport(BaseModel):
    account_data: Optional[Dict[str, Account]] = Field(None, alias='accountData')
    data: Optional[Dict[str, Dict[str, List[ReportJob]]]] = None
    day: Optional[int] = None
    month: Optional[int] = None
    year: Optional[int] = None
