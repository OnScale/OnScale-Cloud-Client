# generated by datamodel-codegen:
#   filename:  swagger.json
#   timestamp: 2021-02-22T14:56:43+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Model(BaseModel):
    __root__: Any


class AccountDetails(BaseModel):
    first_name: Optional[str] = Field(None, alias="firstName")
    last_name: Optional[str] = Field(None, alias="lastName")
    company_name: Optional[str] = Field(None, alias="companyName")
    email_address: Optional[str] = Field(None, alias="emailAddress")
    addr1: Optional[str] = None
    addr2: Optional[str] = None
    city: Optional[str] = None
    state: Optional[str] = None
    zip: Optional[str] = None
    country: Optional[str] = None
    phone_number: Optional[str] = Field(None, alias="phoneNumber")
    subscription_type: Optional[str] = Field(None, alias="subscriptionType")
    credit_card: Optional[str] = Field(None, alias="creditCard")
    ccv: Optional[str] = None
    expire_month: Optional[str] = Field(None, alias="expireMonth")
    expire_year: Optional[str] = Field(None, alias="expireYear")
    overage: Optional[bool] = None
    token_id: Optional[str] = Field(None, alias="tokenId")


class ApiException(BaseModel):
    code: Optional[int] = Field(None, description="integer")
    message: Optional[str] = None


class AccountUpdateRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    account_name: Optional[str] = Field(None, alias="accountName")
    first_name: Optional[str] = Field(None, alias="firstName")
    last_name: Optional[str] = Field(None, alias="lastName")
    company_name: Optional[str] = Field(None, alias="companyName")
    email_address: Optional[str] = Field(None, alias="emailAddress")
    addr1: Optional[str] = None
    addr2: Optional[str] = None
    city: Optional[str] = None
    state: Optional[str] = None
    zip: Optional[str] = None
    country: Optional[str] = None
    phone_number: Optional[str] = Field(None, alias="phoneNumber")


class AccountRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")


class SubscriptionUpdateRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    account_name: Optional[str] = Field(None, alias="accountName")
    subscription_type: Optional[str] = Field(None, alias="subscriptionType")
    credit_card: Optional[str] = Field(None, alias="creditCard")
    ccv: Optional[str] = None
    expire_month: Optional[str] = Field(None, alias="expireMonth")
    expire_year: Optional[str] = Field(None, alias="expireYear")
    overage: Optional[bool] = None
    token_id: Optional[str] = Field(None, alias="tokenId")


class SubscriptionUpdateOverageRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    overage: Optional[bool] = None


class AllowSupportLoggingRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    allow_support_logging: Optional[bool] = Field(None, alias="allowSupportLogging")


class DefaultUpdateRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    default_project_core_hour: Optional[float] = Field(
        None, alias="defaultProjectCoreHour"
    )
    default_max_sim_core_hour: Optional[float] = Field(
        None, alias="defaultMaxSimCoreHour"
    )


class AccountAccess(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    cognito_email: Optional[str] = Field(
        None, alias="cognitoEmail", description="email"
    )
    max_core_hour_request: Optional[int] = Field(None, alias="maxCoreHourRequest")
    account_admin: Optional[bool] = Field(None, alias="accountAdmin")
    has_mfa: Optional[bool] = Field(None, alias="hasMFA")
    user_id: Optional[str] = Field(None, alias="userId")
    account_lead: Optional[bool] = Field(None, alias="accountLead")
    user_max_core_allowed: Optional[int] = Field(None, alias="userMaxCoreAllowed")
    suspended: Optional[bool] = None


class Hpc(BaseModel):
    hpc_id: Optional[str] = Field(None, alias="hpcId")
    hpc_active: Optional[bool] = Field(None, alias="hpcActive")
    hpc_cloud: Optional[str] = Field(None, alias="hpcCloud")
    hpc_cluster_name: Optional[str] = Field(None, alias="hpcClusterName")
    hpc_description: Optional[str] = Field(None, alias="hpcDescription")
    hpc_region: Optional[str] = Field(None, alias="hpcRegion")
    hpc_account_bucket: Optional[str] = Field(None, alias="hpcAccountBucket")
    max_node_cores: Optional[int] = Field(None, alias="maxNodeCores")
    max_node_ram: Optional[int] = Field(None, alias="maxNodeRam")
    mnmpi_core_count: Optional[int] = Field(None, alias="mnmpiCoreCount")


class AccountItemRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    prioritized: Optional[bool] = None
    item_ids: Optional[List[str]] = Field(None, alias="itemIds")


class TransactionType(Enum):
    CREDIT = "CREDIT"
    DEBIT = "DEBIT"
    RECONCILIATION = "RECONCILIATION"
    ALLOCATION = "ALLOCATION"
    BLOCK = "BLOCK"


class AccountLedger(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    transaction_id: Optional[str] = Field(
        None, alias="transactionId", description="UUID"
    )
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")
    simulation_id: Optional[str] = Field(None, alias="simulationId", description="UUID")
    mesh_id: Optional[str] = Field(None, alias="meshId", description="UUID")
    blob_id: Optional[str] = Field(None, alias="blobId", description="UUID")
    transaction_type: Optional[TransactionType] = Field(None, alias="transactionType")
    transaction_description: Optional[str] = Field(None, alias="transactionDescription")
    cognito_email: Optional[str] = Field(
        None, alias="cognitoEmail", description="email"
    )
    user_id: Optional[str] = Field(None, alias="userId")
    transaction_amount: Optional[float] = Field(None, alias="transactionAmount")
    transaction_date: Optional[int] = Field(
        None, alias="transactionDate", description="1585700000000"
    )
    invoice_submitted: Optional[bool] = Field(None, alias="invoiceSubmitted")
    invoice_required: Optional[bool] = Field(None, alias="invoiceRequired")
    invoice_accepted: Optional[bool] = Field(None, alias="invoiceAccepted")
    transaction_expiration_date: Optional[int] = Field(
        None, alias="transactionExpirationDate", description="1585700000000"
    )
    reconciliation_id: Optional[str] = Field(None, alias="reconciliationId")
    overage_amount: Optional[float] = Field(None, alias="overageAmount")
    project_id: Optional[str] = Field(None, alias="projectId")
    design_id: Optional[str] = Field(None, alias="designId")
    design_instance_id: Optional[str] = Field(None, alias="designInstanceId")
    supervisor_id: Optional[str] = Field(None, alias="supervisorId")


class Contributor(BaseModel):
    user_id: Optional[str] = Field(None, alias="userId")
    first_name: Optional[str] = Field(None, alias="firstName")
    last_name: Optional[str] = Field(None, alias="lastName")
    access_type: Optional[str] = Field(None, alias="accessType")
    account_admin: Optional[bool] = Field(None, alias="accountAdmin")
    account_lead: Optional[bool] = Field(None, alias="accountLead")
    department: Optional[str] = None
    title: Optional[str] = None
    last_date: Optional[int] = Field(
        None, alias="lastDate", description="1585700000000"
    )
    last_action: Optional[str] = Field(None, alias="lastAction")
    core_hour_used: Optional[float] = Field(None, alias="coreHourUsed")


class EnterpriseUser(BaseModel):
    user_id: Optional[str] = Field(None, alias="userId")
    first_name: Optional[str] = Field(None, alias="firstName")
    last_name: Optional[str] = Field(None, alias="lastName")
    department: Optional[str] = None
    title: Optional[str] = None
    account_access_list: Optional[List[AccountAccess]] = Field(
        None, alias="accountAccessList"
    )


class AccountSummary(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId")
    account_name: Optional[str] = Field(None, alias="accountName")
    core_hours_credit: Optional[float] = Field(None, alias="coreHoursCredit")
    core_hours_debit: Optional[float] = Field(None, alias="coreHoursDebit")
    core_hours_available: Optional[float] = Field(None, alias="coreHoursAvailable")


class AccountCoreHourSummary(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId")
    account_name: Optional[str] = Field(None, alias="accountName")
    user_id: Optional[str] = Field(None, alias="userId")
    account_ch_available: Optional[float] = Field(None, alias="accountCHAvailable")
    account_ch_credit: Optional[float] = Field(None, alias="accountCHCredit")
    account_ch_debit: Optional[float] = Field(None, alias="accountCHDebit")
    user_ch_available: Optional[float] = Field(None, alias="userCHAvailable")
    user_ch_credit: Optional[float] = Field(None, alias="userCHCredit")
    user_ch_debit: Optional[float] = Field(None, alias="userCHDebit")
    account_overage_since_last_credit: Optional[float] = Field(
        None, alias="accountOverageSinceLastCredit"
    )
    user_overage_since_last_credit: Optional[float] = Field(
        None, alias="userOverageSinceLastCredit"
    )


class Precision(Enum):
    SINGLE = "SINGLE"
    DOUBLE = "DOUBLE"


class Operation(Enum):
    SIMULATION = "SIMULATION"
    EMSIMULATION = "EMSIMULATION"
    MPI = "MPI"
    EMMPI = "EMMPI"
    MNMPI = "MNMPI"
    EMMNMPI = "EMMNMPI"
    MOEBIUS_MPI = "MOEBIUS_MPI"
    MOEBIUS_MNMPI = "MOEBIUS_MNMPI"
    OPENFOAM = "OPENFOAM"
    OPENFOAM_MNMPI = "OPENFOAM_MNMPI"
    REFLEX_MPI = "REFLEX_MPI"
    REFLEX_MNMPI = "REFLEX_MNMPI"
    SPARSELIZARD_MPI = "SPARSELIZARD_MPI"
    SPARSELIZARD_MNMPI = "SPARSELIZARD_MNMPI"
    ESTIMATE = "ESTIMATE"
    REVIEW = "REVIEW"
    BUILD = "BUILD"


class Preprocessor(Enum):
    NONE = "NONE"
    MODELWRITER = "MODELWRITER"


class JobStatus1(Enum):
    CREATED = "CREATED"
    QUEUED = "QUEUED"
    RUNNING = "RUNNING"
    PAUSED = "PAUSED"
    FAILED = "FAILED"
    FINISHED = "FINISHED"


class JobStatus(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")
    job_status: Optional[JobStatus1] = Field(None, alias="jobStatus")
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    job_status_date: Optional[int] = Field(
        None, alias="jobStatusDate", description="1585700000000"
    )


class SimulationStatus1(Enum):
    RUNNING = "RUNNING"
    QUEUED = "QUEUED"
    DELAYED = "DELAYED"
    RESTARTED = "RESTARTED"
    FAILED = "FAILED"
    PAUSED = "PAUSED"
    CANCELLED = "CANCELLED"
    COMPLETED = "COMPLETED"


class SimulationStatus(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId")
    simulation_id: Optional[str] = Field(None, alias="simulationId")
    simulation_status: Optional[SimulationStatus1] = Field(
        None, alias="simulationStatus"
    )
    simulation_status_date: Optional[int] = Field(None, alias="simulationStatusDate")
    simulation_status_comment: Optional[str] = Field(
        None, alias="simulationStatusComment"
    )


class Tag(BaseModel):
    item_id: Optional[str] = Field(None, alias="itemId", description="UUID")
    tag: Optional[str] = Field(None, description="any string")
    type: Optional[str] = Field(None, description="any string")


class AccountJobListRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    page_number: Optional[int] = Field(None, alias="pageNumber")
    page_size: Optional[int] = Field(None, alias="pageSize")
    include_finished: Optional[bool] = Field(None, alias="includeFinished")
    include_queued: Optional[bool] = Field(None, alias="includeQueued")
    include_created: Optional[bool] = Field(None, alias="includeCreated")
    include_job_status: Optional[bool] = Field(None, alias="includeJobStatus")
    start_date: Optional[datetime] = Field(None, alias="startDate")
    end_date: Optional[datetime] = Field(None, alias="endDate")
    include_children_jobs: Optional[bool] = Field(None, alias="includeChildrenJobs")
    project_job_only: Optional[bool] = Field(None, alias="projectJobOnly")
    no_project_job_only: Optional[bool] = Field(None, alias="noProjectJobOnly")
    job_status: Optional[str] = Field(None, alias="jobStatus")
    include_combined: Optional[bool] = Field(None, alias="includeCombined")


class AccountAllocationResponse(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId")
    core_hours_available: Optional[float] = Field(None, alias="coreHoursAvailable")
    allocation_available: Optional[float] = Field(None, alias="allocationAvailable")
    recent_transactions: Optional[List[AccountLedger]] = Field(
        None, alias="recentTransactions"
    )
    email_address: Optional[str] = Field(None, alias="emailAddress")


class AllocateCoreHourRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    cognito_email: Optional[str] = Field(
        None, alias="cognitoEmail", description="email"
    )
    new_core_hours_allowed: Optional[float] = Field(None, alias="newCoreHoursAllowed")


class AccountBucketInformation(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId")
    bucket: Optional[str] = None
    root_dir: Optional[str] = Field(None, alias="rootDir")
    provider: Optional[str] = None
    region: Optional[str] = None


class OfflineLicenseResponse(BaseModel):
    signed_license_key: Optional[str] = Field(None, alias="signedLicenseKey")


class OfflineLicenseRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId")
    shared_secret: Optional[str] = Field(None, alias="sharedSecret")
    core_hours: Optional[float] = Field(None, alias="coreHours")


class OfflineTransaction(BaseModel):
    job_completed_timestamp: Optional[int] = Field(None, alias="jobCompletedTimestamp")
    milliseconds_consumed: Optional[int] = Field(None, alias="millisecondsConsumed")


class MonthlyUsage(BaseModel):
    month: Optional[int] = None
    year: Optional[int] = None
    total_amount: Optional[float] = Field(None, alias="totalAmount")
    overage_amount: Optional[float] = Field(None, alias="overageAmount")


class TagType(BaseModel):
    tag: Optional[str] = None
    type: Optional[str] = None


class TagTypeJobCost(BaseModel):
    tag_type: Optional[TagType] = Field(None, alias="tagType")
    job_cost: Optional[float] = Field(None, alias="jobCost")


class AccountDateRangeRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    start_day: Optional[int] = Field(None, alias="startDay", description="startDay")
    start_month: Optional[int] = Field(
        None, alias="startMonth", description="startMonth"
    )
    start_year: Optional[int] = Field(None, alias="startYear", description="startYear")
    end_day: Optional[int] = Field(None, alias="endDay", description="endDay")
    end_month: Optional[int] = Field(None, alias="endMonth", description="endMonth")
    end_year: Optional[int] = Field(None, alias="endYear", description="endYear")


class AccountTagRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    tag_type: Optional[str] = Field(None, alias="tagType")
    tag: Optional[str] = None
    start_day: Optional[int] = Field(None, alias="startDay", description="startDay")
    start_month: Optional[int] = Field(
        None, alias="startMonth", description="startMonth"
    )
    start_year: Optional[int] = Field(None, alias="startYear", description="startYear")
    end_day: Optional[int] = Field(None, alias="endDay", description="endDay")
    end_month: Optional[int] = Field(None, alias="endMonth", description="endMonth")
    end_year: Optional[int] = Field(None, alias="endYear", description="endYear")


class SendCoreHourRequest(BaseModel):
    from_account_id: Optional[str] = Field(
        None, alias="fromAccountId", description="UUID"
    )
    to_account_id: Optional[str] = Field(None, alias="toAccountId", description="UUID")
    core_hour_amount: Optional[float] = Field(
        None, alias="coreHourAmount", description="Float"
    )


class UserCoreHourBalance(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId")
    account_name: Optional[str] = Field(None, alias="accountName")
    numerator: Optional[float] = None
    denominator: Optional[float] = None


class CalendarUsage(BaseModel):
    total_amount: Optional[float] = Field(None, alias="totalAmount")
    overage_amount: Optional[float] = Field(None, alias="overageAmount")
    year: Optional[int] = None
    quarter: Optional[int] = None
    month: Optional[int] = None
    week: Optional[int] = None
    day: Optional[int] = None


class GroupBy(Enum):
    YEARLY = "YEARLY"
    QUARTERLY = "QUARTERLY"
    MONTHLY = "MONTHLY"
    WEEKLY = "WEEKLY"
    DAILY = "DAILY"


class UsageReportRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    group_by: GroupBy = Field(..., alias="groupBy")
    start_date: datetime = Field(..., alias="startDate")
    end_date: datetime = Field(..., alias="endDate")


class UserUsageReportRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    user_id: Optional[str] = Field(None, alias="userId")


class Precision1(Enum):
    SINGLE = "SINGLE"
    DOUBLE = "DOUBLE"


class Analysis(BaseModel):
    analysis_id: Optional[str] = Field(None, alias="analysisId", description="UUID")
    project_id: Optional[str] = Field(None, alias="projectId")
    design_id: Optional[str] = Field(None, alias="designId")
    design_instance_id: Optional[str] = Field(None, alias="designInstanceId")
    blob_id: Optional[str] = Field(None, alias="blobId")
    user_id: Optional[str] = Field(None, alias="userId")
    job_id: Optional[str] = Field(None, alias="jobId")
    analysis_type: Optional[str] = Field(None, alias="analysisType")
    solver: Optional[str] = None
    time_duration: Optional[int] = Field(None, alias="timeDuration")
    time_step: Optional[int] = Field(None, alias="timeStep")
    create_date: Optional[int] = Field(
        None, alias="createDate", description="1585700000000"
    )
    cipher_salt: Optional[str] = Field(None, alias="cipherSalt", description="UUID")
    precision: Optional[Precision1] = None
    python_hash: Optional[str] = Field(None, alias="pythonHash")
    life_time_limit: Optional[int] = Field(None, alias="lifeTimeLimit")
    required_blobs: Optional[List[str]] = Field(None, alias="requiredBlobs")
    physics_types: Optional[List[str]] = Field(None, alias="physicsTypes")


class Physics(Enum):
    ACOUSTIC = "ACOUSTIC"
    AEROACOUSTIC = "AEROACOUSTIC"
    ELECTROMAGNETIC = "ELECTROMAGNETIC"
    ELECTROMECHANICAL = "ELECTROMECHANICAL"
    FLUID = "FLUID"
    FLUIDELECTROMECHANICAL = "FLUIDELECTROMECHANICAL"
    FLUIDELECTROTHERMOMECHANICAL = "FLUIDELECTROTHERMOMECHANICAL"
    FLUIDMECHANICAL = "FLUIDMECHANICAL"
    FLUIDTHERMAL = "FLUIDTHERMAL"
    FLUIDTHERMOMECHANICAL = "FLUIDTHERMOMECHANICAL"
    MECHANICAL = "MECHANICAL"
    THERMAL = "THERMAL"
    THERMOELECTROMAGNETIC = "THERMOELECTROMAGNETIC"
    THERMOMECHANICAL = "THERMOMECHANICAL"


class DesignInstance(BaseModel):
    design_instance_id: Optional[str] = Field(
        None, alias="designInstanceId", description="UUID"
    )
    design_id: Optional[str] = Field(None, alias="designId", description="UUID")
    project_id: Optional[str] = Field(None, alias="projectId")
    user_id: Optional[str] = Field(None, alias="userId")
    design_instance_title: Optional[str] = Field(None, alias="designInstanceTitle")
    description: Optional[str] = None
    create_date: Optional[int] = Field(
        None, alias="createDate", description="1585700000000"
    )
    design_instance_hash: Optional[str] = Field(None, alias="designInstanceHash")
    analysis_list: Optional[List[Analysis]] = Field(None, alias="analysisList")
    archived: Optional[bool] = None
    locked: Optional[bool] = None


class ProjectListRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    include_user_ids: Optional[bool] = Field(None, alias="includeUserIds")
    include_usage: Optional[bool] = Field(None, alias="includeUsage")


class AccountListPageRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    page_size: Optional[int] = Field(None, alias="pageSize")
    page_number: Optional[int] = Field(None, alias="pageNumber")
    include_user_ids: Optional[bool] = Field(None, alias="includeUserIds")
    include_usage: Optional[bool] = Field(None, alias="includeUsage")


class User(BaseModel):
    user_id: Optional[str] = Field(None, alias="userId")
    cognito_email: Optional[str] = Field(None, alias="cognitoEmail")
    last_name: Optional[str] = Field(None, alias="lastName")
    first_name: Optional[str] = Field(None, alias="firstName")
    company_name: Optional[str] = Field(None, alias="companyName")
    department: Optional[str] = None
    title: Optional[str] = None
    phone_number: Optional[str] = Field(None, alias="phoneNumber")
    default_plan_code: Optional[str] = Field(None, alias="defaultPlanCode")
    registration_type: Optional[str] = Field(None, alias="registrationType")
    last_job_time: Optional[int] = Field(
        None, alias="lastJobTime", description="1585700000000"
    )
    has_mfa: Optional[bool] = Field(None, alias="hasMFA")
    send_completion_email: Optional[bool] = Field(None, alias="sendCompletionEmail")
    create_date: Optional[int] = Field(
        None, alias="createDate", description="1585700000000"
    )


class AccountUserRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    user_id: Optional[str] = Field(None, alias="userId", description="UUID")


class ObjectType(Enum):
    PROJECT = "PROJECT"
    DESIGN = "DESIGN"
    DESIGNINSTANCE = "DESIGNINSTANCE"
    USER = "USER"
    JOB = "JOB"


class AccountSearchRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    keyword: str
    field_name: Optional[str] = Field(None, alias="fieldName")
    object_type: Optional[ObjectType] = Field(
        None, alias="objectType", description="String"
    )


class AccountPlanCode(BaseModel):
    plan_code: Optional[str] = Field(None, alias="planCode")
    plan_name: Optional[str] = Field(None, alias="planName")
    periodicity: Optional[str] = None
    rate: Optional[float] = None
    core_hour_limit: Optional[float] = Field(None, alias="coreHourLimit")
    on_demand_rate: Optional[float] = Field(None, alias="onDemandRate")
    active: Optional[bool] = None


class SimulationStatusReportRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    user_id: Optional[str] = Field(None, alias="userId")
    start_date: Optional[datetime] = Field(None, alias="startDate")
    end_date: Optional[datetime] = Field(None, alias="endDate")
    status_number_only: Optional[bool] = Field(None, alias="statusNumberOnly")


class SimulationStatusReportResponse(BaseModel):
    request: Optional[SimulationStatusReportRequest] = None
    status_simulation_number: Optional[Dict[str, Any]] = Field(
        None, alias="statusSimulationNumber"
    )
    simulation_status_map: Optional[Dict[str, Any]] = Field(
        None, alias="simulationStatusMap"
    )


class AccountDockerTag(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId")
    docker_tag: Optional[str] = Field(None, alias="dockerTag")


class AccountTransaction(BaseModel):
    transaction_id: Optional[str] = Field(None, alias="transactionId")
    account_id: Optional[str] = Field(None, alias="accountId")
    invoice_id: Optional[str] = Field(None, alias="invoiceId")
    currency: Optional[str] = None
    description: Optional[str] = None
    transaction_type: Optional[str] = Field(None, alias="transactionType")
    transaction_state: Optional[str] = Field(None, alias="transactionState")
    created_at: Optional[int] = Field(
        None, alias="createdAt", description="1585700000000"
    )
    collected_at: Optional[int] = Field(
        None, alias="collectedAt", description="1585700000000"
    )
    payment_method: Optional[str] = Field(None, alias="paymentMethod")
    credit_last_four: Optional[str] = Field(None, alias="creditLastFour")
    amount_in_cents: Optional[int] = Field(None, alias="amountInCents")
    message: Optional[str] = None


class TransactionReportResponse(BaseModel):
    page_count: Optional[int] = Field(None, alias="pageCount")
    page_number: Optional[int] = Field(None, alias="pageNumber")
    page_size: Optional[int] = Field(None, alias="pageSize")
    transaction_count: Optional[int] = Field(None, alias="transactionCount")
    transactions: Optional[List[AccountTransaction]] = None


class TransactionReportRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    page_number: Optional[int] = Field(None, alias="pageNumber")
    page_size: Optional[int] = Field(None, alias="pageSize")
    transaction_type: Optional[str] = Field(None, alias="transactionType")
    transaction_state: Optional[str] = Field(None, alias="transactionState")
    descending_sort: Optional[bool] = Field(None, alias="descendingSort")
    start_date: Optional[datetime] = Field(None, alias="startDate")
    end_date: Optional[datetime] = Field(None, alias="endDate")


class AccountLedgerListRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    from_date: Optional[datetime] = Field(None, alias="fromDate")
    to_date: Optional[datetime] = Field(None, alias="toDate")


class EmailRequest(BaseModel):
    email_address: Optional[str] = Field(None, alias="emailAddress")


class AccountAdjustRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    core_hour_credit: Optional[float] = Field(None, alias="coreHourCredit")


class AccountProductRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    onscale_lab: Optional[bool] = Field(None, alias="onscaleLab")
    onscale_solve: Optional[bool] = Field(None, alias="onscaleSolve")
    onscale_cli: Optional[bool] = Field(None, alias="onscaleCli")
    onscale_python: Optional[bool] = Field(None, alias="onscalePython")


class AccountReportRequest(BaseModel):
    sday: Optional[int] = None
    smonth: Optional[int] = None
    syear: Optional[int] = None
    eday: Optional[int] = None
    emonth: Optional[int] = None
    eyear: Optional[int] = None


class ChartPoint(BaseModel):
    x: Optional[int] = None
    sub_chart_id: Optional[str] = Field(None, alias="subChartId")
    label: Optional[str] = None
    tooltip: Optional[str] = None
    values: Optional[List[float]] = None
    string_counter: Optional[List[str]] = Field(None, alias="stringCounter")


class ReportType(Enum):
    ACTIVE_ACCOUNTS = "ACTIVE_ACCOUNTS"
    PLANCODE = "PLANCODE"
    CORE_HOUR_BURN = "CORE_HOUR_BURN"
    TIMELINE = "TIMELINE"


class LevelType(Enum):
    TOP = "TOP"
    MIDDLE = "MIDDLE"


class ChartReport(BaseModel):
    chart_id: Optional[str] = Field(None, alias="chartId")
    chart_title: Optional[str] = Field(None, alias="chartTitle")
    index_title: Optional[str] = Field(None, alias="indexTitle")
    value_title: Optional[str] = Field(None, alias="valueTitle")
    column_titles: Optional[List[str]] = Field(None, alias="columnTitles")
    chart_report_values: Optional[List[ChartPoint]] = Field(
        None, alias="chartReportValues"
    )
    min_value: Optional[float] = Field(None, alias="minValue")
    max_value: Optional[float] = Field(None, alias="maxValue")
    report_type: Optional[ReportType] = Field(None, alias="reportType")
    level_type: Optional[LevelType] = Field(None, alias="levelType")
    chart_value: Optional[int] = Field(None, alias="chartValue")
    values_are_dates: Optional[bool] = Field(None, alias="valuesAreDates")


class HistogramReport(BaseModel):
    chart_id: Optional[str] = Field(None, alias="chartId")
    chart_title: Optional[str] = Field(None, alias="chartTitle")
    labels_title: Optional[str] = Field(None, alias="labelsTitle")
    value_title: Optional[str] = Field(None, alias="valueTitle")
    data: Optional[Dict[str, Any]] = None


class ReportBundle(BaseModel):
    chart_reports: Optional[List[ChartReport]] = Field(None, alias="chartReports")
    histogram_reports: Optional[List[HistogramReport]] = Field(
        None, alias="histogramReports"
    )
    account_index: Optional[Dict[str, Any]] = Field(None, alias="accountIndex")


class JobRequest(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")


class FailureReport(BaseModel):
    data: Optional[Dict[str, Any]] = None
    account_data: Optional[Dict[str, Any]] = Field(None, alias="accountData")
    day: Optional[int] = None
    month: Optional[int] = None
    year: Optional[int] = None


class Precision2(Enum):
    SINGLE = "SINGLE"
    DOUBLE = "DOUBLE"


class Operation1(Enum):
    SIMULATION = "SIMULATION"
    EMSIMULATION = "EMSIMULATION"
    MPI = "MPI"
    EMMPI = "EMMPI"
    MNMPI = "MNMPI"
    EMMNMPI = "EMMNMPI"
    MOEBIUS_MPI = "MOEBIUS_MPI"
    MOEBIUS_MNMPI = "MOEBIUS_MNMPI"
    OPENFOAM = "OPENFOAM"
    OPENFOAM_MNMPI = "OPENFOAM_MNMPI"
    REFLEX_MPI = "REFLEX_MPI"
    REFLEX_MNMPI = "REFLEX_MNMPI"
    SPARSELIZARD_MPI = "SPARSELIZARD_MPI"
    SPARSELIZARD_MNMPI = "SPARSELIZARD_MNMPI"
    ESTIMATE = "ESTIMATE"
    REVIEW = "REVIEW"
    BUILD = "BUILD"


class Preprocessor1(Enum):
    NONE = "NONE"
    MODELWRITER = "MODELWRITER"


class DayRequest(BaseModel):
    year: Optional[int] = Field(None, description="Number")
    month: Optional[int] = Field(None, description="Number")
    day: Optional[int] = Field(None, description="Number")
    calendar: Optional[datetime] = None


class HourlyBurnReport(BaseModel):
    hpcs: Optional[Dict[str, Any]] = None
    hours: Optional[Dict[str, Any]] = None


class AdminLiveJobsResponse(BaseModel):
    job_data: Optional[Dict[str, Any]] = Field(None, alias="jobData")


class SimulationProgress(BaseModel):
    simulation_id: Optional[str] = Field(None, alias="simulationId")
    progress: Optional[int] = None


class NodeReport(BaseModel):
    time_group_map: Optional[Dict[str, Any]] = Field(None, alias="timeGroupMap")
    node_type: Optional[str] = Field(None, alias="nodeType")


class StringListResponse(BaseModel):
    string_list: Optional[List[str]] = Field(None, alias="stringList")


class PerformanceReport(BaseModel):
    less_than_minute0: Optional[List[str]] = Field(None, alias="lessThanMinute0")
    less_than_minute1: Optional[List[str]] = Field(None, alias="lessThanMinute1")
    less_than_minute2: Optional[List[str]] = Field(None, alias="lessThanMinute2")
    less_than_minute3: Optional[List[str]] = Field(None, alias="lessThanMinute3")
    less_than_minute4: Optional[List[str]] = Field(None, alias="lessThanMinute4")
    less_than_minute5: Optional[List[str]] = Field(None, alias="lessThanMinute5")
    one_to_three_minutes0: Optional[List[str]] = Field(None, alias="oneToThreeMinutes0")
    one_to_three_minutes1: Optional[List[str]] = Field(None, alias="oneToThreeMinutes1")
    one_to_three_minutes2: Optional[List[str]] = Field(None, alias="oneToThreeMinutes2")
    one_to_three_minutes3: Optional[List[str]] = Field(None, alias="oneToThreeMinutes3")
    one_to_three_minutes4: Optional[List[str]] = Field(None, alias="oneToThreeMinutes4")
    one_to_three_minutes5: Optional[List[str]] = Field(None, alias="oneToThreeMinutes5")
    three_to_five_minutes0: Optional[List[str]] = Field(
        None, alias="threeToFiveMinutes0"
    )
    three_to_five_minutes1: Optional[List[str]] = Field(
        None, alias="threeToFiveMinutes1"
    )
    three_to_five_minutes2: Optional[List[str]] = Field(
        None, alias="threeToFiveMinutes2"
    )
    three_to_five_minutes3: Optional[List[str]] = Field(
        None, alias="threeToFiveMinutes3"
    )
    three_to_five_minutes4: Optional[List[str]] = Field(
        None, alias="threeToFiveMinutes4"
    )
    three_to_five_minutes5: Optional[List[str]] = Field(
        None, alias="threeToFiveMinutes5"
    )
    five_to_seven_minutes0: Optional[List[str]] = Field(
        None, alias="fiveToSevenMinutes0"
    )
    five_to_seven_minutes1: Optional[List[str]] = Field(
        None, alias="fiveToSevenMinutes1"
    )
    five_to_seven_minutes2: Optional[List[str]] = Field(
        None, alias="fiveToSevenMinutes2"
    )
    five_to_seven_minutes3: Optional[List[str]] = Field(
        None, alias="fiveToSevenMinutes3"
    )
    five_to_seven_minutes4: Optional[List[str]] = Field(
        None, alias="fiveToSevenMinutes4"
    )
    five_to_seven_minutes5: Optional[List[str]] = Field(
        None, alias="fiveToSevenMinutes5"
    )
    more_than_seven_minutes0: Optional[List[str]] = Field(
        None, alias="moreThanSevenMinutes0"
    )
    more_than_seven_minutes1: Optional[List[str]] = Field(
        None, alias="moreThanSevenMinutes1"
    )
    more_than_seven_minutes2: Optional[List[str]] = Field(
        None, alias="moreThanSevenMinutes2"
    )
    more_than_seven_minutes3: Optional[List[str]] = Field(
        None, alias="moreThanSevenMinutes3"
    )
    more_than_seven_minutes4: Optional[List[str]] = Field(
        None, alias="moreThanSevenMinutes4"
    )
    more_than_seven_minutes5: Optional[List[str]] = Field(
        None, alias="moreThanSevenMinutes5"
    )
    job_map: Optional[Dict[str, Any]] = Field(None, alias="jobMap")


class ContainerReport(BaseModel):
    time_group_map: Optional[Dict[str, Any]] = Field(None, alias="timeGroupMap")
    container_type: Optional[str] = Field(None, alias="containerType")


class HpcReport(BaseModel):
    time_group_map: Optional[Dict[str, Any]] = Field(None, alias="timeGroupMap")
    hpc_id: Optional[str] = Field(None, alias="hpcId")


class TimeGroup(BaseModel):
    group_id: Optional[str] = Field(None, alias="groupId")
    min_time: Optional[int] = Field(None, alias="minTime")
    max_time: Optional[int] = Field(None, alias="maxTime")


class TimeGroupReportRequest(BaseModel):
    start_day: Optional[int] = Field(None, alias="startDay", description="startDay")
    start_month: Optional[int] = Field(
        None, alias="startMonth", description="startMonth"
    )
    start_year: Optional[int] = Field(None, alias="startYear", description="startYear")
    end_day: Optional[int] = Field(None, alias="endDay", description="endDay")
    end_month: Optional[int] = Field(None, alias="endMonth", description="endMonth")
    end_year: Optional[int] = Field(None, alias="endYear", description="endYear")
    time_groups: Optional[List[TimeGroup]] = Field(None, alias="timeGroups")


class AccountSetEnterpriseRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    enterprise: Optional[bool] = None


class SimulationsRunningResponse(BaseModel):
    queued_simulations: Optional[int] = Field(None, alias="queuedSimulations")
    running_simulations: Optional[int] = Field(None, alias="runningSimulations")


class DateRangeRequest(BaseModel):
    start_day: Optional[int] = Field(None, alias="startDay", description="startDay")
    start_month: Optional[int] = Field(
        None, alias="startMonth", description="startMonth"
    )
    start_year: Optional[int] = Field(None, alias="startYear", description="startYear")
    end_day: Optional[int] = Field(None, alias="endDay", description="endDay")
    end_month: Optional[int] = Field(None, alias="endMonth", description="endMonth")
    end_year: Optional[int] = Field(None, alias="endYear", description="endYear")


class ItemIdListRequest(BaseModel):
    item_id_list: Optional[List[str]] = Field(None, alias="itemIdList")


class AccountSummaryResponse(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId")
    account_name: Optional[str] = Field(None, alias="accountName")
    plan_code: Optional[str] = Field(None, alias="planCode")
    core_hours_available: Optional[float] = Field(None, alias="coreHoursAvailable")


class AccountSetCoreAllowedRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    user_core_allowed: Optional[int] = Field(None, alias="userCoreAllowed")
    lead_core_allowed: Optional[int] = Field(None, alias="leadCoreAllowed")


class AccountSetRebateRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    rebate_rate: Optional[float] = Field(None, alias="rebateRate")


class AccountDockerTagUpdateRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    docker_tags: Optional[List[str]] = Field(None, alias="dockerTags")


class AccountPlanUpdateRequest(BaseModel):
    plan_code: Optional[str] = Field(None, alias="planCode")
    plan_name: Optional[str] = Field(None, alias="planName")
    periodicity: Optional[str] = None
    rate: Optional[float] = None
    core_hour_limit: Optional[float] = Field(None, alias="coreHourLimit")
    on_demand_rate: Optional[float] = Field(None, alias="onDemandRate")
    active: Optional[bool] = None
    public_to_solve: Optional[bool] = Field(None, alias="publicToSolve")
    public_to_portal: Optional[bool] = Field(None, alias="publicToPortal")
    public_to_beamtool: Optional[bool] = Field(None, alias="publicToBeamtool")


class AccountDeleteResponse(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    hash: Optional[str] = None
    summary: Optional[Dict[str, Any]] = None


class AccountDeleteRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    hash: Optional[str] = None


class ReleaseNote(BaseModel):
    release_note_id: Optional[str] = Field(
        None, alias="releaseNoteId", description="UUID"
    )
    create_date: Optional[datetime] = Field(None, alias="createDate")
    version: Optional[str] = None
    notes: Optional[str] = Field(None, description="string")


class ReleaseNoteAddRequest(BaseModel):
    version: Optional[str] = Field(None, description="str")
    notes: Optional[str] = Field(None, description="str")


class DockerTagCreateRequest(BaseModel):
    stage: Optional[str] = None
    init_container: Optional[str] = Field(None, alias="initContainer")
    driver_solver: Optional[str] = Field(None, alias="driverSolver")
    flex: Optional[str] = None
    reflex: Optional[str] = None
    moebius: Optional[str] = None
    open_foam: Optional[str] = Field(None, alias="openFoam")
    cad_conversion: Optional[str] = Field(None, alias="cadConversion")
    cad_interface: Optional[str] = Field(None, alias="cadInterface")
    flex_mesh: Optional[str] = Field(None, alias="flexMesh")
    reflex_mesh: Optional[str] = Field(None, alias="reflexMesh")
    moebius_mesh: Optional[str] = Field(None, alias="moebiusMesh")
    flex_estimate: Optional[str] = Field(None, alias="flexEstimate")
    reflex_estimate: Optional[str] = Field(None, alias="reflexEstimate")
    moebius_estimate: Optional[str] = Field(None, alias="moebiusEstimate")
    openfoam_estimate: Optional[str] = Field(None, alias="openfoamEstimate")
    post_processor: Optional[str] = Field(None, alias="postProcessor")
    simapi_notebook: Optional[str] = Field(None, alias="simapiNotebook")
    supervisor: Optional[str] = None


class Audit(BaseModel):
    audit_id: Optional[str] = Field(None, alias="auditId")
    object_id: Optional[str] = Field(None, alias="objectId")
    action_type: Optional[str] = Field(None, alias="actionType")
    user_id: Optional[str] = Field(None, alias="userId")
    action_description: Optional[str] = Field(None, alias="actionDescription")
    action_detail: Optional[str] = Field(None, alias="actionDetail")
    create_date: Optional[int] = Field(
        None, alias="createDate", description="1585700000000"
    )


class ActionType(Enum):
    API_REFERRAL_PORTAL_2 = "API_REFERRAL_PORTAL_2"
    API_REFERRAL_PORTAL_2_WIN = "API_REFERRAL_PORTAL_2_WIN"


class AuditActionTypeRequest(BaseModel):
    action_type: Optional[ActionType] = Field(None, alias="actionType")


class ObjectIdRequest(BaseModel):
    object_id: Optional[str] = Field(None, alias="objectId", description="UUID")


class AuthenticationResponse(BaseModel):
    id_token: Optional[str] = Field(None, alias="idToken")
    access_token: Optional[str] = Field(None, alias="accessToken")
    refresh_token: Optional[str] = Field(None, alias="refreshToken")
    expires_in: Optional[int] = Field(None, alias="expiresIn")


class LoginRequest(BaseModel):
    email_address: str = Field(..., alias="emailAddress")
    password: str
    mfa_token: Optional[int] = Field(None, alias="mfaToken")


class RefreshTokenRequest(BaseModel):
    refresh_token: Optional[str] = Field(None, alias="refreshToken")


class DestinationRequest(BaseModel):
    destination: str


class BlobType(Enum):
    BINCAD = "BINCAD"
    BREP = "BREP"
    CAD = "CAD"
    CADMETADATA = "CADMETADATA"
    CSV = "CSV"
    ESTIMATION = "ESTIMATION"
    ICON = "ICON"
    IMAGE = "IMAGE"
    LIST = "LIST"
    MESHAUTO = "MESHAUTO"
    MESHCUSTOM = "MESHCUSTOM"
    MESHSUMMARY = "MESHSUMMARY"
    MLDATA = "MLDATA"
    MLMODEL = "MLMODEL"
    MODELDB = "MODELDB"
    MODELERMETADATA = "MODELERMETADATA"
    RUNTIMEGRAPHIC = "RUNTIMEGRAPHIC"
    RSAKEYPUBLIC = "RSAKEYPUBLIC"
    RSAKEYPRIVATE = "RSAKEYPRIVATE"
    SIMAPI = "SIMAPI"
    SIMMETADATA = "SIMMETADATA"
    MATERIAL = "MATERIAL"
    THUMBNAIL = "THUMBNAIL"
    VISUALIZATION = "VISUALIZATION"
    ONSHAPE_ASSEMBLY_DEFINITION = "ONSHAPE_ASSEMBLY_DEFINITION"


class ObjectType1(Enum):
    PROJECT = "PROJECT"
    DESIGN = "DESIGN"
    DESIGNINSTANCE = "DESIGNINSTANCE"
    USER = "USER"
    JOB = "JOB"
    SIMULATION = "SIMULATION"


class Blob(BaseModel):
    blob_id: Optional[str] = Field(None, alias="blobId")
    account_id: Optional[str] = Field(None, alias="accountId")
    object_id: Optional[str] = Field(None, alias="objectId")
    hpc_id: Optional[str] = Field(None, alias="hpcId")
    blob_type: BlobType = Field(..., alias="blobType", description="String")
    blob_mime_type: Optional[str] = Field(None, alias="blobMimeType")
    blob_description: Optional[str] = Field(None, alias="blobDescription")
    blob_path: Optional[str] = Field(None, alias="blobPath")
    blob_title: Optional[str] = Field(None, alias="blobTitle")
    original_file_name: Optional[str] = Field(None, alias="originalFileName")
    file_size: Optional[int] = Field(None, alias="fileSize")
    create_date: Optional[int] = Field(None, alias="createDate")
    expiration_date: Optional[int] = Field(None, alias="expirationDate")
    object_type: ObjectType1 = Field(..., alias="objectType", description="String")
    parent_blob_id: Optional[str] = Field(None, alias="parentBlobId")
    hash: Optional[str] = None
    secondary_hash: Optional[str] = Field(None, alias="secondaryHash")
    user_id: Optional[str] = Field(None, alias="userId")
    blob_invalidated: Optional[bool] = Field(None, alias="blobInvalidated")


class BlobRequest(BaseModel):
    object_id: Optional[str] = Field(None, alias="objectId")
    blob_type: Optional[str] = Field(None, alias="blobType")
    object_type: Optional[str] = Field(None, alias="objectType")


class BlobIdRequest(BaseModel):
    blob_id: Optional[str] = Field(None, alias="blobId", description="UUID")


class Method(Enum):
    POST = "POST"
    GET = "GET"
    PUT = "PUT"
    DELETE = "DELETE"


class HttpRequest(BaseModel):
    method: Optional[Method] = Field(None, description="string")
    uri: Optional[str] = Field(None, description="string")
    headers: Optional[Dict[str, Any]] = None
    form_fields: Optional[Dict[str, Any]] = Field(None, alias="formFields")


class BlobInterfaceRequest(BaseModel):
    blob_id: Optional[str] = Field(None, alias="blobId", description="UUID")
    domain1: Optional[int] = None
    domain2: Optional[int] = None


class CouponRedeemable(BaseModel):
    coupon_redeemable_id: Optional[str] = Field(None, alias="couponRedeemableId")
    coupon_master_id: Optional[str] = Field(None, alias="couponMasterId")
    coupon_code: Optional[str] = Field(None, alias="couponCode")
    redeemed_core_hours: Optional[float] = Field(None, alias="redeemedCoreHours")
    redeemed_type: Optional[str] = Field(None, alias="redeemedType")
    var_account_id: Optional[str] = Field(None, alias="var_accountId")
    account_id: Optional[str] = Field(None, alias="accountId")
    account_ledger_id: Optional[str] = Field(None, alias="accountLedgerId")
    redeemed_date: Optional[datetime] = Field(None, alias="redeemedDate")
    void_date: Optional[datetime] = Field(None, alias="voidDate")
    expire_date: Optional[datetime] = Field(None, alias="expireDate")
    expired: Optional[bool] = None
    user_id: Optional[str] = Field(None, alias="userId")
    create_user_id: Optional[str] = Field(None, alias="createUserId")
    create_date: Optional[datetime] = Field(None, alias="createDate")


class CouponType(Enum):
    VAR = "VAR"
    SINGLETON = "SINGLETON"
    MULTIPLE = "MULTIPLE"


class CouponMasterCreateRequest(BaseModel):
    coupon_type: Optional[CouponType] = Field(None, alias="couponType")
    core_hour_amount: Optional[float] = Field(None, alias="coreHourAmount")
    percentage: Optional[float] = None
    var_account_id: Optional[str] = Field(
        None, alias="var_accountId", description="UUID"
    )
    max_redeemable_times: Optional[int] = Field(None, alias="maxRedeemableTimes")
    expired_date: Optional[datetime] = Field(None, alias="expiredDate")
    locked_days: Optional[int] = Field(None, alias="lockedDays")
    start_date: Optional[datetime] = Field(None, alias="startDate")
    coupon_name: Optional[str] = Field(None, alias="couponName")
    coupon_description: Optional[str] = Field(None, alias="couponDescription")


class CouponMasterUpdateRequest(BaseModel):
    coupon_master_id: Optional[str] = Field(
        None, alias="couponMasterId", description="UUID"
    )
    core_hour_amount: Optional[float] = Field(None, alias="coreHourAmount")
    percentage: Optional[float] = None
    max_redeemable_times: Optional[int] = Field(None, alias="maxRedeemableTimes")
    expire_date: Optional[datetime] = Field(None, alias="expireDate")
    locked_days: Optional[int] = Field(None, alias="lockedDays")
    start_date: Optional[datetime] = Field(None, alias="startDate")
    coupon_name: Optional[str] = Field(None, alias="couponName")
    coupon_description: Optional[str] = Field(None, alias="couponDescription")


class CouponMasterRequest(BaseModel):
    coupon_master_id: Optional[str] = Field(
        None, alias="couponMasterId", description="UUID"
    )


class CouponMasterLoadRequest(BaseModel):
    coupon_master_id: Optional[str] = Field(
        None, alias="couponMasterId", description="UUID"
    )
    included_redeemable: Optional[bool] = Field(None, alias="includedRedeemable")


class CouponMasterListRequest(BaseModel):
    var_account_id: Optional[str] = Field(
        None, alias="var_accountId", description="UUID"
    )
    include_expired: Optional[bool] = Field(None, alias="includeExpired")


class CouponRedeemableCreateRequest(BaseModel):
    coupon_master_id: Optional[str] = Field(
        None, alias="couponMasterId", description="UUID"
    )
    account_id: Optional[str] = Field(None, alias="accountId")
    expire_date: Optional[datetime] = Field(None, alias="expireDate")


class CouponRedeemableRequest(BaseModel):
    coupon_redeemable_id: Optional[str] = Field(
        None, alias="couponRedeemableId", description="UUID"
    )


class CouponRedeemableListRequest(BaseModel):
    coupon_master_id: Optional[str] = Field(
        None, alias="couponMasterId", description="UUID"
    )
    var_account_id: Optional[str] = Field(
        None, alias="var_accountId", description="UUID"
    )
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    redeemed_only: Optional[bool] = Field(None, alias="redeemedOnly")
    not_redeemed_only: Optional[bool] = Field(None, alias="notRedeemedOnly")


class CouponRedeemRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    coupon_code: Optional[str] = Field(None, alias="couponCode", description="String")


class DesignInstanceFilePath(BaseModel):
    file_name: str = Field(..., alias="fileName", description="UUID")
    project_id: Optional[str] = Field(None, alias="projectId")
    design_instance_id: Optional[str] = Field(None, alias="designInstanceId")
    directory: Optional[str] = None
    path: Optional[str] = None


class DesignInstanceFileRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None, alias="designInstanceId", description="UUID"
    )
    shared_file: Optional[bool] = Field(None, alias="sharedFile")
    directory: Optional[str] = None
    file_name: Optional[str] = Field(None, alias="fileName")


class JobFile(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")
    file_name: Optional[str] = Field(None, alias="fileName")
    file_size: Optional[int] = Field(None, alias="fileSize")
    file_date: Optional[int] = Field(
        None, alias="fileDate", description="1585700000000"
    )
    file_hash: Optional[str] = Field(
        None, alias="fileHash", description="Hex MD5 hash value"
    )
    directory: Optional[bool] = None
    download_request: Optional[HttpRequest] = Field(None, alias="downloadRequest")


class DesignInstanceFileListRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None, alias="designInstanceId", description="UUID"
    )
    include_shared_file: Optional[bool] = Field(None, alias="includeSharedFile")
    directory: Optional[str] = None
    include_sub_directory: Optional[bool] = Field(None, alias="includeSubDirectory")


class Physics1(Enum):
    ACOUSTIC = "ACOUSTIC"
    AEROACOUSTIC = "AEROACOUSTIC"
    ELECTROMAGNETIC = "ELECTROMAGNETIC"
    ELECTROMECHANICAL = "ELECTROMECHANICAL"
    FLUID = "FLUID"
    FLUIDELECTROMECHANICAL = "FLUIDELECTROMECHANICAL"
    FLUIDELECTROTHERMOMECHANICAL = "FLUIDELECTROTHERMOMECHANICAL"
    FLUIDMECHANICAL = "FLUIDMECHANICAL"
    FLUIDTHERMAL = "FLUIDTHERMAL"
    FLUIDTHERMOMECHANICAL = "FLUIDTHERMOMECHANICAL"
    MECHANICAL = "MECHANICAL"
    THERMAL = "THERMAL"
    THERMOELECTROMAGNETIC = "THERMOELECTROMAGNETIC"
    THERMOMECHANICAL = "THERMOMECHANICAL"


class DesignCreateRequest(BaseModel):
    project_id: Optional[str] = Field(None, alias="projectId", description="UUID")
    design_title: Optional[str] = Field(None, alias="designTitle")
    design_description: Optional[str] = Field(None, alias="designDescription")
    design_goal: Optional[str] = Field(None, alias="designGoal")
    physics: Optional[Physics1] = None


class DesignCreateResponse(BaseModel):
    design_id: Optional[str] = Field(None, alias="designId", description="UUID")
    project_id: Optional[str] = Field(None, alias="projectId", description="UUID")
    user_id: Optional[str] = Field(None, alias="userId", description="UUID")
    design_title: Optional[str] = Field(None, alias="designTitle")
    design_description: Optional[str] = Field(None, alias="designDescription")
    design_goal: Optional[str] = Field(None, alias="designGoal")
    physics: Optional[Physics1] = None
    create_date: Optional[int] = Field(None, alias="createDate")
    parent_design_id: Optional[int] = Field(None, alias="parentDesignId")
    design_instance_list: Optional[List[DesignInstance]] = Field(
        None, alias="designInstanceList"
    )
    archived: Optional[bool] = Field(None, alias="archived")


class DesignCloneRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None, alias="designInstanceId", description="UUID"
    )
    cloned_design_title: Optional[str] = Field(None, alias="clonedDesignTitle")
    cloned_instance_title: Optional[str] = Field(None, alias="clonedInstanceTitle")


class InstanceCreateRequest(BaseModel):
    design_id: Optional[str] = Field(None, alias="designId", description="UUID")
    design_instance_title: Optional[str] = Field(None, alias="designInstanceTitle")
    description: Optional[str] = None
    design_instance_id: Optional[str] = Field(
        None, alias="designInstanceId", description="UUID"
    )
    design_instance_hash: Optional[str] = Field(None, alias="designInstanceHash")


class DesignArchiveRequest(BaseModel):
    design_id: Optional[str] = Field(None, alias="designId", description="UUID")
    archive: Optional[bool] = None


class DesignInstanceArchiveRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None, alias="designInstanceId", description="UUID"
    )
    archive: Optional[bool] = None


class DesignInstanceRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None, alias="designInstanceId", description="UUID"
    )


class Mesh(BaseModel):
    mesh_id: Optional[str] = Field(None, alias="meshId")
    user_id: Optional[str] = Field(None, alias="userId")
    account_id: Optional[str] = Field(None, alias="accountId")
    design_instance_id: Optional[str] = Field(None, alias="designInstanceId")
    design_id: Optional[str] = Field(None, alias="designId")
    project_id: Optional[str] = Field(None, alias="projectId")
    life_time_limit: Optional[int] = Field(None, alias="lifeTimeLimit")
    create_date: Optional[int] = Field(
        None, alias="createDate", description="1585700000000"
    )
    start_date: Optional[datetime] = Field(None, alias="startDate")
    end_date: Optional[datetime] = Field(None, alias="endDate")
    solver: Optional[str] = None
    blob_id: Optional[str] = Field(None, alias="blobId")
    docker_tag_id: Optional[str] = Field(None, alias="dockerTagId")
    custom: Optional[bool] = None
    required_blobs: Optional[List[str]] = Field(None, alias="requiredBlobs")
    final_status: Optional[str] = Field(None, alias="finalStatus")


class Solver(Enum):
    FLEX = "FLEX"
    REFLEX = "REFLEX"
    OPENFOAM = "OPENFOAM"
    MOEBIUS = "MOEBIUS"


class MeshCreateRequest(BaseModel):
    design_instance_id: str = Field(..., alias="designInstanceId", description="UUID")
    blob_id: str = Field(..., alias="blobId", description="UUID")
    solver: Optional[Solver] = None
    docker_tag: Optional[str] = Field(None, alias="dockerTag", description="string")
    docker_tag_id: Optional[str] = Field(None, alias="dockerTagId", description="UUID")
    python_hash: Optional[str] = Field(None, alias="pythonHash", description="string")
    mesh_hash: Optional[str] = Field(None, alias="meshHash", description="string")
    surface_fine_cell_size: Optional[str] = Field(None, alias="surfaceFineCellSize")
    surface_course_cell_size: Optional[str] = Field(None, alias="surfaceCourseCellSize")
    interior_cell_size: Optional[str] = Field(None, alias="interiorCellSize")
    cell_gradation: Optional[str] = Field(None, alias="cellGradation")
    required_blobs: Optional[List[str]] = Field(None, alias="requiredBlobs")


class NotebookResponse(BaseModel):
    url: Optional[str] = None
    secret: Optional[str] = None
    ch_cost_per_hour: Optional[float] = Field(None, alias="chCostPerHour")


class NotebookStartRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None, alias="designInstanceId", description="UUID"
    )
    docker_tag_id: Optional[str] = Field(None, alias="dockerTagId", description="UUID")


class Solver1(Enum):
    FLEX = "FLEX"
    REFLEX = "REFLEX"
    OPENFOAM = "OPENFOAM"
    MOEBIUS = "MOEBIUS"


class Precision3(Enum):
    DOUBLE = "DOUBLE"
    SINGLE = "SINGLE"


class AnalysisCreateRequest(BaseModel):
    design_instance_id: str = Field(..., alias="designInstanceId", description="UUID")
    blob_id: str = Field(..., alias="blobId", description="UUID")
    analysis_type: Optional[str] = Field(None, alias="analysisType")
    solver: Optional[Solver1] = None
    time_duration: Optional[int] = Field(None, alias="timeDuration")
    time_step: Optional[int] = Field(None, alias="timeStep")
    precision: Precision3 = Field(..., description="string")
    init_job: Optional[bool] = Field(None, alias="initJob", description="Boolean")
    docker_tag: Optional[str] = Field(None, alias="dockerTag", description="string")
    docker_tag_id: Optional[str] = Field(None, alias="dockerTagId", description="UUID")
    python_hash: Optional[str] = Field(None, alias="pythonHash", description="string")
    mesh_hash: Optional[str] = Field(None, alias="meshHash", description="string")
    required_blobs: Optional[List[str]] = Field(None, alias="requiredBlobs")
    physics_types: Optional[List[str]] = Field(None, alias="physicsTypes")


class AnalysisRequest(BaseModel):
    analysis_id: str = Field(..., alias="analysisId", description="UUID")


class AnalysisSubmitRequest(BaseModel):
    analysis_id: str = Field(..., alias="analysisId", description="UUID")
    estimate_hash: Optional[str] = Field(None, alias="estimateHash")
    job_name: Optional[str] = Field(None, alias="jobName")
    number_of_cores: Optional[int] = Field(None, alias="numberOfCores")
    number_of_parts: Optional[int] = Field(None, alias="numberOfParts")
    estimated_run_time: Optional[int] = Field(None, alias="estimatedRunTime")
    estimated_memory: Optional[int] = Field(None, alias="estimatedMemory")
    parameters: Optional[Dict[str, Any]] = None
    console_parameters: Optional[List[str]] = Field(None, alias="consoleParameters")
    required_blobs: Optional[List[str]] = Field(None, alias="requiredBlobs")
    core_hour_estimate: Optional[float] = Field(None, alias="coreHourEstimate")
    string_to_hash: Optional[str] = Field(None, alias="stringToHash")
    string_to_hash_extra: Optional[str] = Field(None, alias="stringToHashExtra")


class AnalysisSearchRequest(BaseModel):
    design_instance_id: str = Field(..., alias="designInstanceId", description="UUID")
    python_hash: Optional[str] = Field(None, alias="pythonHash", description="string")


class DesignBlobRequest(BaseModel):
    design_id: Optional[str] = Field(None, alias="designId")
    blob_id: Optional[str] = Field(None, alias="blobId")


class DesignRequest(BaseModel):
    design_id: Optional[str] = Field(None, alias="designId", description="UUID")


class DesignUpdateRequest(BaseModel):
    design_id: Optional[str] = Field(None, alias="designId", description="UUID")
    design_title: Optional[str] = Field(None, alias="designTitle")
    design_description: Optional[str] = Field(None, alias="designDescription")
    design_goal: Optional[str] = Field(None, alias="designGoal")


class DesignUpdateTitleRequest(BaseModel):
    design_id: Optional[str] = Field(None, alias="designId", description="UUID")
    design_title: Optional[str] = Field(None, alias="designTitle")


class DesignUpdateGoalRequest(BaseModel):
    design_id: Optional[str] = Field(None, alias="designId", description="UUID")
    design_goal: Optional[str] = Field(None, alias="designGoal")


class MeshIdRequest(BaseModel):
    mesh_id: Optional[str] = Field(None, alias="meshId", description="UUID")


class DesignUpdateDescriptionRequest(BaseModel):
    design_id: Optional[str] = Field(None, alias="designId", description="UUID")
    design_description: Optional[str] = Field(None, alias="designDescription")


class InstanceUpdateTitleRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None, alias="designInstanceId", description="UUID"
    )
    design_instance_title: Optional[str] = Field(None, alias="designInstanceTitle")
    description: Optional[str] = None


class UserIdGroupId(BaseModel):
    user_id: Optional[str] = Field(None, alias="userId", description="UUID")
    group_id: Optional[str] = Field(None, alias="groupId", description="UUID")


class GroupCreateRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    group_name: Optional[str] = Field(None, alias="groupName")
    user_id_list: Optional[List[str]] = Field(None, alias="userIdList")


class GroupUserRequest(BaseModel):
    group_id: Optional[str] = Field(None, alias="groupId", description="UUID")
    user_id_list: Optional[List[str]] = Field(None, alias="userIdList")


class GroupRequest(BaseModel):
    group_id: Optional[str] = Field(None, alias="groupId", description="UUID")


class FilePath(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")
    simulation_id: Optional[str] = Field(None, alias="simulationId", description="UUID")
    file_name: str = Field(..., alias="fileName", description="UUID")
    path: Optional[str] = None


class AESKey(BaseModel):
    plaintext_key: Optional[str] = Field(
        None, alias="plaintextKey", description="base64 encoded byte[]"
    )


class FileAlias(BaseModel):
    file_name: Optional[str] = Field(None, alias="fileName")
    file_alias: Optional[str] = Field(None, alias="fileAlias")


class JobGetKeyResponse(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")
    key: Optional[AESKey] = None


class TemporaryCredential(BaseModel):
    key: Optional[str] = None
    secret: Optional[str] = None
    session_id: Optional[str] = Field(None, alias="sessionId")


class Precision4(Enum):
    SINGLE = "SINGLE"
    DOUBLE = "DOUBLE"


class Estimate(BaseModel):
    estimate_id: Optional[str] = Field(None, alias="estimateId")
    job_id: Optional[str] = Field(None, alias="jobId")
    user_id: Optional[str] = Field(None, alias="userId")
    life_time_limit: Optional[int] = Field(None, alias="lifeTimeLimit")
    create_date: Optional[int] = Field(
        None, alias="createDate", description="1585700000000"
    )
    cipher_salt: Optional[str] = Field(None, alias="cipherSalt", description="UUID")
    precision: Optional[Precision4] = None
    solver: Optional[str] = None
    docker_tag_id: Optional[str] = Field(None, alias="dockerTagId")
    blob_id: Optional[str] = Field(None, alias="blobId")
    application: Optional[str] = None
    required_blobs: Optional[List[str]] = Field(None, alias="requiredBlobs")


class Solver2(Enum):
    FLEX = "FLEX"
    REFLEX = "REFLEX"
    OPENFOAM = "OPENFOAM"
    MOEBIUS = "MOEBIUS"


class Precision5(Enum):
    DOUBLE = "DOUBLE"
    SINGLE = "SINGLE"


class JobEstimateRequest(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")
    blob_id: Optional[str] = Field(None, alias="blobId", description="UUID")
    solver: Optional[Solver2] = None
    precision: Precision5 = Field(..., description="string")
    docker_tag: Optional[str] = Field(None, alias="dockerTag", description="string")
    docker_tag_id: Optional[str] = Field(None, alias="dockerTagId", description="UUID")
    application: Optional[str] = None
    required_blobs: Optional[List[str]] = Field(None, alias="requiredBlobs")


class SimulationRestartRequest(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")
    simulation_id: Optional[str] = Field(None, alias="simulationId", description="UUID")
    time_to_end: Optional[str] = Field(
        None, alias="timeToEnd", description="seconds as scientific notation"
    )
    new_ram_estimate: Optional[int] = Field(
        None, alias="newRamEstimate", description="updated ram estimate in MBs"
    )
    restart_file: Optional[str] = Field(
        None, alias="restartFile", description="file used to seed simulation"
    )


class JobRestartRequest(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")
    simulation_parameters: Optional[List[str]] = Field(
        None, alias="simulationParameters"
    )


class JobLoadRequest(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")
    exclude_simulation: Optional[bool] = Field(None, alias="excludeSimulation")
    exclude_job_status: Optional[bool] = Field(None, alias="excludeJobStatus")


class JobCostResponse(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="float")
    job_cost: Optional[float] = Field(None, alias="jobCost")


class JobCreateResponse(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")


class JobInitRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    hpc_id: Optional[str] = Field(None, alias="hpcId", description="UUID")


class JobListLoadRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    start_date: Optional[datetime] = Field(None, alias="startDate")
    end_date: Optional[datetime] = Field(None, alias="endDate")
    max_num: Optional[int] = Field(None, alias="maxNum")


class JobListPageRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    page_number: Optional[int] = Field(None, alias="pageNumber")
    page_size: Optional[int] = Field(None, alias="pageSize")
    include_created: Optional[bool] = Field(None, alias="includeCreated")
    include_queued: Optional[bool] = Field(None, alias="includeQueued")
    include_finished: Optional[bool] = Field(None, alias="includeFinished")
    include_children_account: Optional[bool] = Field(
        None, alias="includeChildrenAccount"
    )
    project_id: Optional[str] = Field(None, alias="projectId")
    design_id: Optional[str] = Field(None, alias="designId")
    design_instance_id: Optional[str] = Field(None, alias="designInstanceId")
    include_job_status: Optional[bool] = Field(None, alias="includeJobStatus")
    start_date: Optional[datetime] = Field(None, alias="startDate")
    end_date: Optional[datetime] = Field(None, alias="endDate")
    include_children_jobs: Optional[bool] = Field(None, alias="includeChildrenJobs")
    project_job_only: Optional[bool] = Field(None, alias="projectJobOnly")
    no_project_job_only: Optional[bool] = Field(None, alias="noProjectJobOnly")
    include_project_access_jobs: Optional[bool] = Field(
        None, alias="includeProjectAccessJobs"
    )
    job_status: Optional[str] = Field(None, alias="jobStatus")
    include_combined: Optional[bool] = Field(None, alias="includeCombined")


class JobProgress(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId")
    simulation_progress_list: Optional[List[SimulationProgress]] = Field(
        None, alias="simulationProgressList"
    )


class Status(Enum):
    NOTFOUND = "NOTFOUND"
    STOPPED = "STOPPED"


class StopSimulationResponse(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId")
    simulation_id: Optional[str] = Field(None, alias="simulationId")
    status: Optional[Status] = None


class SimulationRequest(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")
    simulation_id: Optional[str] = Field(None, alias="simulationId", description="UUID")


class Status1(Enum):
    NOTFOUND = "NOTFOUND"
    PAUSED = "PAUSED"
    NOTPAUSED = "NOTPAUSED"


class PauseSimulationResponse(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId")
    simulation_id: Optional[str] = Field(None, alias="simulationId")
    status: Optional[Status1] = None
    last_simulation_status: Optional[str] = Field(None, alias="lastSimulationStatus")


class JobAccess(BaseModel):
    cognito_email: Optional[str] = Field(
        None, alias="cognitoEmail", description="email"
    )
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")


class JobAccessRequest(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")
    cognito_email: Optional[str] = Field(
        None, alias="cognitoEmail", description="email"
    )


class JobArchiveResponse(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")


class PostProcessorResponse(BaseModel):
    url: Optional[str] = None
    secret: Optional[str] = None
    ch_cost_per_hour: Optional[float] = Field(None, alias="chCostPerHour")


class ParaviewResponse(BaseModel):
    path: Optional[str] = None
    port: Optional[str] = None
    private_key: Optional[str] = Field(None, alias="privateKey")
    cost_per_hour: Optional[float] = Field(None, alias="costPerHour")


class JobPostProcessorRequest(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")
    docker_tag_id: Optional[str] = Field(None, alias="dockerTagId", description="UUID")


class Filter(BaseModel):
    filter_by: Optional[str] = Field(None, alias="filterBy")
    min_value: Optional[float] = Field(None, alias="minValue")
    max_value: Optional[float] = Field(None, alias="maxValue")
    text_match: Optional[str] = Field(None, alias="textMatch")


class SimulationListPageRequest(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")
    page_number: Optional[int] = Field(None, alias="pageNumber")
    page_size: Optional[int] = Field(None, alias="pageSize")
    sort_by: Optional[str] = Field(None, alias="sortBy")
    descending_sort: Optional[bool] = Field(None, alias="descendingSort")
    filter_by_status: Optional[str] = Field(None, alias="filterByStatus")
    filters: Optional[List[Filter]] = None


class JobUpdateRequest(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")
    job_name: Optional[str] = Field(None, alias="jobName", description="new job name")


class Material(BaseModel):
    material_id: Optional[str] = Field(None, alias="materialId")
    account_id: Optional[str] = Field(None, alias="accountId")
    user_id: Optional[str] = Field(None, alias="userId")
    material_title: Optional[str] = Field(None, alias="materialTitle")
    material_category: Optional[str] = Field(None, alias="materialCategory")
    material_format: Optional[str] = Field(None, alias="materialFormat")
    material_model: Optional[str] = Field(None, alias="materialModel")
    solver_used_name: Optional[str] = Field(None, alias="solverUsedName")
    material_description: Optional[str] = Field(None, alias="materialDescription")
    plain_json: Optional[str] = Field(None, alias="plainJson")
    create_date: Optional[int] = Field(
        None, alias="createDate", description="1585700000000"
    )
    color: Optional[str] = None
    hidden: Optional[bool] = None
    version: Optional[int] = None
    public: Optional[bool] = None


class MaterialCreateRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    material_title: Optional[str] = Field(None, alias="materialTitle")
    material_category: Optional[str] = Field(None, alias="materialCategory")
    material_format: Optional[str] = Field(None, alias="materialFormat")
    solver_used_name: Optional[str] = Field(None, alias="solverUsedName")
    material_model: Optional[str] = Field(None, alias="materialModel")
    material_description: Optional[str] = Field(None, alias="materialDescription")
    material_json: Optional[str] = Field(None, alias="materialJson")
    color: Optional[str] = None
    public: Optional[bool] = Field(None, description="Boolean")


class MaterialRequest(BaseModel):
    material_id: Optional[str] = Field(None, alias="materialId", description="UUID")


class ChatSession(BaseModel):
    chat_session_id: Optional[str] = Field(
        None, alias="chatSessionId", description="UUID"
    )
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    project_id: Optional[str] = Field(None, alias="projectId")
    user_id: Optional[str] = Field(None, alias="userId", description="UUID")
    chat_type: Optional[str] = Field(None, alias="chatType")
    create_date: Optional[int] = Field(
        None, alias="createDate", description="1585700000000"
    )
    end_date: Optional[int] = Field(None, alias="endDate", description="1585700000000")


class ChatStartSessionRequest(BaseModel):
    chat_type: Optional[str] = Field(None, alias="chatType")
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    project_id: Optional[str] = Field(None, alias="projectId")
    invited_user_ids: Optional[List[str]] = Field(None, alias="invitedUserIds")


class ChatSessionUser(BaseModel):
    chat_session_id: Optional[str] = Field(
        None, alias="chatSessionId", description="UUID"
    )
    user_id: Optional[str] = Field(None, alias="userId", description="UUID")
    join_date: Optional[int] = Field(
        None, alias="joinDate", description="1585700000000"
    )
    left_date: Optional[int] = Field(
        None, alias="leftDate", description="1585700000000"
    )


class ChatBaseRequest(BaseModel):
    chat_session_id: Optional[str] = Field(
        None, alias="chatSessionId", description="UUID"
    )


class ChatInvitationRequest(BaseModel):
    chat_session_id: Optional[str] = Field(
        None, alias="chatSessionId", description="UUID"
    )
    invited_user_ids: Optional[List[str]] = Field(None, alias="invitedUserIds")


class ChatSessionMessage(BaseModel):
    chat_session_message_id: Optional[str] = Field(
        None, alias="chatSessionMessageId", description="UUID"
    )
    chat_session_id: Optional[str] = Field(
        None, alias="chatSessionId", description="UUID"
    )
    create_date: Optional[int] = Field(
        None, alias="createDate", description="1585700000000"
    )
    user_id: Optional[str] = Field(None, alias="userId", description="UUID")
    content: Optional[int] = Field(None, description="String")


class ChatSendRequest(BaseModel):
    chat_session_id: Optional[str] = Field(
        None, alias="chatSessionId", description="UUID"
    )
    message: Optional[str] = Field(None, description="String")


class Notification(BaseModel):
    notification_id: Optional[str] = Field(
        None, alias="notificationId", description="UUID"
    )
    object_id: Optional[str] = Field(None, alias="objectId", description="UUID")
    user_id: Optional[str] = Field(None, alias="userId", description="UUID")
    object_type: Optional[str] = Field(None, alias="objectType")
    immediate_delivery: Optional[bool] = Field(None, alias="immediateDelivery")
    content: Optional[str] = None
    create_date: Optional[int] = Field(
        None, alias="createDate", description="1585700000000"
    )
    start_date: Optional[datetime] = Field(None, alias="startDate")
    end_date: Optional[int] = Field(None, alias="endDate", description="1585700000000")


class NotificationAddRequest(BaseModel):
    object_type: Optional[str] = Field(None, alias="objectType")
    object_id: Optional[str] = Field(None, alias="objectId")
    content: Optional[str] = None
    invited_user_ids: Optional[List[str]] = Field(None, alias="invitedUserIds")
    immediate_delivery: Optional[bool] = Field(None, alias="immediateDelivery")
    start_date: Optional[datetime] = Field(None, alias="startDate")
    end_date: Optional[datetime] = Field(None, alias="endDate")


class NotificationEndRequest(BaseModel):
    notification_id: Optional[str] = Field(None, alias="notificationId")
    end_date: Optional[datetime] = Field(None, alias="endDate")


class NotificationBaseRequest(BaseModel):
    notification_id: Optional[str] = Field(None, alias="notificationId")


class NotificationObjectRequest(BaseModel):
    object_id: Optional[str] = Field(None, alias="objectId")
    object_type: Optional[str] = Field(None, alias="objectType")


class NotificationAnnouncementRequest(BaseModel):
    exclude_acknowledged: Optional[bool] = Field(None, alias="excludeAcknowledged")


class MessageTransaction(BaseModel):
    message_transaction_id: Optional[str] = Field(None, alias="messageTransactionId")
    parent_transaction_id: Optional[str] = Field(None, alias="parentTransactionId")
    message_id: Optional[str] = Field(None, alias="messageId")
    user_id: Optional[str] = Field(None, alias="userId")
    sent_date: Optional[int] = Field(
        None, alias="sentDate", description="1585700000000"
    )
    read_date: Optional[int] = Field(
        None, alias="readDate", description="1585700000000"
    )


class SendMessageRequest(BaseModel):
    subject: Optional[str] = None
    content: Optional[str] = None
    object_type: Optional[str] = Field(None, alias="objectType")
    object_id: Optional[str] = Field(None, alias="objectId")
    user_ids: Optional[List[str]] = Field(None, alias="userIds")


class Message(BaseModel):
    message_id: Optional[str] = Field(None, alias="messageId")
    user_id: Optional[str] = Field(None, alias="userId")
    object_id: Optional[str] = Field(None, alias="objectId")
    object_type: Optional[str] = Field(None, alias="objectType")
    subject: Optional[str] = None
    content: Optional[str] = None


class ReadMessageRequest(BaseModel):
    message_id: Optional[str] = Field(None, alias="messageId")


class ObjectMessageRequest(BaseModel):
    object_type: str = Field(..., alias="objectType")
    object_id: str = Field(..., alias="objectId")


class OnshapeWebhookModelChangeRequest(BaseModel):
    timestamp: Optional[datetime] = None
    event: Optional[str] = None
    workspace_id: Optional[str] = Field(None, alias="workspaceId")
    element_id: Optional[str] = Field(None, alias="elementId")
    webhook_id: Optional[str] = Field(None, alias="webhookId")
    message_id: Optional[str] = Field(None, alias="messageId")
    data: Optional[str] = None
    document_id: Optional[str] = Field(None, alias="documentId")
    version_id: Optional[str] = Field(None, alias="versionId")


class TreeItemOwner(BaseModel):
    state: Optional[int] = None
    image: Optional[str] = None
    href: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    accept_ownership_transfer: Optional[bool] = Field(
        None, alias="acceptOwnershipTransfer"
    )
    is_enterprise_owned_resource: Optional[bool] = Field(
        None, alias="isEnterpriseOwnedResource"
    )
    type: Optional[int] = None


class OnshapeFolderListPageRequest(BaseModel):
    tree_href: Optional[str] = Field(None, alias="treeHref")
    page_number: Optional[int] = Field(None, alias="pageNumber")
    page_size: Optional[int] = Field(None, alias="pageSize")


class Number(BaseModel):
    pass


class PartsGetPartsResponsePartsAppearanceColor(BaseModel):
    red: Optional[Number] = None
    blue: Optional[Number] = None
    green: Optional[Number] = None


class PartsGetPartsResponsePartsMaterialProperties(BaseModel):
    name: Optional[str] = None
    units: Optional[str] = None
    description: Optional[str] = None
    value: Optional[Number] = None


class DocumentsGetDocumentsResponseItemsCreatedBy(BaseModel):
    name: Optional[str] = None
    id: Optional[str] = None
    href: Optional[str] = None


class DocumentsGetDocumentsResponseItemsDefaultWorkspace(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    href: Optional[str] = None


class DocumentsGetDocumentsResponseItemsModifiedBy(BaseModel):
    name: Optional[str] = None
    id: Optional[str] = None
    href: Optional[str] = None


class DocumentsGetDocumentsResponseItemsOwner(BaseModel):
    type: Optional[Number] = None
    name: Optional[str] = None
    id: Optional[str] = None
    href: Optional[str] = None


class DocumentsGetDocumentsResponseItemsThumbnailSizes(BaseModel):
    size: Optional[str] = None
    media_type: Optional[str] = Field(None, alias="mediaType")
    href: Optional[str] = None
    view_orientation: Optional[str] = Field(None, alias="viewOrientation")
    render_mode: Optional[str] = Field(None, alias="renderMode")


class OnshapeDocumentSearchRequest(BaseModel):
    query_string: Optional[str] = Field(None, alias="queryString")
    offset: Optional[float] = None


class OnshapeDocumentRequest(BaseModel):
    document_id: Optional[str] = Field(None, alias="documentId")


class WvmType(Enum):
    WORKSPACE = "WORKSPACE"
    VERSION = "VERSION"
    MICROVERSION = "MICROVERSION"


class OnshapeDocumentElementRequest(BaseModel):
    document_id: Optional[str] = Field(None, alias="documentId")
    wvm_type: WvmType = Field(..., alias="wvmType")
    wvm_id: str = Field(..., alias="wvmId")


class DocumentsGetElementListResponseElementsThumbnailInfoSizes(BaseModel):
    size: Optional[str] = None
    media_type: Optional[str] = Field(None, alias="mediaType")
    href: Optional[str] = None


class EnumOption(BaseModel):
    option: Optional[str] = None
    option_name: Optional[str] = Field(None, alias="optionName")


class WvmType1(Enum):
    WORKSPACE = "WORKSPACE"
    VERSION = "VERSION"
    MICROVERSION = "MICROVERSION"


class OnshapeDocumentConfigurationRequest(BaseModel):
    document_id: Optional[str] = Field(None, alias="documentId")
    wvm_type: WvmType1 = Field(..., alias="wvmType")
    wvm_id: str = Field(..., alias="wvmId")
    element_id: Optional[str] = Field(None, alias="elementId")


class WvType(Enum):
    WORKSPACE = "WORKSPACE"
    VERSION = "VERSION"


class OnshapeImportPartRequest(BaseModel):
    document_id: Optional[str] = Field(None, alias="documentId")
    design_id: Optional[str] = Field(None, alias="designId")
    element_id: Optional[str] = Field(None, alias="elementId")
    part_id: Optional[str] = Field(None, alias="partId")
    configuration: Optional[Dict[str, Any]] = None
    preferred_file_name: Optional[str] = Field(None, alias="preferredFileName")
    docker_tag_id: Optional[str] = Field(None, alias="dockerTagId")
    wv_type: Optional[WvType] = Field(None, alias="wvType")
    wv_id: Optional[str] = Field(None, alias="wvId")


class WvType1(Enum):
    WORKSPACE = "WORKSPACE"
    VERSION = "VERSION"


class OnshapeImportAssemblyRequest(BaseModel):
    document_id: Optional[str] = Field(None, alias="documentId")
    design_id: Optional[str] = Field(None, alias="designId")
    element_id: Optional[str] = Field(None, alias="elementId")
    configuration: Optional[Dict[str, Any]] = None
    preferred_file_name: Optional[str] = Field(None, alias="preferredFileName")
    docker_tag_id: Optional[str] = Field(None, alias="dockerTagId")
    wv_type: Optional[WvType1] = Field(None, alias="wvType")
    wv_id: Optional[str] = Field(None, alias="wvId")


class AccountsGetPurchasesResponseItemsCard(BaseModel):
    type: Optional[str] = None
    last4: Optional[str] = None
    exp_year: Optional[Number] = Field(None, alias="expYear")
    exp_month: Optional[Number] = Field(None, alias="expMonth")


class OnshapePurchaseAssignRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    onshape_subscription_id: Optional[str] = Field(None, alias="onshapeSubscriptionId")


class ProjectCreateRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    hpc_id: Optional[str] = Field(None, alias="hpcId", description="UUID")
    project_title: Optional[str] = Field(
        None, alias="projectTitle", description="String"
    )
    project_goal: Optional[str] = Field(None, alias="projectGoal", description="String")
    core_hour_limit: Optional[float] = Field(
        None, alias="coreHourLimit", description="Float"
    )


class ProjectCreateResponse(BaseModel):
    project_id: Optional[str] = Field(None, alias="projectId", description="UUID")
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    hpc_id: Optional[str] = Field(None, alias="hpcId", description="UUID")
    user_id: Optional[str] = Field(None, alias="userId", description="UUID")
    project_title: Optional[str] = Field(
        None, alias="projectTitle", description="String"
    )
    project_goal: Optional[str] = Field(None, alias="projectGoal", description="String")
    create_date: Optional[int] = Field(None, alias="createDate")
    last_update: Optional[int] = Field(None, alias="lastUpdate")
    core_hour_limit: Optional[float] = Field(
        None, alias="coreHourLimit", description="Float"
    )
    core_hour_used: Optional[float] = Field(
        None, alias="coreHourUsed", description="Float"
    )
    design_list: Optional[List[DesignCreateResponse]] = Field(None, alias="designList")


class ProjectRequest(BaseModel):
    project_id: Optional[str] = Field(None, alias="projectId", description="UUID")


class ProjectAccess(BaseModel):
    project_access_id: Optional[str] = Field(
        None, alias="projectAccessId", description="UUID"
    )
    project_id: Optional[str] = Field(None, alias="projectId", description="UUID")
    user_id: Optional[str] = Field(None, alias="userId")
    group_id: Optional[str] = Field(None, alias="groupId")
    access_type: Optional[str] = Field(None, alias="accessType")
    last_update: Optional[datetime] = Field(None, alias="lastUpdate")
    last_action: Optional[str] = Field(None, alias="lastAction")
    archived_designs: Optional[List[str]] = Field(None, alias="archivedDesigns")
    archived_instances: Optional[List[str]] = Field(None, alias="archivedInstances")
    archived: Optional[bool] = None


class AccessType(Enum):
    """__code__owner_ = '{@code "owner"'"""

    """ _write_ = '"write"' """
    """ _read__ = '"read"}' """


class ProjectAddGroupRequest(BaseModel):
    project_id: Optional[str] = Field(None, alias="projectId", description="UUID")
    group_id: Optional[str] = Field(None, alias="groupId", description="UUID")
    access_type: Optional[AccessType] = Field(
        None, alias="accessType", description="String"
    )


class ProjectRemoveGroupRequest(BaseModel):
    project_id: Optional[str] = Field(None, alias="projectId", description="UUID")
    group_id: Optional[str] = Field(None, alias="groupId", description="UUID")


class AccessType1(Enum):
    """__code__owner_ = '{@code "owner"'"""

    """ _write_ = '"write"' """
    """ _read__ = '"read"}' """


class ProjectAddUserRequest(BaseModel):
    project_id: Optional[str] = Field(None, alias="projectId", description="UUID")
    user_id: Optional[str] = Field(None, alias="userId", description="UUID")
    access_type: Optional[AccessType1] = Field(
        None, alias="accessType", description="String"
    )


class ProjectRemoveUserRequest(BaseModel):
    project_id: Optional[str] = Field(None, alias="projectId", description="UUID")
    user_id: Optional[str] = Field(None, alias="userId", description="UUID")


class ProjectBlobRequest(BaseModel):
    project_id: Optional[str] = Field(None, alias="projectId")
    blob_id: Optional[str] = Field(None, alias="blobId")


class ProjectUpdateRequest(BaseModel):
    project_id: Optional[str] = Field(None, alias="projectId", description="UUID")
    project_title: Optional[str] = Field(
        None, alias="projectTitle", description="String"
    )
    project_goal: Optional[str] = Field(None, alias="projectGoal", description="String")


class ProjectUpdateTitleRequest(BaseModel):
    project_id: Optional[str] = Field(None, alias="projectId", description="UUID")
    project_title: Optional[str] = Field(
        None, alias="projectTitle", description="String"
    )


class ProjectUpdateGoalRequest(BaseModel):
    project_id: Optional[str] = Field(None, alias="projectId", description="UUID")
    project_goal: Optional[str] = Field(None, alias="projectGoal", description="String")


class ProjectCoreHourLimitRequest(BaseModel):
    project_id: Optional[str] = Field(None, alias="projectId", description="UUID")
    core_hour_limit: Optional[float] = Field(
        None, alias="coreHourLimit", description="Float"
    )


class ProjectDeleteResponse(BaseModel):
    project_id: Optional[str] = Field(None, alias="projectId", description="UUID")
    hash: Optional[str] = None
    summary: Optional[Dict[str, Any]] = None


class ProjectDeleteRequest(BaseModel):
    project_id: Optional[str] = Field(None, alias="projectId", description="UUID")
    hash: Optional[str] = None


class ProjectCalendarReport(BaseModel):
    group_by: Optional[str] = Field(None, alias="groupBy")
    calendar_usages: Optional[List[CalendarUsage]] = Field(None, alias="calendarUsages")
    start_calendar: Optional[datetime] = Field(None, alias="startCalendar")
    end_calendar: Optional[datetime] = Field(None, alias="endCalendar")
    project_id: Optional[str] = Field(None, alias="projectId")


class SupportFindUserRequest(BaseModel):
    project_id: Optional[str] = Field(None, alias="projectId", description="UUID")
    email_address: Optional[str] = Field(None, alias="emailAddress")


class SupervisorFileListRequest(BaseModel):
    supervisor_id: Optional[str] = Field(None, alias="supervisorId")
    directory: Optional[str] = None
    file_name: Optional[str] = Field(None, alias="fileName")
    include_sub_directory: Optional[bool] = Field(None, alias="includeSubDirectory")


class SupervisorFileRequest(BaseModel):
    supervisor_id: Optional[str] = Field(None, alias="supervisorId")
    directory: Optional[str] = None
    file_name: Optional[str] = Field(None, alias="fileName")


class SupervisorFilePath(BaseModel):
    file_name: str = Field(..., alias="fileName", description="UUID")
    supervisor_id: Optional[str] = Field(None, alias="supervisorId")
    directory: Optional[str] = None
    path: Optional[str] = None


class Operation2(Enum):
    AGGREGATEDATA = "AGGREGATEDATA"


class Supervisor(BaseModel):
    supervisor_id: Optional[str] = Field(None, alias="supervisorId")
    account_id: Optional[str] = Field(None, alias="accountId")
    user_id: Optional[str] = Field(None, alias="userId")
    hpc_id: Optional[str] = Field(None, alias="hpcId")
    design_instance_id: Optional[str] = Field(None, alias="designInstanceId")
    operation: Operation2
    docker_tag_id: Optional[str] = Field(None, alias="dockerTagId")
    core_hour_budget: Optional[float] = Field(None, alias="coreHourBudget")
    create_date: Optional[int] = Field(None, alias="createDate")
    included_supervisor_ids: Optional[List[str]] = Field(
        None, alias="includedSupervisorIds"
    )
    file_dependencies: Optional[List[str]] = Field(None, alias="fileDependencies")
    file_aliases: Optional[List[str]] = Field(None, alias="fileAliases")
    required_blobs: Optional[List[str]] = Field(None, alias="requiredBlobs")


class SupervisorCreateRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    hpc_id: Optional[str] = Field(None, alias="hpcId", description="UUID")
    design_instance_id: Optional[str] = Field(
        None, alias="designInstanceId", description="UUID"
    )
    core_hour_budget: Optional[float] = Field(
        None, alias="coreHourBudget", description="Float"
    )
    operation: Optional[str] = None
    included_supervisor_ids: Optional[List[str]] = Field(
        None, alias="includedSupervisorIds"
    )
    file_dependencies: Optional[List[str]] = Field(None, alias="fileDependencies")
    file_aliases: Optional[List[str]] = Field(None, alias="fileAliases")
    required_blobs: Optional[List[str]] = Field(None, alias="requiredBlobs")


class SupervisorLaunchRequest(BaseModel):
    supervisor_id: Optional[str] = Field(None, alias="supervisorId", description="UUID")
    blob_id: Optional[str] = Field(None, alias="blobId", description="UUID")
    docker_tag_id: Optional[str] = Field(None, alias="dockerTagId", description="UUID")


class TagRequest(BaseModel):
    item_id: Optional[str] = Field(None, alias="itemId", description="UUID")
    tag: Optional[str] = Field(None, description="any string")
    type: Optional[str] = Field(None, description="any string")


class TagSearch(BaseModel):
    tag: Optional[str] = Field(None, description="any string")
    type: Optional[str] = Field(None, description="any string")


class TagSearchRequest(BaseModel):
    tags: Optional[List[TagSearch]] = None


class TagAccountSearchRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    tags: Optional[List[TagSearch]] = None


class ItemIdRequest(BaseModel):
    item_id: Optional[str] = Field(None, alias="itemId", description="UUID")


class UserModifyRequest(BaseModel):
    last_name: str = Field(..., alias="lastName")
    first_name: str = Field(..., alias="firstName")
    company_name: str = Field(..., alias="companyName")
    phone_number: Optional[str] = Field(None, alias="phoneNumber")
    send_completion_email: Optional[bool] = Field(None, alias="sendCompletionEmail")
    department: Optional[str] = None
    title: Optional[str] = None


class UserEvent(BaseModel):
    event_id: Optional[str] = Field(None, alias="eventId", description="UUID")
    user_id: Optional[str] = Field(None, alias="userId")
    event_type: Optional[str] = Field(None, alias="eventType")
    event_source: Optional[str] = Field(None, alias="eventSource")
    event_value: Optional[str] = Field(None, alias="eventValue")
    event_date: Optional[int] = Field(None, alias="eventDate")


class EventSource(Enum):
    ONSCALELAB = "ONSCALELAB"
    ONSCALEPORTAL = "ONSCALEPORTAL"
    ONSCALEWEB = "ONSCALEWEB"
    ONSCALESOLVE = "ONSCALESOLVE"


class UserEventRequest(BaseModel):
    event_type: Optional[str] = Field(None, alias="eventType", description="String")
    event_source: Optional[EventSource] = Field(
        None, alias="eventSource", description="String"
    )
    event_value: Optional[str] = Field(None, alias="eventValue")


class FavoriteRequest(BaseModel):
    object_type: Optional[str] = Field(None, alias="objectType")
    object_id: Optional[str] = Field(None, alias="objectId")


class FavoriteListRequest(BaseModel):
    object_type: Optional[str] = Field(None, alias="objectType")


class ReleaseNoteRequest(BaseModel):
    release_note_id: Optional[str] = Field(
        None, alias="releaseNoteId", description="UUID"
    )


class PythonInterpreterResponse(BaseModel):
    url: Optional[str] = None
    secret: Optional[str] = None
    ch_cost_per_hour: Optional[float] = Field(None, alias="chCostPerHour")


class PythonInterpreterRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    hpc_id: Optional[str] = Field(None, alias="hpcId", description="UUID")
    docker_tag_id: Optional[str] = Field(None, alias="dockerTagId")


class Account(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    account_name: Optional[str] = Field(None, alias="accountName")
    overage: Optional[bool] = None
    billing_enabled: Optional[bool] = Field(None, alias="billingEnabled")
    plan_code: Optional[str] = Field(None, alias="planCode")
    account_created: Optional[int] = Field(
        None, alias="accountCreated", description="1585700000000"
    )
    last_job_time: Optional[int] = Field(
        None, alias="lastJobTime", description="1585700000000"
    )
    onscale_lab: Optional[bool] = Field(None, alias="onscaleLab")
    onscale_solve: Optional[bool] = Field(None, alias="onscaleSolve")
    onscale_cli: Optional[bool] = Field(None, alias="onscaleCli")
    onscale_python: Optional[bool] = Field(None, alias="onscalePython")
    beam_tool: Optional[bool] = Field(None, alias="beamTool")
    email_address: Optional[str] = Field(None, alias="emailAddress")
    current_period_ends_at: Optional[datetime] = Field(
        None, alias="currentPeriodEndsAt"
    )
    parent_account_id: Optional[str] = Field(None, alias="parentAccountId")
    offline_rebate_rate: Optional[float] = Field(None, alias="offlineRebateRate")
    user_core_allowed: Optional[int] = Field(None, alias="userCoreAllowed")
    lead_core_allowed: Optional[int] = Field(None, alias="leadCoreAllowed")
    default_project_core_hour: Optional[float] = Field(
        None, alias="defaultProjectCoreHour"
    )
    default_max_sim_core_hour: Optional[float] = Field(
        None, alias="defaultMaxSimCoreHour"
    )
    credit_limit: Optional[float] = Field(None, alias="creditLimit")
    subscription_size: Optional[int] = Field(None, alias="subscriptionSize")
    subscription_term_months: Optional[int] = Field(
        None, alias="subscriptionTermMonths"
    )
    max_simultaneous_simulations: Optional[int] = Field(
        None, alias="maxSimultaneousSimulations"
    )
    allow_support_logging: Optional[bool] = Field(None, alias="allowSupportLogging")
    expiration_date: Optional[int] = Field(
        None, alias="expirationDate", description="1585700000000"
    )
    onshape_subscription_id: Optional[str] = Field(None, alias="onshapeSubscriptionId")
    onshape_user_id: Optional[str] = Field(None, alias="onshapeUserId")
    account_details: Optional[AccountDetails] = Field(None, alias="accountDetails")
    enterprise: Optional[bool] = None


class AccountListResponse(BaseModel):
    account: Optional[Account] = None
    account_access: Optional[AccountAccess] = Field(None, alias="accountAccess")


class AccountBalance(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId")
    core_hours_available: Optional[float] = Field(None, alias="coreHoursAvailable")
    allocation_available: Optional[float] = Field(None, alias="allocationAvailable")
    recent_transactions: Optional[List[AccountLedger]] = Field(
        None, alias="recentTransactions"
    )


class Simulation(BaseModel):
    simulation_id: Optional[str] = Field(None, alias="simulationId", description="UUID")
    job_id: Optional[str] = Field(None, alias="jobId")
    console_parameters: Optional[str] = Field(None, alias="consoleParameters")
    simulation_status: Optional[List[SimulationStatus]] = Field(
        None, alias="simulationStatus"
    )
    simulation_index: Optional[int] = Field(None, alias="simulationIndex")
    required_blobs: Optional[List[str]] = Field(None, alias="requiredBlobs")
    create_date: Optional[int] = Field(
        None, alias="createDate", description="1585700000000"
    )
    account_id: Optional[str] = Field(None, alias="accountId")
    user_id: Optional[str] = Field(None, alias="userId")
    last_status: Optional[str] = Field(None, alias="lastStatus")
    last_status_date: Optional[int] = Field(
        None, alias="lastStatusDate", description="1585700000000"
    )
    last_status_comment: Optional[str] = Field(None, alias="lastStatusComment")
    parent_simulation_id: Optional[str] = Field(None, alias="parentSimulationId")
    percentage_completed: Optional[int] = Field(None, alias="percentageCompleted")
    console_parameter_map: Optional[Dict[str, Any]] = Field(
        None, alias="consoleParameterMap"
    )


class OfflineLicenseReturnRequest(BaseModel):
    transaction_id: Optional[str] = Field(None, alias="transactionId")
    confirmation_key: Optional[str] = Field(None, alias="confirmationKey")
    offline_transactions: Optional[List[OfflineTransaction]] = Field(
        None, alias="offlineTransactions"
    )


class AccountUsageReport(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId")
    monthly_usages: Optional[List[MonthlyUsage]] = Field(None, alias="monthlyUsages")


class AccountCalendarReport(BaseModel):
    group_by: Optional[str] = Field(None, alias="groupBy")
    calendar_usages: Optional[List[CalendarUsage]] = Field(None, alias="calendarUsages")
    start_calendar: Optional[datetime] = Field(None, alias="startCalendar")
    end_calendar: Optional[datetime] = Field(None, alias="endCalendar")
    account_id: Optional[str] = Field(None, alias="accountId")


class Design(BaseModel):
    design_id: Optional[str] = Field(None, alias="designId", description="UUID")
    project_id: Optional[str] = Field(None, alias="projectId")
    user_id: Optional[str] = Field(None, alias="userId")
    design_title: Optional[str] = Field(None, alias="designTitle")
    design_description: Optional[str] = Field(None, alias="designDescription")
    design_goal: Optional[str] = Field(None, alias="designGoal")
    physics: Optional[Physics] = None
    create_date: Optional[int] = Field(
        None, alias="createDate", description="1585700000000"
    )
    design_instance_list: Optional[List[DesignInstance]] = Field(
        None, alias="designInstanceList"
    )
    archived: Optional[bool] = None


class Project(BaseModel):
    project_id: Optional[str] = Field(None, alias="projectId")
    account_id: Optional[str] = Field(None, alias="accountId")
    hpc_id: Optional[str] = Field(None, alias="hpcId")
    user_id: Optional[str] = Field(None, alias="userId")
    project_title: Optional[str] = Field(None, alias="projectTitle")
    project_goal: Optional[str] = Field(None, alias="projectGoal")
    create_date: Optional[int] = Field(
        None, alias="createDate", description="1585700000000"
    )
    last_update: Optional[int] = Field(
        None, alias="lastUpdate", description="1585700000000"
    )
    core_hour_limit: Optional[float] = Field(None, alias="coreHourLimit")
    core_hour_used: Optional[float] = Field(None, alias="coreHourUsed")
    design_list: Optional[List[Design]] = Field(None, alias="designList")
    user_id_list: Optional[List[str]] = Field(None, alias="userIdList")
    last_update_by_me: Optional[int] = Field(
        None, alias="lastUpdateByMe", description="1585700000000"
    )
    my_access_type: Optional[str] = Field(None, alias="myAccessType")
    archived: Optional[bool] = None


class AccountReport(BaseModel):
    account: Optional[Account] = None
    core_hours_consumed: Optional[float] = Field(None, alias="coreHoursConsumed")


class ReportJob(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    job_name: Optional[str] = Field(None, alias="jobName")
    cores_required: Optional[int] = Field(None, alias="coresRequired")
    core_hour_estimate: Optional[float] = Field(None, alias="coreHourEstimate")
    ram_estimate: Optional[int] = Field(None, alias="ramEstimate")
    main_file: Optional[str] = Field(None, alias="mainFile")
    precision: Optional[Precision2] = None
    number_of_parts: Optional[int] = Field(None, alias="numberOfParts")
    docker_tag: Optional[str] = Field(None, alias="dockerTag")
    docker_tag_id: Optional[str] = Field(None, alias="dockerTagId")
    file_dependencies: Optional[List[str]] = Field(None, alias="fileDependencies")
    file_aliases: Optional[List[str]] = Field(None, alias="fileAliases")
    operation: Optional[Operation1] = None
    preprocessor: Optional[Preprocessor1] = None
    simulations: Optional[List[Simulation]] = None
    job_status: Optional[List[JobStatus]] = Field(None, alias="jobStatus")
    job_type: Optional[str] = Field(None, alias="jobType")
    log_group: Optional[str] = Field(None, alias="logGroup", description="string")
    hpc_id: Optional[str] = Field(None, alias="hpcId", description="UUID")
    application: Optional[str] = None
    simulation_count: Optional[int] = Field(None, alias="simulationCount")
    parent_job_id: Optional[str] = Field(None, alias="parentJobId")
    project_id: Optional[str] = Field(None, alias="projectId")
    design_id: Optional[str] = Field(None, alias="designId")
    design_instance_id: Optional[str] = Field(None, alias="designInstanceId")
    supervisor_id: Optional[str] = Field(None, alias="supervisorId", description="UUID")
    time_to_end: Optional[str] = Field(
        None, alias="timeToEnd", description="seconds as scientific notation"
    )
    tags: Optional[List[Tag]] = None
    job_cost: Optional[float] = Field(None, alias="jobCost")
    user_id: Optional[str] = Field(None, alias="userId")
    last_status: Optional[str] = Field(None, alias="lastStatus")
    last_status_date: Optional[int] = Field(
        None, alias="lastStatusDate", description="1585700000000"
    )
    final_status: Optional[str] = Field(None, alias="finalStatus")
    queued_status_date: Optional[int] = Field(
        None, alias="queuedStatusDate", description="1585700000000"
    )
    deleted_date: Optional[int] = Field(
        None, alias="deletedDate", description="1585700000000"
    )
    physics_types: Optional[List[str]] = Field(None, alias="physicsTypes")
    console_parameter_names: Optional[List[str]] = Field(
        None, alias="consoleParameterNames"
    )
    email_address: Optional[str] = Field(None, alias="emailAddress")
    file_dependent_job_id_list: Optional[List[str]] = Field(
        None, alias="fileDependentJobIdList"
    )


class StartTimeReport(BaseModel):
    start_calendar: Optional[datetime] = Field(None, alias="startCalendar")
    end_calendar: Optional[datetime] = Field(None, alias="endCalendar")
    time_groups: Optional[List[TimeGroup]] = Field(None, alias="timeGroups")
    hpc_list: Optional[List[Hpc]] = Field(None, alias="hpcList")
    hpc_report: Optional[Dict[str, Any]] = Field(None, alias="hpcReport")
    hpc_node_report: Optional[Dict[str, Any]] = Field(None, alias="hpcNodeReport")
    hpc_container_report: Optional[Dict[str, Any]] = Field(
        None, alias="hpcContainerReport"
    )


class CouponMaster(BaseModel):
    coupon_master_id: Optional[str] = Field(None, alias="couponMasterId")
    coupon_type: Optional[str] = Field(None, alias="couponType")
    coupon_code: Optional[str] = Field(None, alias="couponCode")
    core_hour_amount: Optional[float] = Field(None, alias="coreHourAmount")
    percentage: Optional[float] = None
    var_account_id: Optional[str] = Field(None, alias="var_accountId")
    max_redeemable_times: Optional[int] = Field(None, alias="maxRedeemableTimes")
    expired_date: Optional[datetime] = Field(None, alias="expiredDate")
    locked_days: Optional[int] = Field(None, alias="lockedDays")
    start_date: Optional[datetime] = Field(None, alias="startDate")
    expired: Optional[bool] = None
    coupon_name: Optional[str] = Field(None, alias="couponName")
    coupon_description: Optional[str] = Field(None, alias="couponDescription")
    create_user_id: Optional[str] = Field(None, alias="createUserId")
    create_date: Optional[datetime] = Field(None, alias="createDate")
    redeemable_list: Optional[List[CouponRedeemable]] = Field(
        None, alias="redeemableList"
    )


class Group(BaseModel):
    group_id: Optional[str] = Field(None, alias="groupId", description="UUID")
    account_id: Optional[str] = Field(None, alias="accountId")
    group_name: Optional[str] = Field(None, alias="groupName")
    create_date: Optional[int] = Field(
        None, alias="createDate", description="1585700000000"
    )
    user_id_group_id_list: Optional[List[UserIdGroupId]] = Field(
        None, alias="userIdGroupIdList"
    )


class LinkedFile(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId")
    key: Optional[JobGetKeyResponse] = None
    s3secret: Optional[str] = None
    s3key: Optional[str] = None
    s3session: Optional[str] = None
    temporary_credential: Optional[TemporaryCredential] = Field(
        None, alias="temporaryCredential"
    )
    file_path: Optional[List[FileAlias]] = Field(None, alias="filePath")


class SimulationListPageResponse(BaseModel):
    page_count: Optional[int] = Field(None, alias="pageCount")
    request: Optional[SimulationListPageRequest] = None
    status_summary: Optional[Dict[str, Any]] = Field(None, alias="statusSummary")
    simulations: Optional[List[Simulation]] = None
    descendant_simulation_map: Optional[Dict[str, Any]] = Field(
        None, alias="descendantSimulationMap"
    )
    console_parameter_names: Optional[List[str]] = Field(
        None, alias="consoleParameterNames"
    )


class TreeItem(BaseModel):
    is_mutable: Optional[bool] = Field(None, alias="isMutable")
    is_container: Optional[bool] = Field(None, alias="isContainer")
    can_move: Optional[bool] = Field(None, alias="canMove")
    has_pending_owner: Optional[bool] = Field(None, alias="hasPendingOwner")
    description: Optional[str] = None
    owner: Optional[TreeItemOwner] = None
    created_at: Optional[datetime] = Field(None, alias="createdAt")
    project_id: Optional[str] = Field(None, alias="projectId")
    modified_at: Optional[datetime] = Field(None, alias="modifiedAt")
    created_by: Optional[TreeItemOwner] = Field(None, alias="createdBy")
    modified_by: Optional[TreeItemOwner] = Field(None, alias="modifiedBy")
    is_enterprise_owned: Optional[bool] = Field(None, alias="isEnterpriseOwned")
    resource_type: Optional[str] = Field(None, alias="resourceType")
    href: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None


class PartsGetPartsResponsePartsAppearance(BaseModel):
    opacity: Optional[Number] = None
    is_generated: Optional[bool] = Field(None, alias="isGenerated")
    color: Optional[PartsGetPartsResponsePartsAppearanceColor] = None


class PartsGetPartsResponsePartsMaterial(BaseModel):
    library_name: Optional[str] = Field(None, alias="libraryName")
    id: Optional[str] = None
    properties: Optional[List[PartsGetPartsResponsePartsMaterialProperties]] = None


class DocumentsGetDocumentsResponseItemsThumbnail(BaseModel):
    sizes: Optional[List[DocumentsGetDocumentsResponseItemsThumbnailSizes]] = None
    id: Optional[str] = None
    href: Optional[str] = None


class DocumentsGetElementListResponseElementsThumbnailInfo(BaseModel):
    sizes: Optional[
        List[DocumentsGetElementListResponseElementsThumbnailInfoSizes]
    ] = None


class ConfigurationListReponse(BaseModel):
    name: Optional[str] = None
    id: Optional[str] = None
    options: Optional[List[EnumOption]] = None
    quantity: Optional[str] = None
    min_value: Optional[float] = Field(None, alias="minValue")
    max_value: Optional[float] = Field(None, alias="maxValue")
    default_value: Optional[float] = Field(None, alias="defaultValue")
    units: Optional[str] = None


class AccountsGetPurchasesResponseItems(BaseModel):
    id: Optional[str] = None
    user_ids: Optional[List[str]] = Field(None, alias="userIds")
    consumed_ids: Optional[List[str]] = Field(None, alias="consumedIds")
    seats: Optional[Number] = None
    account_id: Optional[str] = Field(None, alias="accountId")
    plan_id: Optional[str] = Field(None, alias="planId")
    plan_type: Optional[Number] = Field(None, alias="planType")
    plan_name: Optional[str] = Field(None, alias="planName")
    group: Optional[str] = None
    application_id: Optional[str] = Field(None, alias="applicationId")
    state: Optional[Number] = None
    canceled_at: Optional[str] = Field(None, alias="canceledAt")
    subscription_end_at: Optional[str] = Field(None, alias="subscriptionEndAt")
    amount_cents: Optional[Number] = Field(None, alias="amountCents")
    card: Optional[AccountsGetPurchasesResponseItemsCard] = None


class Job(BaseModel):
    job_id: Optional[str] = Field(None, alias="jobId", description="UUID")
    account_id: Optional[str] = Field(None, alias="accountId", description="UUID")
    job_name: Optional[str] = Field(None, alias="jobName")
    cores_required: Optional[int] = Field(None, alias="coresRequired")
    core_hour_estimate: Optional[float] = Field(None, alias="coreHourEstimate")
    ram_estimate: Optional[int] = Field(None, alias="ramEstimate")
    main_file: Optional[str] = Field(None, alias="mainFile")
    precision: Optional[Precision] = None
    number_of_parts: Optional[int] = Field(None, alias="numberOfParts")
    docker_tag: Optional[str] = Field(None, alias="dockerTag")
    docker_tag_id: Optional[str] = Field(None, alias="dockerTagId")
    file_dependencies: Optional[List[str]] = Field(None, alias="fileDependencies")
    file_aliases: Optional[List[str]] = Field(None, alias="fileAliases")
    operation: Optional[Operation] = None
    preprocessor: Optional[Preprocessor] = None
    simulations: Optional[List[Simulation]] = None
    job_status: Optional[List[JobStatus]] = Field(None, alias="jobStatus")
    job_type: Optional[str] = Field(None, alias="jobType")
    log_group: Optional[str] = Field(None, alias="logGroup", description="string")
    hpc_id: Optional[str] = Field(None, alias="hpcId", description="UUID")
    application: Optional[str] = None
    simulation_count: Optional[int] = Field(None, alias="simulationCount")
    parent_job_id: Optional[str] = Field(None, alias="parentJobId")
    project_id: Optional[str] = Field(None, alias="projectId")
    design_id: Optional[str] = Field(None, alias="designId")
    design_instance_id: Optional[str] = Field(None, alias="designInstanceId")
    supervisor_id: Optional[str] = Field(None, alias="supervisorId", description="UUID")
    time_to_end: Optional[str] = Field(
        None, alias="timeToEnd", description="seconds as scientific notation"
    )
    tags: Optional[List[Tag]] = None
    job_cost: Optional[float] = Field(None, alias="jobCost")
    user_id: Optional[str] = Field(None, alias="userId")
    last_status: Optional[str] = Field(None, alias="lastStatus")
    last_status_date: Optional[int] = Field(
        None, alias="lastStatusDate", description="1585700000000"
    )
    final_status: Optional[str] = Field(None, alias="finalStatus")
    queued_status_date: Optional[int] = Field(
        None, alias="queuedStatusDate", description="1585700000000"
    )
    deleted_date: Optional[int] = Field(
        None, alias="deletedDate", description="1585700000000"
    )
    physics_types: Optional[List[str]] = Field(None, alias="physicsTypes")
    console_parameter_names: Optional[List[str]] = Field(
        None, alias="consoleParameterNames"
    )
    file_dependent_job_id_list: Optional[List[str]] = Field(
        None, alias="fileDependentJobIdList"
    )


class JobListResponse(BaseModel):
    page_count: Optional[int] = Field(None, alias="pageCount")
    page_number: Optional[int] = Field(None, alias="pageNumber")
    page_size: Optional[int] = Field(None, alias="pageSize")
    job_count: Optional[int] = Field(None, alias="jobCount")
    has_more_job: Optional[bool] = Field(None, alias="hasMoreJob")
    job_list_finished: Optional[List[Job]] = Field(None, alias="jobListFinished")
    job_list_queued: Optional[List[Job]] = Field(None, alias="jobListQueued")
    job_list_created: Optional[List[Job]] = Field(None, alias="jobListCreated")
    job_list_combined: Optional[List[Job]] = Field(None, alias="jobListCombined")


class AccountSearchResponse(BaseModel):
    account_id: Optional[str] = Field(None, alias="accountId")
    keyword: Optional[str] = None
    field_name: Optional[str] = Field(None, alias="fieldName")
    object_type: Optional[str] = Field(None, alias="objectType")
    project_list: Optional[List[Project]] = Field(None, alias="projectList")
    design_list: Optional[List[Design]] = Field(None, alias="designList")
    design_instance_list: Optional[List[DesignInstance]] = Field(
        None, alias="designInstanceList"
    )
    job_list: Optional[List[Job]] = Field(None, alias="jobList")


class JobFileCredentialsResponse(BaseModel):
    secret: Optional[str] = None
    key: Optional[str] = None
    session: Optional[str] = None
    linked_files: Optional[List[LinkedFile]] = Field(None, alias="linkedFiles")


class JobListLoadResponse(BaseModel):
    queued_job_list: Optional[List[Job]] = Field(None, alias="queuedJobList")
    finished_job_list: Optional[List[Job]] = Field(None, alias="finishedJobList")


class PartsGetPartsResponseParts(BaseModel):
    part_id: Optional[str] = Field(None, alias="partId")
    name: Optional[str] = None
    part_query: Optional[str] = Field(None, alias="partQuery")
    element_id: Optional[str] = Field(None, alias="elementId")
    is_hidden: Optional[bool] = Field(None, alias="isHidden")
    appearance: Optional[PartsGetPartsResponsePartsAppearance] = None
    material: Optional[PartsGetPartsResponsePartsMaterial] = None
    custom_properties: Optional[Dict[str, Any]] = Field(None, alias="customProperties")
    microversion_id: Optional[str] = Field(None, alias="microversionId")
    body_type: Optional[str] = Field(None, alias="bodyType")
    is_mesh: Optional[bool] = Field(None, alias="isMesh")


class DocumentsGetDocumentsResponseItems(BaseModel):
    public: Optional[bool] = None
    owner: Optional[DocumentsGetDocumentsResponseItemsOwner] = None
    permission: Optional[str] = None
    trashed_at: Optional[datetime] = Field(None, alias="trashedAt")
    trash: Optional[bool] = None
    starred: Optional[str] = None
    active: Optional[bool] = None
    created_at: Optional[datetime] = Field(None, alias="createdAt")
    thumbnail: Optional[DocumentsGetDocumentsResponseItemsThumbnail] = None
    created_by: Optional[DocumentsGetDocumentsResponseItemsCreatedBy] = Field(
        None, alias="createdBy"
    )
    modified_at: Optional[datetime] = Field(None, alias="modifiedAt")
    modified_by: Optional[DocumentsGetDocumentsResponseItemsModifiedBy] = Field(
        None, alias="modifiedBy"
    )
    default_workspace: Optional[
        DocumentsGetDocumentsResponseItemsDefaultWorkspace
    ] = Field(None, alias="defaultWorkspace")
    tags: Optional[List[str]] = None
    size_bytes: Optional[Number] = Field(None, alias="sizeBytes")
    can_unshare: Optional[bool] = Field(None, alias="canUnshare")
    name: Optional[str] = None
    id: Optional[str] = None
    href: Optional[str] = None
    total_workspaces_updating: Optional[Number] = Field(
        None, alias="totalWorkspacesUpdating"
    )
    total_workspaces_scheduled_for_update: Optional[Number] = Field(
        None, alias="totalWorkspacesScheduledForUpdate"
    )


class DocumentsGetElementListResponseElements(BaseModel):
    name: Optional[str] = None
    id: Optional[str] = None
    element_type: Optional[str] = Field(None, alias="elementType")
    type: Optional[str] = None
    length_units: Optional[str] = Field(None, alias="lengthUnits")
    angle_units: Optional[str] = Field(None, alias="angleUnits")
    mass_units: Optional[str] = Field(None, alias="massUnits")
    thumbnail_info: Optional[
        DocumentsGetElementListResponseElementsThumbnailInfo
    ] = Field(None, alias="thumbnailInfo")
    thumbnails: Optional[Dict[str, Any]] = None
    microversion_id: Optional[str] = Field(None, alias="microversionId")
