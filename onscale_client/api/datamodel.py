# generated by datamodel-codegen:
#   filename:  swagger.json
#   timestamp: 2022-12-07T15:02:26+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Model(BaseModel):
    __root__: Any


class AccountDetails(BaseModel):
    first_name: Optional[str] = Field(None, alias='firstName', example='John')
    last_name: Optional[str] = Field(None, alias='lastName', example='Smith')
    company_name: Optional[str] = Field(None, alias='companyName', example='OnScale')
    email_address: Optional[str] = Field(
        None, alias='emailAddress', example='xxx@onscale.com'
    )
    addr1: Optional[str] = Field(None, example='1 First Blvd')
    addr2: Optional[str] = None
    city: Optional[str] = Field(None, example='Cupertino')
    state: Optional[str] = Field(None, example='CA')
    zip: Optional[str] = Field(None, example='95014')
    country: Optional[str] = Field(None, example='US')
    phone_number: Optional[str] = Field(
        None, alias='phoneNumber', example='+14046474769'
    )
    coupon_code: Optional[str] = Field(None, alias='couponCode')
    subscription_type: Optional[str] = Field(
        None, alias='subscriptionType', example='on-free'
    )
    credit_card: Optional[str] = Field(
        None, alias='creditCard', example='4111-1111-1111-1111'
    )
    ccv: Optional[str] = Field(None, example='123')
    expire_month: Optional[str] = Field(None, alias='expireMonth', example='01')
    expire_year: Optional[str] = Field(None, alias='expireYear', example='2020')
    overage: Optional[bool] = Field(None, example=False)
    token_id: Optional[str] = Field(None, alias='tokenId', example='TOKEN_ID')


class ApiException(BaseModel):
    code: Optional[int] = Field(None, description='integer', example=400)
    error_code: Optional[str] = Field(None, alias='errorCode')
    error_type: Optional[str] = Field(None, alias='errorType')
    message_tag: Optional[str] = Field(None, alias='messageTag')
    api_name: Optional[str] = Field(None, alias='apiName')
    trace_id: Optional[str] = Field(None, alias='traceId')
    log_type: Optional[str] = Field(None, alias='logType')
    message_type: Optional[str] = Field(None, alias='messageType')
    message: Optional[str] = None


class SubscriptionUpdateOverageRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    overage: Optional[bool] = Field(None, example=False)


class AccountUpdateRequest(BaseModel):
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    account_name: Optional[str] = Field(
        None, alias='accountName', example='OnScale Test Account'
    )
    first_name: Optional[str] = Field(None, alias='firstName', example='Jame')
    last_name: Optional[str] = Field(None, alias='lastName', example='Smith')
    company_name: Optional[str] = Field(None, alias='companyName', example='OnScale')
    email_address: Optional[str] = Field(
        None, alias='emailAddress', example='xxx.xxx@onscale.com'
    )
    addr1: Optional[str] = Field(None, example='1 First Blvd')
    addr2: Optional[str] = None
    city: Optional[str] = Field(None, example='Cupertino')
    state: Optional[str] = Field(None, example='CA')
    zip: Optional[str] = Field(None, example='95014')
    country: Optional[str] = Field(None, example='US')
    phone_number: Optional[str] = Field(
        None, alias='phoneNumber', example='+14041111222'
    )


class AccountRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')


class SubscriptionUpdateRequest(BaseModel):
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    account_name: Optional[str] = Field(
        None, alias='accountName', example='OnScale Test Account'
    )
    account_plan_flavor_id: Optional[str] = Field(
        None,
        alias='accountPlanFlavorId',
        description='UUID',
        example='account-plan-flavor-id',
    )
    overage: Optional[bool] = Field(None, example=False)
    token_id: Optional[str] = Field(None, alias='tokenId', example='TOKEN_ID')


class AccountAccess(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    cognito_email: Optional[str] = Field(
        None, alias='cognitoEmail', description='email', example='xxx@onscale.com'
    )
    max_core_hour_request: Optional[int] = Field(
        None, alias='maxCoreHourRequest', example=5000
    )
    account_admin: Optional[bool] = Field(None, alias='accountAdmin', example=True)
    has_mfa: Optional[bool] = Field(None, alias='hasMFA', example=True)
    user_id: Optional[str] = Field(None, alias='userId')
    account_lead: Optional[bool] = Field(None, alias='accountLead', example=False)
    user_max_core_allowed: Optional[int] = Field(
        None, alias='userMaxCoreAllowed', example=64
    )
    suspended: Optional[bool] = Field(None, example=False)
    past_due: Optional[bool] = Field(None, alias='pastDue')


class TransactionType(Enum):
    CREDIT = 'CREDIT'
    DEBIT = 'DEBIT'
    RECONCILIATION = 'RECONCILIATION'
    ALLOCATION = 'ALLOCATION'
    BLOCK = 'BLOCK'


class AccountLedger(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(None, alias='accountId', description='UUID')
    transaction_id: Optional[str] = Field(
        None, alias='transactionId', description='UUID'
    )
    job_id: Optional[str] = Field(None, alias='jobId', description='UUID')
    simulation_id: Optional[str] = Field(None, alias='simulationId', description='UUID')
    mesh_id: Optional[str] = Field(None, alias='meshId', description='UUID')
    blob_id: Optional[str] = Field(None, alias='blobId', description='UUID')
    transaction_type: Optional[TransactionType] = Field(
        None, alias='transactionType', example='CREDIT'
    )
    transaction_description: Optional[str] = Field(
        None, alias='transactionDescription', example='Credit Added 2/12/2017'
    )
    subscription_id: Optional[str] = Field(None, alias='subscriptionId')
    cognito_email: Optional[str] = Field(
        None, alias='cognitoEmail', description='email', example='xxx@onscale.com'
    )
    user_id: Optional[str] = Field(None, alias='userId')
    transaction_amount: Optional[float] = Field(
        None, alias='transactionAmount', example=1257.0
    )
    transaction_date: Optional[int] = Field(
        None,
        alias='transactionDate',
        description='1585700000000',
        example=1585700000000,
    )
    invoice_submitted: Optional[bool] = Field(None, alias='invoiceSubmitted')
    invoice_required: Optional[bool] = Field(None, alias='invoiceRequired')
    invoice_accepted: Optional[bool] = Field(None, alias='invoiceAccepted')
    transaction_expiration_date: Optional[int] = Field(
        None,
        alias='transactionExpirationDate',
        description='1585700000000',
        example=1585700000000,
    )
    reconciliation_id: Optional[str] = Field(None, alias='reconciliationId')
    overage_amount: Optional[float] = Field(None, alias='overageAmount')
    project_id: Optional[str] = Field(None, alias='projectId')
    design_id: Optional[str] = Field(None, alias='designId')
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    supervisor_id: Optional[str] = Field(None, alias='supervisorId')
    project_title: Optional[str] = Field(None, alias='projectTitle')


class EnterpriseUser(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    user_id: Optional[str] = Field(None, alias='userId')
    first_name: Optional[str] = Field(None, alias='firstName')
    last_name: Optional[str] = Field(None, alias='lastName')
    department: Optional[str] = None
    title: Optional[str] = None
    last_active_date: Optional[datetime] = Field(None, alias='lastActiveDate')
    account_access_list: Optional[List[AccountAccess]] = Field(
        None, alias='accountAccessList'
    )


class UserEnterpriseTeam(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(None, alias='accountId')
    account_name: Optional[str] = Field(None, alias='accountName')
    user_id: Optional[str] = Field(None, alias='userId')
    user_role: Optional[str] = Field(None, alias='userRole')
    suspended: Optional[bool] = None


class AccountUserRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    user_id: Optional[str] = Field(None, alias='userId', example='user-id')


class Contributor(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    user_id: Optional[str] = Field(None, alias='userId')
    first_name: Optional[str] = Field(None, alias='firstName')
    last_name: Optional[str] = Field(None, alias='lastName')
    access_type: Optional[str] = Field(None, alias='accessType')
    account_admin: Optional[bool] = Field(None, alias='accountAdmin')
    account_lead: Optional[bool] = Field(None, alias='accountLead')
    department: Optional[str] = None
    title: Optional[str] = None
    last_date: Optional[int] = Field(
        None, alias='lastDate', description='1585700000000', example=1585700000000
    )
    last_action: Optional[str] = Field(None, alias='lastAction')
    core_hour_used: Optional[float] = Field(None, alias='coreHourUsed')
    last_active_date: Optional[datetime] = Field(None, alias='lastActiveDate')


class AccountSummary(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(None, alias='accountId')
    account_name: Optional[str] = Field(None, alias='accountName')
    core_hours_credit: Optional[float] = Field(None, alias='coreHoursCredit')
    core_hours_debit: Optional[float] = Field(None, alias='coreHoursDebit')
    core_hours_available: Optional[float] = Field(None, alias='coreHoursAvailable')


class AccountCoreHourSummary(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(None, alias='accountId')
    account_name: Optional[str] = Field(None, alias='accountName')
    user_id: Optional[str] = Field(None, alias='userId')
    account_ch_available: Optional[float] = Field(None, alias='accountCHAvailable')
    account_ch_credit: Optional[float] = Field(None, alias='accountCHCredit')
    account_ch_debit: Optional[float] = Field(None, alias='accountCHDebit')
    user_ch_available: Optional[float] = Field(None, alias='userCHAvailable')
    user_ch_credit: Optional[float] = Field(None, alias='userCHCredit')
    user_ch_debit: Optional[float] = Field(None, alias='userCHDebit')
    account_ch_un_assigned: Optional[float] = Field(None, alias='accountCHUnAssigned')
    account_ch_debit_current_period: Optional[float] = Field(
        None, alias='accountCHDebitCurrentPeriod'
    )
    user_ch_debit_current_period: Optional[float] = Field(
        None, alias='userCHDebitCurrentPeriod'
    )
    account_overage_since_last_credit: Optional[float] = Field(
        None, alias='accountOverageSinceLastCredit'
    )
    user_overage_since_last_credit: Optional[float] = Field(
        None, alias='userOverageSinceLastCredit'
    )
    total_consumed: Optional[float] = Field(None, alias='totalConsumed')
    total_consumed_current_period: Optional[float] = Field(
        None, alias='totalConsumedCurrentPeriod'
    )


class AllowSupportLoggingRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    allow_support_logging: Optional[bool] = Field(None, alias='allowSupportLogging')


class AllowSupportProjectRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    allow_support_project: Optional[bool] = Field(None, alias='allowSupportProject')


class AllowShareProjectRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    allow_share_project: Optional[bool] = Field(None, alias='allowShareProject')


class DefaultUpdateRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    default_project_core_hour: Optional[float] = Field(
        None, alias='defaultProjectCoreHour', example=100.0
    )
    default_max_sim_core_hour: Optional[float] = Field(
        None, alias='defaultMaxSimCoreHour', example=100.0
    )


class AccountUnitSystemRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    unit_system: Optional[str] = Field(None, alias='unitSystem', example='Metric')


class Hpc(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    hpc_id: Optional[str] = Field(None, alias='hpcId')
    hpc_active: Optional[bool] = Field(None, alias='hpcActive')
    hpc_cloud: Optional[str] = Field(None, alias='hpcCloud')
    hpc_cluster_name: Optional[str] = Field(None, alias='hpcClusterName')
    hpc_description: Optional[str] = Field(None, alias='hpcDescription')
    hpc_region: Optional[str] = Field(None, alias='hpcRegion')
    hpc_account_bucket: Optional[str] = Field(None, alias='hpcAccountBucket')
    max_node_cores: Optional[int] = Field(None, alias='maxNodeCores')
    max_node_ram: Optional[int] = Field(None, alias='maxNodeRam')


class AccountItemRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    prioritized: Optional[bool] = None
    item_ids: Optional[List[str]] = Field(None, alias='itemIds')


class Precision(Enum):
    SINGLE = 'SINGLE'
    DOUBLE = 'DOUBLE'


class Operation(Enum):
    SIMULATION = 'SIMULATION'
    EMSIMULATION = 'EMSIMULATION'
    MPI = 'MPI'
    EMMPI = 'EMMPI'
    MNMPI = 'MNMPI'
    EMMNMPI = 'EMMNMPI'
    MOEBIUS_MPI = 'MOEBIUS_MPI'
    MOEBIUS_MNMPI = 'MOEBIUS_MNMPI'
    OPENFOAM = 'OPENFOAM'
    OPENFOAM_MNMPI = 'OPENFOAM_MNMPI'
    REFLEX_MPI = 'REFLEX_MPI'
    REFLEX_MNMPI = 'REFLEX_MNMPI'
    SPARSELIZARD_MPI = 'SPARSELIZARD_MPI'
    SPARSELIZARD_MNMPI = 'SPARSELIZARD_MNMPI'
    ESTIMATE = 'ESTIMATE'
    REVIEW = 'REVIEW'
    BUILD = 'BUILD'
    MAPDL_MPI = 'MAPDL_MPI'


class Preprocessor(Enum):
    NONE = 'NONE'
    MODELWRITER = 'MODELWRITER'


class JobStatus1(Enum):
    CREATED = 'CREATED'
    QUEUED = 'QUEUED'
    RUNNING = 'RUNNING'
    PAUSED = 'PAUSED'
    FAILED = 'FAILED'
    FINISHED = 'FINISHED'


class JobStatus(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )
    job_status: Optional[JobStatus1] = Field(None, alias='jobStatus')
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='job-id'
    )
    job_status_date: Optional[int] = Field(
        None, alias='jobStatusDate', description='1585700000000', example=1585700000000
    )


class SimulationStatus1(Enum):
    RUNNING = 'RUNNING'
    QUEUED = 'QUEUED'
    DELAYED = 'DELAYED'
    RESTARTED = 'RESTARTED'
    FAILED = 'FAILED'
    PAUSED = 'PAUSED'
    CANCELLED = 'CANCELLED'
    COMPLETED = 'COMPLETED'


class SimulationStatus(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    job_id: Optional[str] = Field(None, alias='jobId')
    simulation_id: Optional[str] = Field(None, alias='simulationId')
    simulation_status: Optional[SimulationStatus1] = Field(
        None, alias='simulationStatus'
    )
    simulation_status_date: Optional[int] = Field(None, alias='simulationStatusDate')
    simulation_status_comment: Optional[str] = Field(
        None, alias='simulationStatusComment'
    )
    simulation_status_error_codes: Optional[List[str]] = Field(
        None, alias='simulationStatusErrorCodes'
    )


class Tag(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    item_id: Optional[str] = Field(
        None, alias='itemId', description='UUID', example='job-id'
    )
    tag: Optional[str] = Field(None, description='any string')
    type: Optional[str] = Field(None, description='any string')


class AccountJobListRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=10)
    include_finished: Optional[bool] = Field(
        None, alias='includeFinished', example=True
    )
    include_queued: Optional[bool] = Field(None, alias='includeQueued', example=True)
    include_created: Optional[bool] = Field(None, alias='includeCreated', example=False)
    include_job_status: Optional[bool] = Field(
        None, alias='includeJobStatus', example=True
    )
    start_date: Optional[datetime] = Field(
        None, alias='startDate', example='2018-06-01'
    )
    end_date: Optional[datetime] = Field(None, alias='endDate', example='2019-05-31')
    include_children_jobs: Optional[bool] = Field(
        None, alias='includeChildrenJobs', example=False
    )
    project_job_only: Optional[bool] = Field(
        None, alias='projectJobOnly', example=False
    )
    no_project_job_only: Optional[bool] = Field(
        None, alias='noProjectJobOnly', example=False
    )
    job_status: Optional[str] = Field(None, alias='jobStatus', example='job-status')
    project_id: Optional[str] = Field(None, alias='projectId', example='project-id')
    design_id: Optional[str] = Field(None, alias='designId', example='design-id')
    include_combined: Optional[bool] = Field(
        None, alias='includeCombined', example=False
    )
    filter_by_name: Optional[str] = Field(None, alias='filterByName')


class AccountAllocationResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(None, alias='accountId')
    core_hours_available: Optional[float] = Field(None, alias='coreHoursAvailable')
    allocation_available: Optional[float] = Field(None, alias='allocationAvailable')
    recent_transactions: Optional[List[AccountLedger]] = Field(
        None, alias='recentTransactions'
    )
    email_address: Optional[str] = Field(None, alias='emailAddress')


class AllocateCoreHourRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    cognito_email: Optional[str] = Field(
        None, alias='cognitoEmail', description='email', example='xxx@onscale.com'
    )
    new_core_hours_allowed: Optional[float] = Field(
        None, alias='newCoreHoursAllowed', example=100.0
    )


class AccountBucketInformation(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(None, alias='accountId')
    bucket: Optional[str] = None
    root_dir: Optional[str] = Field(None, alias='rootDir')
    provider: Optional[str] = None
    region: Optional[str] = None


class OfflineLicenseResponse(BaseModel):
    signed_license_key: Optional[str] = Field(None, alias='signedLicenseKey')


class OfflineLicenseRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    shared_secret: Optional[str] = Field(
        None, alias='sharedSecret', example='shared-secret'
    )
    core_hours: Optional[float] = Field(None, alias='coreHours', example=20.0)


class OfflineTransaction(BaseModel):
    job_completed_timestamp: Optional[int] = Field(None, alias='jobCompletedTimestamp')
    milliseconds_consumed: Optional[int] = Field(None, alias='millisecondsConsumed')


class MonthlyUsage(BaseModel):
    month: Optional[int] = None
    year: Optional[int] = None
    total_amount: Optional[float] = Field(None, alias='totalAmount')
    overage_amount: Optional[float] = Field(None, alias='overageAmount')


class TagType(BaseModel):
    tag: Optional[str] = None
    type: Optional[str] = None


class TagTypeJobCost(BaseModel):
    tag_type: Optional[TagType] = Field(None, alias='tagType')
    job_cost: Optional[float] = Field(None, alias='jobCost')


class AccountDateRangeRequest(BaseModel):
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    start_day: Optional[int] = Field(
        None, alias='startDay', description='startDay', example=1
    )
    start_month: Optional[int] = Field(
        None, alias='startMonth', description='startMonth', example=0
    )
    start_year: Optional[int] = Field(
        None, alias='startYear', description='startYear', example=2018
    )
    end_day: Optional[int] = Field(
        None, alias='endDay', description='endDay', example=1
    )
    end_month: Optional[int] = Field(
        None, alias='endMonth', description='endMonth', example=0
    )
    end_year: Optional[int] = Field(
        None, alias='endYear', description='endYear', example=2019
    )


class AccountTagRequest(BaseModel):
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    tag_type: Optional[str] = Field(None, alias='tagType', example='ProjectTag')
    tag: Optional[str] = Field(None, example='TestTag1')
    start_day: Optional[int] = Field(
        None, alias='startDay', description='startDay', example=1
    )
    start_month: Optional[int] = Field(
        None, alias='startMonth', description='startMonth', example=0
    )
    start_year: Optional[int] = Field(
        None, alias='startYear', description='startYear', example=2018
    )
    end_day: Optional[int] = Field(
        None, alias='endDay', description='endDay', example=1
    )
    end_month: Optional[int] = Field(
        None, alias='endMonth', description='endMonth', example=0
    )
    end_year: Optional[int] = Field(
        None, alias='endYear', description='endYear', example=2019
    )


class SendCoreHourRequest(BaseModel):
    from_account_id: Optional[str] = Field(
        None, alias='fromAccountId', description='UUID', example='account-id'
    )
    to_account_id: Optional[str] = Field(
        None, alias='toAccountId', description='UUID', example='account-id'
    )
    core_hour_amount: Optional[float] = Field(
        None, alias='coreHourAmount', description='Float', example=20.0
    )


class AccountUserListPageResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    user_count: Optional[int] = Field(None, alias='userCount')
    page_count: Optional[int] = Field(None, alias='pageCount')
    page_size: Optional[int] = Field(None, alias='pageSize')
    page_number: Optional[int] = Field(None, alias='pageNumber')
    users: Optional[List[Contributor]] = None


class AccountUserListPageRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=20)


class EnterpriseTeamSummaryData(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(None, alias='accountId')
    account_name: Optional[str] = Field(None, alias='accountName')
    account_description: Optional[str] = Field(None, alias='accountDescription')
    number_of_projects: Optional[int] = Field(None, alias='numberOfProjects')
    number_of_jobs: Optional[int] = Field(None, alias='numberOfJobs')
    number_of_simulations: Optional[int] = Field(None, alias='numberOfSimulations')
    core_hours_credit: Optional[float] = Field(None, alias='coreHoursCredit')
    core_hours_debit: Optional[float] = Field(None, alias='coreHoursDebit')
    core_hours_available: Optional[float] = Field(None, alias='coreHoursAvailable')
    user_list: Optional[List[AccountAccess]] = Field(None, alias='userList')


class TeamUser(BaseModel):
    user_id: Optional[str] = Field(
        None, alias='userId', description='String', example='user-id'
    )
    account_lead: Optional[bool] = Field(None, alias='accountLead')
    max_core_hour_request: Optional[int] = Field(
        None, alias='maxCoreHourRequest', description='Long', example=100
    )


class UserCoreHourBalance(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(None, alias='accountId')
    account_name: Optional[str] = Field(None, alias='accountName')
    numerator: Optional[float] = None
    denominator: Optional[float] = None


class CalendarUsage(BaseModel):
    total_amount: Optional[float] = Field(None, alias='totalAmount')
    overage_amount: Optional[float] = Field(None, alias='overageAmount')
    year: Optional[int] = None
    quarter: Optional[int] = None
    month: Optional[int] = None
    week: Optional[int] = None
    day: Optional[int] = None


class GroupBy(Enum):
    YEARLY = 'YEARLY'
    QUARTERLY = 'QUARTERLY'
    MONTHLY = 'MONTHLY'
    WEEKLY = 'WEEKLY'
    DAILY = 'DAILY'


class UsageReportRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    group_by: GroupBy = Field(..., alias='groupBy', example='MONTHLY')
    start_date: datetime = Field(..., alias='startDate', example='2018-06-01')
    end_date: datetime = Field(..., alias='endDate', example='2019-05-31')


class UserUsageReportRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    user_id: Optional[str] = Field(None, alias='userId')


class Precision1(Enum):
    SINGLE = 'SINGLE'
    DOUBLE = 'DOUBLE'


class Analysis(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    analysis_id: Optional[str] = Field(
        None, alias='analysisId', description='UUID', example='analysis-id'
    )
    project_id: Optional[str] = Field(None, alias='projectId')
    design_id: Optional[str] = Field(None, alias='designId')
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    blob_id: Optional[str] = Field(None, alias='blobId')
    account_id: Optional[str] = Field(None, alias='accountId')
    user_id: Optional[str] = Field(None, alias='userId')
    job_id: Optional[str] = Field(None, alias='jobId')
    analysis_type: Optional[str] = Field(None, alias='analysisType')
    solver: Optional[str] = None
    time_duration: Optional[int] = Field(None, alias='timeDuration')
    time_step: Optional[int] = Field(None, alias='timeStep')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    cipher_salt: Optional[str] = Field(
        None,
        alias='cipherSalt',
        description='UUID',
        example='00000000-0000-0000-0000-000000000000',
    )
    estimate_hash: Optional[str] = Field(None, alias='estimateHash')
    precision: Optional[Precision1] = Field(None, example='single')
    python_hash: Optional[str] = Field(None, alias='pythonHash')
    life_time_limit: Optional[int] = Field(None, alias='lifeTimeLimit')
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')
    physics_types: Optional[List[str]] = Field(None, alias='physicsTypes')


class Physics(Enum):
    ACOUSTIC = 'ACOUSTIC'
    AEROACOUSTIC = 'AEROACOUSTIC'
    ELECTROMAGNETIC = 'ELECTROMAGNETIC'
    ELECTROMECHANICAL = 'ELECTROMECHANICAL'
    FLUID = 'FLUID'
    FLUIDELECTROMECHANICAL = 'FLUIDELECTROMECHANICAL'
    FLUIDELECTROTHERMOMECHANICAL = 'FLUIDELECTROTHERMOMECHANICAL'
    FLUIDMECHANICAL = 'FLUIDMECHANICAL'
    FLUIDTHERMAL = 'FLUIDTHERMAL'
    FLUIDTHERMOMECHANICAL = 'FLUIDTHERMOMECHANICAL'
    MECHANICAL = 'MECHANICAL'
    THERMAL = 'THERMAL'
    THERMOELECTROMAGNETIC = 'THERMOELECTROMAGNETIC'
    THERMOMECHANICAL = 'THERMOMECHANICAL'


class DesignInstance(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    design_instance_id: Optional[str] = Field(
        None, alias='designInstanceId', description='UUID', example='design-instance-id'
    )
    design_id: Optional[str] = Field(
        None, alias='designId', description='UUID', example='design-id'
    )
    project_id: Optional[str] = Field(None, alias='projectId')
    user_id: Optional[str] = Field(None, alias='userId')
    design_instance_title: Optional[str] = Field(
        None, alias='designInstanceTitle', example='Instance Title'
    )
    description: Optional[str] = None
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    design_instance_hash: Optional[str] = Field(None, alias='designInstanceHash')
    parent_design_instance_id: Optional[str] = Field(
        None, alias='parentDesignInstanceId'
    )
    analysis_list: Optional[List[Analysis]] = Field(None, alias='analysisList')
    locked: Optional[bool] = None
    archived: Optional[bool] = None


class ProjectListRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    include_user_ids: Optional[bool] = Field(
        None, alias='includeUserIds', example=False
    )
    include_usage: Optional[bool] = Field(None, alias='includeUsage', example=False)


class AccountListPageRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    page_size: Optional[int] = Field(None, alias='pageSize', example=10)
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    include_user_ids: Optional[bool] = Field(
        None, alias='includeUserIds', example=False
    )
    include_usage: Optional[bool] = Field(None, alias='includeUsage', example=False)


class User(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    user_id: Optional[str] = Field(None, alias='userId')
    cognito_email: Optional[str] = Field(None, alias='cognitoEmail')
    last_name: Optional[str] = Field(None, alias='lastName')
    first_name: Optional[str] = Field(None, alias='firstName')
    company_name: Optional[str] = Field(None, alias='companyName')
    department: Optional[str] = None
    title: Optional[str] = None
    phone_number: Optional[str] = Field(None, alias='phoneNumber')
    default_plan_code: Optional[str] = Field(None, alias='defaultPlanCode')
    registration_type: Optional[str] = Field(None, alias='registrationType')
    last_job_time: Optional[int] = Field(
        None, alias='lastJobTime', description='1585700000000', example=1585700000000
    )
    has_mfa: Optional[bool] = Field(None, alias='hasMFA')
    send_completion_email: Optional[bool] = Field(None, alias='sendCompletionEmail')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    last_active_date: Optional[datetime] = Field(None, alias='lastActiveDate')


class ObjectType(Enum):
    PROJECT = 'PROJECT'
    DESIGN = 'DESIGN'
    DESIGNINSTANCE = 'DESIGNINSTANCE'
    USER = 'USER'
    JOB = 'JOB'


class AccountSearchRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    keyword: str = Field(..., example='keyword')
    field_name: Optional[str] = Field(None, alias='fieldName', example='projectTitle')
    object_type: Optional[ObjectType] = Field(
        None, alias='objectType', description='String', example='PROJECT'
    )


class SubscriptionPlanResponse(BaseModel):
    account_plan_flavor_id: Optional[str] = Field(None, alias='accountPlanFlavorId')
    plan_code: Optional[str] = Field(None, alias='planCode')
    plan_category: Optional[str] = Field(None, alias='planCategory')
    plan_name: Optional[str] = Field(None, alias='planName')
    flavor_name: Optional[str] = Field(None, alias='flavorName')
    periodicity: Optional[str] = None
    currency: Optional[str] = None
    plan_rate: Optional[float] = Field(None, alias='planRate')
    plan_size: Optional[int] = Field(None, alias='planSize')
    balance: Optional[int] = None
    overage_rate: Optional[float] = Field(None, alias='overageRate')
    enabled: Optional[bool] = None


class AccountSubscription(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    active: Optional[bool] = None
    plan_code: Optional[str] = Field(None, alias='planCode')
    plan_name: Optional[str] = Field(None, alias='planName')
    currency: Optional[str] = None
    plan_rate: Optional[float] = Field(None, alias='planRate')
    periodicity: Optional[str] = None
    remaining_billing_circles: Optional[int] = Field(
        None, alias='remainingBillingCircles'
    )
    total_billing_circle: Optional[int] = Field(None, alias='totalBillingCircle')
    expiration_at: Optional[datetime] = Field(None, alias='expirationAt')
    current_period_end_at: Optional[datetime] = Field(None, alias='currentPeriodEndAt')
    update_at: Optional[datetime] = Field(None, alias='updateAt')


class SimulationStatusReportRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    user_id: Optional[str] = Field(None, alias='userId')
    start_date: Optional[datetime] = Field(
        None, alias='startDate', example='2018-06-01'
    )
    end_date: Optional[datetime] = Field(None, alias='endDate', example='2019-05-31')
    status_number_only: Optional[bool] = Field(
        None, alias='statusNumberOnly', example=False
    )


class SimulationStatusReportResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    request: Optional[SimulationStatusReportRequest] = None
    status_simulation_number: Optional[Dict[str, int]] = Field(
        None, alias='statusSimulationNumber'
    )
    simulation_status_map: Optional[Dict[str, str]] = Field(
        None, alias='simulationStatusMap'
    )


class AccountDockerTag(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(None, alias='accountId')
    docker_tag: Optional[str] = Field(None, alias='dockerTag')


class AccountTransaction(BaseModel):
    transaction_id: Optional[str] = Field(None, alias='transactionId')
    account_id: Optional[str] = Field(None, alias='accountId')
    invoice_id: Optional[str] = Field(None, alias='invoiceId')
    currency: Optional[str] = None
    description: Optional[str] = None
    transaction_type: Optional[str] = Field(None, alias='transactionType')
    transaction_state: Optional[str] = Field(None, alias='transactionState')
    created_at: Optional[int] = Field(
        None, alias='createdAt', description='1585700000000', example=1585700000000
    )
    collected_at: Optional[int] = Field(
        None, alias='collectedAt', description='1585700000000', example=1585700000000
    )
    payment_method: Optional[str] = Field(None, alias='paymentMethod')
    credit_last_four: Optional[str] = Field(None, alias='creditLastFour')
    amount_in_cents: Optional[int] = Field(None, alias='amountInCents')
    message: Optional[str] = None


class TransactionReportResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    page_count: Optional[int] = Field(None, alias='pageCount')
    page_number: Optional[int] = Field(None, alias='pageNumber')
    page_size: Optional[int] = Field(None, alias='pageSize')
    transaction_count: Optional[int] = Field(None, alias='transactionCount')
    transactions: Optional[List[AccountTransaction]] = None


class TransactionReportRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=10)
    transaction_type: Optional[str] = Field(
        None, alias='transactionType', example='purchase'
    )
    transaction_state: Optional[str] = Field(
        None, alias='transactionState', example='successful'
    )
    descending_sort: Optional[bool] = Field(None, alias='descendingSort', example=True)
    start_date: Optional[datetime] = Field(
        None, alias='startDate', example='2019-01-01'
    )
    end_date: Optional[datetime] = Field(None, alias='endDate', example='2020-01-01')


class AccountLedgerListRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    from_date: Optional[datetime] = Field(None, alias='fromDate', example='2020-10-01')
    to_date: Optional[datetime] = Field(None, alias='toDate', example='2020-11-01')


class AccountLedgerListPageResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    page_number: Optional[int] = Field(None, alias='pageNumber')
    page_size: Optional[int] = Field(None, alias='pageSize')
    ledger_count: Optional[int] = Field(None, alias='ledgerCount')
    page_count: Optional[int] = Field(None, alias='pageCount')
    ledger_list: Optional[List[AccountLedger]] = Field(None, alias='ledgerList')


class AccountLedgerListPageRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    from_date: Optional[datetime] = Field(None, alias='fromDate', example='2020-10-01')
    to_date: Optional[datetime] = Field(None, alias='toDate', example='2020-11-01')
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=20)
    filter_by_project_id: Optional[str] = Field(
        None, alias='filterByProjectId', example='project-id'
    )
    filter_by_project_name: Optional[str] = Field(None, alias='filterByProjectName')
    filter_by_project_description: Optional[str] = Field(
        None, alias='filterByProjectDescription'
    )


class AccountApplicationRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    application: Optional[str] = Field(
        None, description='String', example='application'
    )


class AccountOperationRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    operation: Optional[str] = Field(None, description='String', example='SIMULATION')


class AccountInvitation(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(None, alias='accountId')
    account_admin: Optional[bool] = Field(None, alias='accountAdmin')
    max_core_hour_request: Optional[int] = Field(None, alias='maxCoreHourRequest')
    email_address: Optional[str] = Field(None, alias='emailAddress')
    create_date: Optional[int] = Field(None, alias='createDate')
    expired_at: Optional[int] = Field(None, alias='expiredAt')
    accepted_at: Optional[int] = Field(None, alias='acceptedAt')
    expired: Optional[bool] = None


class AccountAccessInviteRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    emails: Optional[List[str]] = None
    max_core_hour_request: Optional[int] = Field(
        None, alias='maxCoreHourRequest', description='Integer', example=200
    )
    account_admin: Optional[bool] = Field(
        None, alias='accountAdmin', description='Boolean', example=False
    )
    expiration_days: Optional[int] = Field(
        None, alias='expirationDays', description='Integer', example=1
    )


class AccountAccessAcceptRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    email: Optional[str] = None


class ItemIdListRequest(BaseModel):
    item_id_list: Optional[List[str]] = Field(None, alias='itemIdList')


class SimulationsRunningResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    queued_simulations: Optional[int] = Field(None, alias='queuedSimulations')
    running_simulations: Optional[int] = Field(None, alias='runningSimulations')


class AccountSummaryData(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    account_name: Optional[str] = Field(None, alias='accountName')
    plan_code: Optional[str] = Field(None, alias='planCode')
    core_hours_available: Optional[float] = Field(None, alias='coreHoursAvailable')


class AccountData(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    account_name: Optional[str] = Field(None, alias='accountName')
    account_email: Optional[str] = Field(None, alias='accountEmail')
    subscription_type: Optional[str] = Field(None, alias='subscriptionType')
    plan_tier: Optional[str] = Field(None, alias='planTier')
    active_user_number: Optional[int] = Field(None, alias='activeUserNumber')
    date_created: Optional[datetime] = Field(None, alias='dateCreated')
    active: Optional[bool] = None
    date_expired: Optional[datetime] = Field(None, alias='dateExpired')


class AccountListPageResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_count: Optional[int] = Field(None, alias='accountCount')
    page_count: Optional[int] = Field(None, alias='pageCount')
    page_size: Optional[int] = Field(None, alias='pageSize')
    page_number: Optional[int] = Field(None, alias='pageNumber')
    account_list: Optional[List[AccountData]] = Field(None, alias='accountList')


class AdminListPageRequest(BaseModel):
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=20)
    create_date_from: Optional[datetime] = Field(None, alias='createDateFrom')
    create_date_to: Optional[datetime] = Field(None, alias='createDateTo')
    search_query: Optional[str] = Field(None, alias='searchQuery')
    filter_by_status: Optional[str] = Field(None, alias='filterByStatus')
    filter_by_tier: Optional[str] = Field(None, alias='filterByTier')


class DateRangeRequest(BaseModel):
    start_day: Optional[int] = Field(
        None, alias='startDay', description='startDay', example=1
    )
    start_month: Optional[int] = Field(
        None, alias='startMonth', description='startMonth', example=0
    )
    start_year: Optional[int] = Field(
        None, alias='startYear', description='startYear', example=2018
    )
    end_day: Optional[int] = Field(
        None, alias='endDay', description='endDay', example=1
    )
    end_month: Optional[int] = Field(
        None, alias='endMonth', description='endMonth', example=0
    )
    end_year: Optional[int] = Field(
        None, alias='endYear', description='endYear', example=2019
    )


class SearchRequest(BaseModel):
    search_criteria: Optional[str] = Field(
        None, alias='searchCriteria', example='steve'
    )


class ChartPoint(BaseModel):
    x: Optional[int] = None
    sub_chart_id: Optional[str] = Field(None, alias='subChartId')
    label: Optional[str] = None
    tooltip: Optional[str] = None
    values: Optional[List[float]] = None
    string_counter: Optional[List[List[str]]] = Field(None, alias='stringCounter')


class ReportType(Enum):
    ACTIVE_ACCOUNTS = 'ACTIVE_ACCOUNTS'
    PLANCODE = 'PLANCODE'
    CORE_HOUR_BURN = 'CORE_HOUR_BURN'
    TIMELINE = 'TIMELINE'


class LevelType(Enum):
    TOP = 'TOP'
    MIDDLE = 'MIDDLE'


class ChartReport(BaseModel):
    chart_id: Optional[str] = Field(None, alias='chartId')
    chart_title: Optional[str] = Field(None, alias='chartTitle')
    index_title: Optional[str] = Field(None, alias='indexTitle')
    value_title: Optional[str] = Field(None, alias='valueTitle')
    column_titles: Optional[List[str]] = Field(None, alias='columnTitles')
    chart_report_values: Optional[List[ChartPoint]] = Field(
        None, alias='chartReportValues'
    )
    min_value: Optional[float] = Field(None, alias='minValue')
    max_value: Optional[float] = Field(None, alias='maxValue')
    report_type: Optional[ReportType] = Field(None, alias='reportType')
    level_type: Optional[LevelType] = Field(None, alias='levelType')
    chart_value: Optional[int] = Field(None, alias='chartValue')
    values_are_dates: Optional[bool] = Field(None, alias='valuesAreDates')


class HistogramReport(BaseModel):
    chart_id: Optional[str] = Field(None, alias='chartId')
    chart_title: Optional[str] = Field(None, alias='chartTitle')
    labels_title: Optional[str] = Field(None, alias='labelsTitle')
    value_title: Optional[str] = Field(None, alias='valueTitle')
    data: Optional[Dict[str, float]] = None


class JobRequest(BaseModel):
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )


class DayRequest(BaseModel):
    year: Optional[int] = Field(None, description='Number', example=2018)
    month: Optional[int] = Field(None, description='Number', example=8)
    day: Optional[int] = Field(None, description='Number', example=10)
    calendar: Optional[datetime] = None


class HourlyBurnReport(BaseModel):
    hpcs: Optional[Dict[str, Hpc]] = None
    hours: Optional[Dict[str, Dict[str, float]]] = None


class SimulationProgress(BaseModel):
    simulation_id: Optional[str] = Field(None, alias='simulationId')
    progress: Optional[int] = None


class NodeReport(BaseModel):
    time_group_map: Optional[Dict[str, int]] = Field(None, alias='timeGroupMap')
    node_type: Optional[str] = Field(None, alias='nodeType')


class StringListResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    string_list: Optional[List[str]] = Field(None, alias='stringList')


class AccountReportRequest(BaseModel):
    emonth: Optional[int] = None
    eyear: Optional[int] = None
    sday: Optional[int] = None
    smonth: Optional[int] = None
    syear: Optional[int] = None
    eday: Optional[int] = None


class ContainerReport(BaseModel):
    time_group_map: Optional[Dict[str, int]] = Field(None, alias='timeGroupMap')
    container_type: Optional[str] = Field(None, alias='containerType')


class HpcReport(BaseModel):
    time_group_map: Optional[Dict[str, int]] = Field(None, alias='timeGroupMap')
    hpc_id: Optional[str] = Field(None, alias='hpcId')


class TimeGroup(BaseModel):
    group_id: Optional[str] = Field(None, alias='groupId')
    min_time: Optional[int] = Field(None, alias='minTime')
    max_time: Optional[int] = Field(None, alias='maxTime')


class TimeGroupReportRequest(BaseModel):
    start_day: Optional[int] = Field(
        None, alias='startDay', description='startDay', example=1
    )
    start_month: Optional[int] = Field(
        None, alias='startMonth', description='startMonth', example=0
    )
    start_year: Optional[int] = Field(
        None, alias='startYear', description='startYear', example=2018
    )
    end_day: Optional[int] = Field(
        None, alias='endDay', description='endDay', example=1
    )
    end_month: Optional[int] = Field(
        None, alias='endMonth', description='endMonth', example=0
    )
    end_year: Optional[int] = Field(
        None, alias='endYear', description='endYear', example=2019
    )
    time_groups: Optional[List[TimeGroup]] = Field(None, alias='timeGroups')


class AccountSetEnterpriseRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    enterprise: Optional[bool] = None


class AccountSetCoreAllowedRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    user_core_allowed: Optional[int] = Field(None, alias='userCoreAllowed', example=64)
    lead_core_allowed: Optional[int] = Field(None, alias='leadCoreAllowed', example=64)


class AccountSetRebateRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    rebate_rate: Optional[float] = Field(None, alias='rebateRate', example=50.0)


class AccountDockerTagUpdateRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    docker_tags: Optional[List[str]] = Field(None, alias='dockerTags')


class AccountPlanCode(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    plan_code: Optional[str] = Field(None, alias='planCode')
    plan_name: Optional[str] = Field(None, alias='planName')
    periodicity: Optional[str] = None
    active: Optional[bool] = None
    upgrade_level: Optional[int] = Field(None, alias='upgradeLevel')
    plan_category: Optional[str] = Field(None, alias='planCategory')


class AccountPlanUpdateRequest(BaseModel):
    plan_code: Optional[str] = Field(None, alias='planCode', example='on-free')
    plan_name: Optional[str] = Field(None, alias='planName', example='Free')
    periodicity: Optional[str] = Field(None, example='Monthly')
    active: Optional[bool] = Field(None, example=True)
    upgrade_level: Optional[int] = Field(None, alias='upgradeLevel', example=0)
    plan_category: Optional[str] = Field(None, alias='planCategory', example='Free')


class AccountDeleteResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account_to_be_deleted'
    )
    hash: Optional[str] = Field(None, example='hash_key_to_confirm_deletion')
    summary: Optional[Dict[str, Dict[str, Any]]] = None


class AccountDeleteRequest(BaseModel):
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-to-be-deleted'
    )
    hash: Optional[str] = Field(None, example='hash_key_to_confirm_deletion')


class AccountCoreHourData(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    parent_account_id: Optional[str] = Field(None, alias='parentAccountId')
    transaction_id: Optional[str] = Field(None, alias='transactionId')
    transaction_description: Optional[str] = Field(None, alias='transactionDescription')
    transaction_date: Optional[datetime] = Field(None, alias='transactionDate')
    transaction_type: Optional[str] = Field(None, alias='transactionType')
    transaction_amount: Optional[float] = Field(None, alias='transactionAmount')
    user_id: Optional[str] = Field(None, alias='userId')
    user_name: Optional[str] = Field(None, alias='userName')


class AccountCoreHourPageResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    page_count: Optional[int] = Field(None, alias='pageCount')
    page_size: Optional[int] = Field(None, alias='pageSize')
    page_number: Optional[int] = Field(None, alias='pageNumber')
    transaction_count: Optional[int] = Field(None, alias='transactionCount')
    transaction_list: Optional[List[AccountCoreHourData]] = Field(
        None, alias='transactionList'
    )


class AccountCoreHourPageRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    page_number: Optional[int] = Field(None, alias='pageNumber')
    page_size: Optional[int] = Field(None, alias='pageSize', example=20)
    transaction_date_from: Optional[datetime] = Field(None, alias='transactionDateFrom')
    transaction_date_to: Optional[datetime] = Field(None, alias='transactionDateTo')
    filter_by_user_id: Optional[str] = Field(None, alias='filterByUserId')
    filter_by_type: Optional[str] = Field(None, alias='filterByType')


class AccountStudyData(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    parent_account_id: Optional[str] = Field(None, alias='parentAccountId')
    study_id: Optional[str] = Field(None, alias='studyId')
    study_name: Optional[str] = Field(None, alias='studyName')
    study_cost: Optional[float] = Field(None, alias='studyCost')
    user_id: Optional[str] = Field(None, alias='userId')
    last_status_date: Optional[datetime] = Field(None, alias='lastStatusDate')
    last_status: Optional[str] = Field(None, alias='lastStatus')
    final_status: Optional[str] = Field(None, alias='finalStatus')
    user_name: Optional[str] = Field(None, alias='userName')


class AccountStudyPageResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    page_count: Optional[int] = Field(None, alias='pageCount')
    page_size: Optional[int] = Field(None, alias='pageSize')
    page_number: Optional[int] = Field(None, alias='pageNumber')
    study_count: Optional[int] = Field(None, alias='studyCount')
    study_list: Optional[List[AccountStudyData]] = Field(None, alias='studyList')


class AccountStudyPageRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    page_number: Optional[int] = Field(None, alias='pageNumber')
    page_size: Optional[int] = Field(None, alias='pageSize', example=20)
    start_date: Optional[datetime] = Field(None, alias='startDate')
    end_date: Optional[datetime] = Field(None, alias='endDate')
    search_query: Optional[str] = Field(None, alias='searchQuery')
    filter_by_user_id: Optional[str] = Field(None, alias='filterByUserId')
    filter_by_status: Optional[str] = Field(None, alias='filterByStatus')
    sort_by: Optional[str] = Field(None, alias='sortBy', example='lastStatusDate')
    descending_sort: Optional[bool] = Field(None, alias='descendingSort')


class PlanTierNumber(BaseModel):
    plan_tier: Optional[str] = Field(None, alias='planTier')
    total_number: Optional[int] = Field(None, alias='totalNumber')
    active_number: Optional[int] = Field(None, alias='activeNumber')


class PlanTierSummaryResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    plan_tier_number_map: Optional[Dict[str, PlanTierNumber]] = Field(
        None, alias='planTierNumberMap'
    )


class AdminAccountSummaryResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(None, alias='accountId')
    account_name: Optional[str] = Field(None, alias='accountName')
    plan_code: Optional[str] = Field(None, alias='planCode')
    plan_tier: Optional[str] = Field(None, alias='planTier')
    plan_size: Optional[float] = Field(None, alias='planSize')
    plan_rate: Optional[float] = Field(None, alias='planRate')
    core_hours_available: Optional[float] = Field(None, alias='coreHoursAvailable')
    total_core_hours_credited: Optional[float] = Field(
        None, alias='totalCoreHoursCredited'
    )
    total_core_hours_consumed: Optional[float] = Field(
        None, alias='totalCoreHoursConsumed'
    )
    current_period_core_hour_consumed: Optional[float] = Field(
        None, alias='currentPeriodCoreHourConsumed'
    )


class AdminAccountSubscriptionResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(None, alias='accountId')
    parent_account_id: Optional[str] = Field(None, alias='parentAccountId')
    account_name: Optional[str] = Field(None, alias='accountName')
    account_email: Optional[str] = Field(None, alias='accountEmail')
    active: Optional[bool] = None
    plan_code: Optional[str] = Field(None, alias='planCode')
    plan_tier: Optional[str] = Field(None, alias='planTier')
    plan_rate: Optional[float] = Field(None, alias='planRate')
    plan_size: Optional[float] = Field(None, alias='planSize')
    credit_limit: Optional[float] = Field(None, alias='creditLimit')
    user_core_allowed: Optional[int] = Field(None, alias='userCoreAllowed')
    lead_core_allowed: Optional[int] = Field(None, alias='leadCoreAllowed')
    academic: Optional[bool] = None
    current_term_start_date: Optional[int] = Field(None, alias='currentTermStartDate')
    current_term_end_date: Optional[int] = Field(None, alias='currentTermEndDate')
    current_period_start_date: Optional[int] = Field(
        None, alias='currentPeriodStartDate'
    )
    current_period_end_date: Optional[int] = Field(None, alias='currentPeriodEndDate')
    expiration_date: Optional[int] = Field(None, alias='expirationDate')
    trial_period: Optional[bool] = Field(None, alias='trialPeriod')
    auto_renew: Optional[bool] = Field(None, alias='autoRenew')
    new_plan: Optional[bool] = Field(None, alias='newPlan')
    has_recurly_account: Optional[bool] = Field(None, alias='hasRecurlyAccount')


class EmailRequest(BaseModel):
    email_address: Optional[str] = Field(
        None, alias='emailAddress', example='xxx@onscale.com'
    )


class AccountAdjustRequest(BaseModel):
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    core_hour_credit: Optional[float] = Field(
        None, alias='coreHourCredit', example=150.0
    )


class AccountProductRequest(BaseModel):
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    onscale_lab: Optional[bool] = Field(None, alias='onscaleLab')
    onscale_solve: Optional[bool] = Field(None, alias='onscaleSolve')
    onscale_cli: Optional[bool] = Field(None, alias='onscaleCli')
    onscale_python: Optional[bool] = Field(None, alias='onscalePython')
    beam_tool: Optional[bool] = Field(None, alias='beamTool')


class AccountPlanFlavor(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_plan_flavor_id: Optional[str] = Field(None, alias='accountPlanFlavorId')
    active: Optional[bool] = None
    plan_code: Optional[str] = Field(None, alias='planCode')
    name: Optional[str] = None
    description: Optional[str] = None
    academic: Optional[bool] = None
    currency: Optional[str] = None
    plan_rate: Optional[float] = Field(None, alias='planRate')
    invoiced_externally: Optional[bool] = Field(None, alias='invoicedExternally')
    upgradable: Optional[bool] = None
    plan_size: Optional[int] = Field(None, alias='planSize')
    overage_rate: Optional[float] = Field(None, alias='overageRate')
    credit_limit: Optional[float] = Field(None, alias='creditLimit')
    balance: Optional[int] = None
    products: Optional[List[str]] = None
    applications: Optional[List[str]] = None
    solvers: Optional[List[str]] = None
    solver_rates: Optional[Dict[str, float]] = Field(None, alias='solverRates')
    public_to: Optional[List[str]] = Field(None, alias='publicTo')
    product_upgrade_path: Optional[str] = Field(None, alias='productUpgradePath')
    trial_period_days: Optional[int] = Field(None, alias='trialPeriodDays')
    trial_core_hours: Optional[float] = Field(None, alias='trialCoreHours')
    create_date: Optional[datetime] = Field(None, alias='createDate')
    last_update: Optional[datetime] = Field(None, alias='lastUpdate')


class AccountPlanFlavorCreateRequest(BaseModel):
    active: Optional[bool] = Field(None, example=True)
    plan_code: Optional[str] = Field(None, alias='planCode', example='on-free')
    name: Optional[str] = Field(None, example='on-free sample flavor')
    description: Optional[str] = Field(None, example='on-free sample description')
    academic: Optional[bool] = Field(None, example=True)
    currency: Optional[str] = Field(None, example='USD')
    plan_rate: Optional[float] = Field(None, alias='planRate', example=0.0)
    invoiced_externally: Optional[bool] = Field(
        None, alias='invoicedExternally', example=False
    )
    upgradable: Optional[bool] = Field(None, example=True)
    plan_size: Optional[int] = Field(None, alias='planSize', example=10)
    overage_rate: Optional[float] = Field(None, alias='overageRate', example=4.0)
    credit_limit: Optional[float] = Field(None, alias='creditLimit', example=100.0)
    product_upgrade_path: Optional[str] = Field(
        None, alias='productUpgradePath', example='path1'
    )
    balance: Optional[int] = Field(None, example=0)
    products: Optional[List[str]] = None
    applications: Optional[List[str]] = None
    solvers: Optional[List[str]] = None
    solver_rates: Optional[Dict[str, float]] = Field(None, alias='solverRates')
    public_to: Optional[List[str]] = Field(None, alias='publicTo')


class AccountPlanFlavorUpdateRequest(BaseModel):
    active: Optional[bool] = Field(None, example=True)
    plan_code: Optional[str] = Field(None, alias='planCode', example='on-free')
    name: Optional[str] = Field(None, example='on-free sample flavor')
    description: Optional[str] = Field(None, example='on-free sample description')
    academic: Optional[bool] = Field(None, example=True)
    currency: Optional[str] = Field(None, example='USD')
    plan_rate: Optional[float] = Field(None, alias='planRate', example=0.0)
    invoiced_externally: Optional[bool] = Field(
        None, alias='invoicedExternally', example=False
    )
    upgradable: Optional[bool] = Field(None, example=True)
    plan_size: Optional[int] = Field(None, alias='planSize', example=10)
    overage_rate: Optional[float] = Field(None, alias='overageRate', example=4.0)
    credit_limit: Optional[float] = Field(None, alias='creditLimit', example=100.0)
    product_upgrade_path: Optional[str] = Field(
        None, alias='productUpgradePath', example='path1'
    )
    balance: Optional[int] = Field(None, example=0)
    products: Optional[List[str]] = None
    applications: Optional[List[str]] = None
    solvers: Optional[List[str]] = None
    solver_rates: Optional[Dict[str, float]] = Field(None, alias='solverRates')
    public_to: Optional[List[str]] = Field(None, alias='publicTo')
    account_plan_flavor_id: Optional[str] = Field(
        None,
        alias='accountPlanFlavorId',
        description='UUID',
        example='account-plan-flavor-id',
    )


class AccountPlanFlavorRequest(BaseModel):
    account_plan_flavor_id: Optional[str] = Field(
        None,
        alias='accountPlanFlavorId',
        description='UUID',
        example='account-plan-flavor-id',
    )


class AdminSubscriptionRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    plan_code: Optional[str] = Field(None, alias='planCode')
    academic: Optional[bool] = None
    currency: Optional[str] = None
    plan_rate: Optional[float] = Field(None, alias='planRate')
    invoiced_externally: Optional[bool] = Field(None, alias='invoicedExternally')
    plan_size: Optional[float] = Field(None, alias='planSize')
    balance: Optional[float] = None
    overage: Optional[bool] = None
    overage_rate: Optional[float] = Field(None, alias='overageRate')
    credit_limit: Optional[float] = Field(None, alias='creditLimit')
    trial_period_days: Optional[int] = Field(None, alias='trialPeriodDays')
    trial_core_hours: Optional[float] = Field(None, alias='trialCoreHours')
    onscale_lab: Optional[bool] = Field(None, alias='onscaleLab')
    onscale_solve: Optional[bool] = Field(None, alias='onscaleSolve')
    onscale_cli: Optional[bool] = Field(None, alias='onscaleCli')
    onscale_python: Optional[bool] = Field(None, alias='onscalePython')
    beam_tool: Optional[bool] = Field(None, alias='beamTool')
    applications: Optional[List[str]] = None
    solvers: Optional[List[str]] = None
    solver_rates: Optional[Dict[str, float]] = Field(None, alias='solverRates')
    product_upgrade_path: Optional[str] = Field(None, alias='productUpgradePath')
    total_billing_cycles: Optional[int] = Field(None, alias='totalBillingCycles')
    update_at_renewal: Optional[bool] = Field(
        None, alias='updateAtRenewal', example=False
    )


class NotificationSendRequest(BaseModel):
    notification_id: Optional[str] = Field(None, alias='notificationId')
    user_id_list: Optional[List[str]] = Field(None, alias='userIdList')


class Notification(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    notification_id: Optional[str] = Field(
        None, alias='notificationId', description='UUID', example='notification-id'
    )
    object_id: Optional[str] = Field(
        None, alias='objectId', description='UUID', example='object-id'
    )
    user_id: Optional[str] = Field(
        None, alias='userId', description='UUID', example='user-id'
    )
    object_type: Optional[str] = Field(None, alias='objectType')
    immediate_delivery: Optional[bool] = Field(None, alias='immediateDelivery')
    version: Optional[str] = None
    content: Optional[str] = None
    active: Optional[bool] = None
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    start_date: Optional[datetime] = Field(None, alias='startDate')
    end_date: Optional[int] = Field(
        None, alias='endDate', description='1585700000000', example=1585700000000
    )


class NotificationResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    notification: Optional[Notification] = None
    hash: Optional[str] = None


class NotificationBaseRequest(BaseModel):
    notification_id: Optional[str] = Field(None, alias='notificationId')


class NotificationBroadcastRequest(BaseModel):
    notification_id: Optional[str] = Field(None, alias='notificationId')
    hash: Optional[str] = None


class DockerTag(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId')
    create_date: Optional[int] = Field(None, alias='createDate')
    stage: Optional[str] = None
    active: Optional[bool] = None
    create_user_id: Optional[str] = Field(None, alias='createUserId')
    init_container: Optional[str] = Field(None, alias='initContainer')
    driver_solver: Optional[str] = Field(None, alias='driverSolver')
    driver_service: Optional[str] = Field(None, alias='driverService')
    indexer: Optional[str] = None
    sim_api: Optional[str] = Field(None, alias='simApi')
    cad_conversion_driver: Optional[str] = Field(None, alias='cadConversionDriver')
    post_processor_driver: Optional[str] = Field(None, alias='postProcessorDriver')
    ceetron_driver: Optional[str] = Field(None, alias='ceetronDriver')
    py_interpreter_driver: Optional[str] = Field(None, alias='pyInterpreterDriver')
    flex_driver: Optional[str] = Field(None, alias='flexDriver')
    flex_estimate_driver: Optional[str] = Field(None, alias='flexEstimateDriver')
    flex_master_driver: Optional[str] = Field(None, alias='flexMasterDriver')
    flex_slave_driver: Optional[str] = Field(None, alias='flexSlaveDriver')
    moebius_driver: Optional[str] = Field(None, alias='moebiusDriver')
    moebius_mesh_driver: Optional[str] = Field(None, alias='moebiusMeshDriver')
    moebius_estimate_driver: Optional[str] = Field(None, alias='moebiusEstimateDriver')
    moebius_master_driver: Optional[str] = Field(None, alias='moebiusMasterDriver')
    moebius_slave_driver: Optional[str] = Field(None, alias='moebiusSlaveDriver')
    reflex_driver: Optional[str] = Field(None, alias='reflexDriver')
    reflex_mesh_driver: Optional[str] = Field(None, alias='reflexMeshDriver')
    reflex_estimate_driver: Optional[str] = Field(None, alias='reflexEstimateDriver')
    reflex_mesh_and_estimate_driver: Optional[str] = Field(
        None, alias='reflexMeshAndEstimateDriver'
    )
    reflex_master_driver: Optional[str] = Field(None, alias='reflexMasterDriver')
    reflex_slave_driver: Optional[str] = Field(None, alias='reflexSlaveDriver')
    flex: Optional[str] = None
    reflex: Optional[str] = None
    moebius: Optional[str] = None
    open_foam: Optional[str] = Field(None, alias='openFoam')
    sparse_lizard: Optional[str] = Field(None, alias='sparseLizard')
    cad_conversion: Optional[str] = Field(None, alias='cadConversion')
    cad_interface: Optional[str] = Field(None, alias='cadInterface')
    flex_mesh: Optional[str] = Field(None, alias='flexMesh')
    reflex_mesh: Optional[str] = Field(None, alias='reflexMesh')
    moebius_mesh: Optional[str] = Field(None, alias='moebiusMesh')
    flex_estimate: Optional[str] = Field(None, alias='flexEstimate')
    reflex_estimate: Optional[str] = Field(None, alias='reflexEstimate')
    moebius_estimate: Optional[str] = Field(None, alias='moebiusEstimate')
    openfoam_estimate: Optional[str] = Field(None, alias='openfoamEstimate')
    reflex_validator: Optional[str] = Field(None, alias='reflexValidator')
    post_processor: Optional[str] = Field(None, alias='postProcessor')
    python_interpreter: Optional[str] = Field(None, alias='pythonInterpreter')
    simapi_notebook: Optional[str] = Field(None, alias='simapiNotebook')
    paraview_egl: Optional[str] = Field(None, alias='paraviewEgl')
    supervisor: Optional[str] = None
    sim_api_ver: Optional[str] = Field(None, alias='simApiVer')


class DockerTagCreateRequest(BaseModel):
    stage: Optional[str] = Field(None, example='test')
    init_container: Optional[str] = Field(None, alias='initContainer', example='latest')
    driver_solver: Optional[str] = Field(
        None, alias='driverSolver', example='kyle-driver'
    )
    flex: Optional[str] = Field(None, example='flex')
    reflex: Optional[str] = Field(None, example='reflex')
    moebius: Optional[str] = Field(None, example='moebius')
    open_foam: Optional[str] = Field(None, alias='openFoam', example='openfoam')
    cad_conversion: Optional[str] = Field(
        None, alias='cadConversion', example='cadconversion'
    )
    cad_interface: Optional[str] = Field(
        None, alias='cadInterface', example='cadinterface'
    )
    flex_mesh: Optional[str] = Field(None, alias='flexMesh', example='flexMesh')
    reflex_mesh: Optional[str] = Field(None, alias='reflexMesh', example='reflexMesh')
    moebius_mesh: Optional[str] = Field(
        None, alias='moebiusMesh', example='moebiusMesh'
    )
    flex_estimate: Optional[str] = Field(
        None, alias='flexEstimate', example='flexEstimate'
    )
    reflex_estimate: Optional[str] = Field(
        None, alias='reflexEstimate', example='reflexEstimate'
    )
    moebius_estimate: Optional[str] = Field(
        None, alias='moebiusEstimate', example='moebiusEstimate'
    )
    openfoam_estimate: Optional[str] = Field(
        None, alias='openfoamEstimate', example='openfoamEstimate'
    )
    post_processor: Optional[str] = Field(
        None, alias='postProcessor', example='postprocess'
    )
    simapi_notebook: Optional[str] = Field(
        None, alias='simapiNotebook', example='simapiNotebook'
    )
    supervisor: Optional[str] = Field(None, example='supervisor')
    sim_api_ver: Optional[str] = Field(None, alias='simApiVer', example='version-1.1')


class UserIdRequest(BaseModel):
    user_id: Optional[str] = Field(None, alias='userId')


class Audit(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    audit_id: Optional[str] = Field(None, alias='auditId')
    object_id: Optional[str] = Field(None, alias='objectId')
    action_type: Optional[str] = Field(None, alias='actionType')
    user_id: Optional[str] = Field(None, alias='userId')
    action_description: Optional[str] = Field(None, alias='actionDescription')
    action_detail: Optional[str] = Field(None, alias='actionDetail')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )


class ActionType(Enum):
    API_REFERRAL_PORTAL_2 = 'API_REFERRAL_PORTAL_2'
    API_REFERRAL_PORTAL_2_WIN = 'API_REFERRAL_PORTAL_2_WIN'


class AuditActionTypeRequest(BaseModel):
    action_type: Optional[ActionType] = Field(
        None, alias='actionType', example='API_REFERRAL_PORTAL_2'
    )


class ObjectIdRequest(BaseModel):
    object_id: Optional[str] = Field(
        None, alias='objectId', description='UUID', example='object-id'
    )


class AuthenticationResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    id_token: Optional[str] = Field(None, alias='idToken')
    access_token: Optional[str] = Field(None, alias='accessToken')
    refresh_token: Optional[str] = Field(None, alias='refreshToken')
    expires_in: Optional[int] = Field(None, alias='expiresIn')


class LoginRequest(BaseModel):
    email_address: str = Field(..., alias='emailAddress', example='xkcd@xkcd.com')
    password: str = Field(..., example='correcthorsebatterystaple')
    mfa_token: Optional[int] = Field(None, alias='mfaToken', example=123456)


class RefreshTokenRequest(BaseModel):
    refresh_token: Optional[str] = Field(
        None, alias='refreshToken', example='refreshTokenFromCognito'
    )


class DestinationRequest(BaseModel):
    destination: str = Field(..., example='https://solve.ngtest.portal.onscale.com')


class BlobType(Enum):
    BINCAD = 'BINCAD'
    BREP = 'BREP'
    CAD = 'CAD'
    CADMETADATA = 'CADMETADATA'
    COORDINATE_SYSTEM = 'COORDINATE_SYSTEM'
    CSV = 'CSV'
    ESTIMATION = 'ESTIMATION'
    ICON = 'ICON'
    IMAGE = 'IMAGE'
    INTERACTION = 'INTERACTION'
    LIST = 'LIST'
    LOAD = 'LOAD'
    MATERIAL = 'MATERIAL'
    MESHAUTO = 'MESHAUTO'
    MESHCUSTOM = 'MESHCUSTOM'
    MESHSUMMARY = 'MESHSUMMARY'
    MLDATA = 'MLDATA'
    MLMODEL = 'MLMODEL'
    MODELDB = 'MODELDB'
    MODELERMETADATA = 'MODELERMETADATA'
    NOTEBOOK = 'NOTEBOOK'
    ONSHAPE_ASSEMBLY_DEFINITION = 'ONSHAPE_ASSEMBLY_DEFINITION'
    PARAMETER = 'PARAMETER'
    PLOTDATA = 'PLOTDATA'
    PYSIMAPI = 'PYSIMAPI'
    PROTOBUF = 'PROTOBUF'
    RUNTIMEGRAPHIC = 'RUNTIMEGRAPHIC'
    SENSOR = 'SENSOR'
    SIMAPI = 'SIMAPI'
    SIMMETADATA = 'SIMMETADATA'
    PYTHON = 'PYTHON'
    PREFERENCES = 'PREFERENCES'
    THUMBNAIL = 'THUMBNAIL'
    RSAKEYPUBLIC = 'RSAKEYPUBLIC'
    RSAKEYPRIVATE = 'RSAKEYPRIVATE'
    VISUALIZATION = 'VISUALIZATION'


class ObjectType1(Enum):
    PROJECT = 'PROJECT'
    DESIGN = 'DESIGN'
    DESIGNINSTANCE = 'DESIGNINSTANCE'
    USER = 'USER'
    JOB = 'JOB'
    SIMULATION = 'SIMULATION'


class Blob(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    blob_id: Optional[str] = Field(None, alias='blobId')
    account_id: Optional[str] = Field(None, alias='accountId')
    object_id: Optional[str] = Field(None, alias='objectId')
    hpc_id: Optional[str] = Field(None, alias='hpcId')
    blob_type: BlobType = Field(
        ..., alias='blobType', description='String', example='CAD'
    )
    blob_mime_type: Optional[str] = Field(None, alias='blobMimeType')
    blob_description: Optional[str] = Field(None, alias='blobDescription')
    blob_path: Optional[str] = Field(None, alias='blobPath')
    blob_title: Optional[str] = Field(None, alias='blobTitle')
    original_file_name: Optional[str] = Field(None, alias='originalFileName')
    blob_source: Optional[str] = Field(None, alias='blobSource')
    file_size: Optional[int] = Field(None, alias='fileSize')
    create_date: Optional[int] = Field(None, alias='createDate')
    expiration_date: Optional[int] = Field(None, alias='expirationDate')
    object_type: ObjectType1 = Field(
        ..., alias='objectType', description='String', example='DESIGN'
    )
    parent_blob_id: Optional[str] = Field(None, alias='parentBlobId')
    hash: Optional[str] = None
    secondary_hash: Optional[str] = Field(None, alias='secondaryHash')
    user_id: Optional[str] = Field(None, alias='userId')
    blob_invalidated: Optional[bool] = Field(None, alias='blobInvalidated')


class BlobRequest(BaseModel):
    object_id: Optional[str] = Field(None, alias='objectId', example='object-id')
    blob_type: Optional[str] = Field(None, alias='blobType', example='CAD')
    object_type: Optional[str] = Field(None, alias='objectType', example='PROJECT')


class BlobIdRequest(BaseModel):
    blob_id: Optional[str] = Field(
        None, alias='blobId', description='UUID', example='object-id'
    )


class Method(Enum):
    POST = 'POST'
    GET = 'GET'
    PUT = 'PUT'
    DELETE = 'DELETE'


class HttpRequest(BaseModel):
    method: Optional[Method] = Field(None, description='string', example='POST')
    uri: Optional[str] = Field(None, description='string', example='https://uri')
    headers: Optional[Dict[str, str]] = None
    form_fields: Optional[Dict[str, str]] = Field(None, alias='formFields')


class BlobInterfaceRequest(BaseModel):
    blob_id: Optional[str] = Field(
        None, alias='blobId', description='UUID', example='blob-id'
    )
    domain1: Optional[int] = Field(None, example=1)
    domain2: Optional[int] = Field(None, example=4)


class ErrorCode(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    error_code: Optional[str] = Field(None, alias='errorCode')
    message: Optional[str] = None
    long_message: Optional[str] = Field(None, alias='longMessage')
    suggestion: Optional[str] = None
    severity: Optional[str] = None
    language: Optional[str] = None
    create_date: Optional[datetime] = Field(None, alias='createDate')


class ContainerStatusRequest(BaseModel):
    container_id: Optional[str] = Field(None, alias='containerId')
    container_type: Optional[str] = Field(None, alias='containerType')


class CouponRedeemable(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    coupon_redeemable_id: Optional[str] = Field(None, alias='couponRedeemableId')
    coupon_master_id: Optional[str] = Field(None, alias='couponMasterId')
    coupon_code: Optional[str] = Field(None, alias='couponCode')
    redeemed_core_hours: Optional[float] = Field(None, alias='redeemedCoreHours')
    redeemed_type: Optional[str] = Field(None, alias='redeemedType')
    var_account_id: Optional[str] = Field(None, alias='var_accountId')
    account_id: Optional[str] = Field(None, alias='accountId')
    account_ledger_id: Optional[str] = Field(None, alias='accountLedgerId')
    redeemed_date: Optional[datetime] = Field(None, alias='redeemedDate')
    void_date: Optional[datetime] = Field(None, alias='voidDate')
    expire_date: Optional[datetime] = Field(None, alias='expireDate')
    expired: Optional[bool] = None
    user_id: Optional[str] = Field(None, alias='userId')
    onshape_user_id: Optional[str] = Field(None, alias='onshapeUserId')
    create_user_id: Optional[str] = Field(None, alias='createUserId')
    create_date: Optional[datetime] = Field(None, alias='createDate')


class CouponMasterUpdateRequest(BaseModel):
    coupon_master_id: Optional[str] = Field(
        None, alias='couponMasterId', description='UUID', example='object-id'
    )
    core_hour_amount: Optional[float] = Field(
        None, alias='coreHourAmount', example=20.0
    )
    percentage: Optional[float] = Field(None, example=10.0)
    max_redeemable_times: Optional[int] = Field(
        None, alias='maxRedeemableTimes', example=100
    )
    expire_date: Optional[datetime] = Field(
        None, alias='expireDate', example='2021-10-01'
    )
    locked_days: Optional[int] = Field(None, alias='lockedDays', example=30)
    start_date: Optional[datetime] = Field(
        None, alias='startDate', example='2021-01-01'
    )
    coupon_name: Optional[str] = Field(
        None, alias='couponName', example='Master Coupon Name'
    )
    coupon_description: Optional[str] = Field(
        None, alias='couponDescription', example='Master Coupon Description'
    )


class CouponMasterRequest(BaseModel):
    coupon_master_id: Optional[str] = Field(
        None, alias='couponMasterId', description='UUID', example='object-id'
    )


class CouponMasterLoadRequest(BaseModel):
    coupon_master_id: Optional[str] = Field(
        None, alias='couponMasterId', description='UUID', example='object-id'
    )
    included_redeemable: Optional[bool] = Field(
        None, alias='includedRedeemable', example=False
    )


class CouponMasterListRequest(BaseModel):
    var_account_id: Optional[str] = Field(
        None, alias='var_accountId', description='UUID', example='var-account-id'
    )
    include_expired: Optional[bool] = Field(None, alias='includeExpired', example=False)


class CouponRedeemableCreateRequest(BaseModel):
    coupon_master_id: Optional[str] = Field(
        None, alias='couponMasterId', description='UUID', example='object-id'
    )
    account_id: Optional[str] = Field(None, alias='accountId')
    expire_date: Optional[datetime] = Field(
        None, alias='expireDate', example='2021-10-01'
    )


class CouponRedeemableRequest(BaseModel):
    coupon_redeemable_id: Optional[str] = Field(
        None, alias='couponRedeemableId', description='UUID', example='coupon-id'
    )


class CouponRedeemableListRequest(BaseModel):
    coupon_master_id: Optional[str] = Field(
        None, alias='couponMasterId', description='UUID', example='object-id'
    )
    var_account_id: Optional[str] = Field(
        None, alias='var_accountId', description='UUID', example='var-account-id'
    )
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    redeemed_only: Optional[bool] = Field(None, alias='redeemedOnly', example=False)
    not_redeemed_only: Optional[bool] = Field(
        None, alias='notRedeemedOnly', example=False
    )
    from_date: Optional[datetime] = Field(None, alias='fromDate', example='2021-01-01')
    to_date: Optional[datetime] = Field(None, alias='toDate', example='2021-11-01')


class CouponRedeemRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    coupon_code: Optional[str] = Field(
        None, alias='couponCode', description='String', example='coupon-code'
    )


class CouponCodeRequest(BaseModel):
    coupon_code: Optional[str] = Field(
        None, alias='couponCode', description='String', example='coupon-code'
    )


class CouponType(Enum):
    VAR = 'VAR'
    SINGLETON = 'SINGLETON'
    MULTIPLE = 'MULTIPLE'


class CouponMasterCreateRequest(BaseModel):
    coupon_type: Optional[CouponType] = Field(None, alias='couponType', example='VAR')
    coupon_code: Optional[str] = Field(None, alias='couponCode', example='COUPON_CODE')
    core_hour_amount: Optional[float] = Field(
        None, alias='coreHourAmount', example=20.0
    )
    percentage: Optional[float] = Field(None, example=10.0)
    var_account_id: Optional[str] = Field(
        None, alias='var_accountId', description='UUID', example='account-to-be-deleted'
    )
    max_redeemable_times: Optional[int] = Field(
        None, alias='maxRedeemableTimes', example=100
    )
    expired_date: Optional[datetime] = Field(
        None, alias='expiredDate', example='2021-10-01'
    )
    locked_days: Optional[int] = Field(None, alias='lockedDays', example=30)
    start_date: Optional[datetime] = Field(
        None, alias='startDate', example='2021-01-01'
    )
    coupon_name: Optional[str] = Field(
        None, alias='couponName', example='Master Coupon Name'
    )
    coupon_description: Optional[str] = Field(
        None, alias='couponDescription', example='Master Coupon Description'
    )


class JobFile(BaseModel):
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )
    file_name: Optional[str] = Field(None, alias='fileName')
    file_size: Optional[int] = Field(None, alias='fileSize')
    file_date: Optional[int] = Field(
        None, alias='fileDate', description='1585700000000', example=1585700000000
    )
    file_hash: Optional[str] = Field(
        None, alias='fileHash', description='Hex MD5 hash value', example='file-hash'
    )
    directory: Optional[bool] = None
    download_request: Optional[HttpRequest] = Field(None, alias='downloadRequest')


class DesignInstanceFileListRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None, alias='designInstanceId', description='UUID', example='object-id'
    )
    include_shared_file: Optional[bool] = Field(None, alias='includeSharedFile')
    directory: Optional[str] = None
    include_sub_directory: Optional[bool] = Field(
        None, alias='includeSubDirectory', example=True
    )


class DesignInstanceFileRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None, alias='designInstanceId', description='UUID', example='object-id'
    )
    shared_file: Optional[bool] = Field(None, alias='sharedFile', example=False)
    directory: Optional[str] = None
    file_name: Optional[str] = Field(None, alias='fileName')


class DesignInstanceFilePath(BaseModel):
    file_name: str = Field(
        ..., alias='fileName', description='UUID', example='disk.flxinp'
    )
    project_id: Optional[str] = Field(None, alias='projectId')
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    directory: Optional[str] = None
    path: Optional[str] = None


class CustomMeshParams(BaseModel):
    surface_fine_cell_size: Optional[str] = Field(None, alias='surfaceFineCellSize')
    surface_course_cell_size: Optional[str] = Field(None, alias='surfaceCourseCellSize')
    interior_cell_size: Optional[str] = Field(None, alias='interiorCellSize')
    cell_gradation: Optional[str] = Field(None, alias='cellGradation')
    custom: Optional[bool] = None


class MeshResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    mesh_id: Optional[str] = Field(None, alias='meshId')
    user_id: Optional[str] = Field(None, alias='userId')
    account_id: Optional[str] = Field(None, alias='accountId')
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    design_id: Optional[str] = Field(None, alias='designId')
    project_id: Optional[str] = Field(None, alias='projectId')
    life_time_limit: Optional[int] = Field(None, alias='lifeTimeLimit')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    start_date: Optional[datetime] = Field(None, alias='startDate')
    end_date: Optional[datetime] = Field(None, alias='endDate')
    solver: Optional[str] = None
    blob_id: Optional[str] = Field(None, alias='blobId')
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId')
    custom: Optional[bool] = None
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')
    custom_mesh_params: Optional[CustomMeshParams] = Field(
        None, alias='customMeshParams'
    )
    final_status: Optional[str] = Field(None, alias='finalStatus')
    auto_char_length: Optional[float] = Field(None, alias='autoCharLength')
    blob_hash: Optional[str] = Field(None, alias='blobHash')


class DesignInstanceRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None, alias='designInstanceId', description='UUID', example='object-id'
    )


class NotebookResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    url: Optional[str] = None
    secret: Optional[str] = None
    ch_cost_per_hour: Optional[float] = Field(None, alias='chCostPerHour')


class NotebookStartRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None, alias='designInstanceId', description='UUID', example='object-id'
    )
    docker_tag_id: Optional[str] = Field(
        None, alias='dockerTagId', description='UUID', example='docker-tag-id'
    )


class Precision2(Enum):
    SINGLE = 'SINGLE'
    DOUBLE = 'DOUBLE'


class AnalysisResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    design_id: Optional[str] = Field(
        None, alias='designId', description='UUID', example='design-id'
    )
    blob_id: Optional[str] = Field(
        None, alias='blobId', description='UUID', example='blob-id'
    )
    design_instance_id: Optional[str] = Field(
        None, alias='designInstanceId', description='UUID', example='design-instance-id'
    )
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project-id'
    )
    user_id: Optional[str] = Field(
        None, alias='userId', description='UUID', example='user-id'
    )
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    solver: Optional[str] = None
    precision: Optional[Precision2] = Field(None, example='single')
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')
    analysis_id: Optional[str] = Field(
        None, alias='analysisId', description='UUID', example='analysis-id'
    )
    analysis_type: Optional[str] = Field(None, alias='analysisType')
    time_duration: Optional[int] = Field(None, alias='timeDuration')
    time_step: Optional[int] = Field(None, alias='timeStep')
    estimate_hash: Optional[str] = Field(None, alias='estimateHash')
    python_hash: Optional[str] = Field(None, alias='pythonHash')
    physics_types: Optional[List[str]] = Field(None, alias='physicsTypes')
    life_time_limit: Optional[int] = Field(None, alias='lifeTimeLimit')
    cipher_salt: Optional[str] = Field(
        None,
        alias='cipherSalt',
        description='UUID',
        example='00000000-0000-0000-0000-000000000000',
    )


class Solver(Enum):
    FLEX = 'FLEX'
    REFLEX = 'REFLEX'
    OPENFOAM = 'OPENFOAM'
    MOEBIUS = 'MOEBIUS'


class Precision3(Enum):
    DOUBLE = 'DOUBLE'
    SINGLE = 'SINGLE'


class AnalysisCreateRequest(BaseModel):
    account_id: str = Field(
        ..., alias='accountId', description='UUID', example='account-id'
    )
    design_instance_id: str = Field(
        ..., alias='designInstanceId', description='UUID', example='design-instance-id'
    )
    blob_id: str = Field(..., alias='blobId', description='UUID', example='blob-id')
    analysis_type: Optional[str] = Field(
        None, alias='analysisType', example='Simulation'
    )
    solver: Optional[Solver] = Field(None, example='flex')
    time_duration: Optional[int] = Field(None, alias='timeDuration')
    time_step: Optional[int] = Field(None, alias='timeStep')
    precision: Precision3 = Field(..., description='string', example='DOUBLE')
    init_job: Optional[bool] = Field(
        None, alias='initJob', description='Boolean', example=True
    )
    docker_tag: Optional[str] = Field(
        None, alias='dockerTag', description='string', example='flexSolver'
    )
    docker_tag_id: Optional[str] = Field(
        None, alias='dockerTagId', description='UUID', example='docker-tag-id'
    )
    python_hash: Optional[str] = Field(
        None, alias='pythonHash', description='string', example='pythonHash'
    )
    mesh_hash: Optional[str] = Field(
        None, alias='meshHash', description='string', example='meshHash'
    )
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')
    physics_types: Optional[List[str]] = Field(None, alias='physicsTypes')


class AnalysisRequest(BaseModel):
    analysis_id: str = Field(
        ..., alias='analysisId', description='UUID', example='analysis-id'
    )


class AnalysisSubmitRequest(BaseModel):
    analysis_id: str = Field(
        ..., alias='analysisId', description='UUID', example='analysis-id'
    )
    estimate_hash: Optional[str] = Field(None, alias='estimateHash', example='hash')
    job_name: Optional[str] = Field(None, alias='jobName', example='Solid Mechanics')
    number_of_cores: Optional[int] = Field(None, alias='numberOfCores', example=2)
    number_of_parts: Optional[int] = Field(None, alias='numberOfParts')
    estimated_run_time: Optional[int] = Field(
        None, alias='estimatedRunTime', example=123
    )
    estimated_memory: Optional[int] = Field(None, alias='estimatedMemory', example=9)
    parameters: Optional[Dict[str, List[str]]] = None
    console_parameters: Optional[List[str]] = Field(None, alias='consoleParameters')
    required_blobs: Optional[List[List[str]]] = Field(None, alias='requiredBlobs')
    core_hour_estimate: Optional[float] = Field(None, alias='coreHourEstimate')
    string_to_hash: Optional[str] = Field(None, alias='stringToHash')
    string_to_hash_extra: Optional[str] = Field(None, alias='stringToHashExtra')


class AnalysisSearchRequest(BaseModel):
    design_instance_id: str = Field(
        ..., alias='designInstanceId', description='UUID', example='design-instance-id'
    )
    python_hash: Optional[str] = Field(
        None, alias='pythonHash', description='string', example='pythonHash'
    )


class DesignBlobRequest(BaseModel):
    design_id: Optional[str] = Field(None, alias='designId')
    blob_id: Optional[str] = Field(None, alias='blobId')


class DesignRequest(BaseModel):
    design_id: Optional[str] = Field(
        None, alias='designId', description='UUID', example='object-id'
    )


class DesignUpdateRequest(BaseModel):
    design_id: Optional[str] = Field(
        None, alias='designId', description='UUID', example='object-id'
    )
    design_title: Optional[str] = Field(None, alias='designTitle', example='Design #1')
    design_description: Optional[str] = Field(
        None, alias='designDescription', example='Design Description'
    )
    design_goal: Optional[str] = Field(None, alias='designGoal', example='Design Goal')


class DesignUpdateTitleRequest(BaseModel):
    design_id: Optional[str] = Field(
        None, alias='designId', description='UUID', example='object-id'
    )
    design_title: Optional[str] = Field(None, alias='designTitle', example='Design #1')


class DesignUpdateGoalRequest(BaseModel):
    design_id: Optional[str] = Field(
        None, alias='designId', description='UUID', example='object-id'
    )
    design_goal: Optional[str] = Field(None, alias='designGoal')


class DesignUpdateDescriptionRequest(BaseModel):
    design_id: Optional[str] = Field(
        None, alias='designId', description='UUID', example='object-id'
    )
    design_description: Optional[str] = Field(
        None, alias='designDescription', example='Design Description'
    )


class InstanceUpdateTitleRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None, alias='designInstanceId', description='UUID', example='design-instance-id'
    )
    design_instance_title: Optional[str] = Field(
        None, alias='designInstanceTitle', example='Instance Title'
    )
    description: Optional[str] = Field(None, example='Default')


class MeshIdRequest(BaseModel):
    mesh_id: Optional[str] = Field(
        None, alias='meshId', description='UUID', example='object-id'
    )


class Physics1(Enum):
    ACOUSTIC = 'ACOUSTIC'
    AEROACOUSTIC = 'AEROACOUSTIC'
    ELECTROMAGNETIC = 'ELECTROMAGNETIC'
    ELECTROMECHANICAL = 'ELECTROMECHANICAL'
    FLUID = 'FLUID'
    FLUIDELECTROMECHANICAL = 'FLUIDELECTROMECHANICAL'
    FLUIDELECTROTHERMOMECHANICAL = 'FLUIDELECTROTHERMOMECHANICAL'
    FLUIDMECHANICAL = 'FLUIDMECHANICAL'
    FLUIDTHERMAL = 'FLUIDTHERMAL'
    FLUIDTHERMOMECHANICAL = 'FLUIDTHERMOMECHANICAL'
    MECHANICAL = 'MECHANICAL'
    THERMAL = 'THERMAL'
    THERMOELECTROMAGNETIC = 'THERMOELECTROMAGNETIC'
    THERMOMECHANICAL = 'THERMOMECHANICAL'


class DesignCreateRequest(BaseModel):
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project-id'
    )
    design_title: Optional[str] = Field(None, alias='designTitle', example='Design #1')
    design_description: Optional[str] = Field(
        None, alias='designDescription', example='Design Description'
    )
    design_goal: Optional[str] = Field(None, alias='designGoal')
    physics: Optional[Physics1] = Field(None, example='MECHANICAL')


class DesignCloneRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None, alias='designInstanceId', description='UUID', example='object-id'
    )
    cloned_design_title: Optional[str] = Field(
        None, alias='clonedDesignTitle', example='New Design'
    )
    cloned_instance_title: Optional[str] = Field(
        None, alias='clonedInstanceTitle', example='Version 1'
    )


class InstanceCreateRequest(BaseModel):
    design_id: Optional[str] = Field(
        None, alias='designId', description='UUID', example='object-id'
    )
    design_instance_title: Optional[str] = Field(
        None, alias='designInstanceTitle', example='Instance Title'
    )
    description: Optional[str] = Field(None, example='Default')
    design_instance_id: Optional[str] = Field(
        None, alias='designInstanceId', description='UUID', example='object-id'
    )
    design_instance_hash: Optional[str] = Field(None, alias='designInstanceHash')


class DesignArchiveRequest(BaseModel):
    design_id: Optional[str] = Field(
        None, alias='designId', description='UUID', example='object-id'
    )
    archive: Optional[bool] = None


class DesignInstanceArchiveRequest(BaseModel):
    design_instance_id: Optional[str] = Field(
        None, alias='designInstanceId', description='UUID', example='object-id'
    )
    archive: Optional[bool] = None


class Mesh(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    mesh_id: Optional[str] = Field(None, alias='meshId')
    user_id: Optional[str] = Field(None, alias='userId')
    account_id: Optional[str] = Field(None, alias='accountId')
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    design_id: Optional[str] = Field(None, alias='designId')
    project_id: Optional[str] = Field(None, alias='projectId')
    life_time_limit: Optional[int] = Field(None, alias='lifeTimeLimit')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    start_date: Optional[datetime] = Field(None, alias='startDate')
    end_date: Optional[datetime] = Field(None, alias='endDate')
    solver: Optional[str] = None
    blob_id: Optional[str] = Field(None, alias='blobId')
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId')
    custom: Optional[bool] = None
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')
    custom_mesh_params: Optional[CustomMeshParams] = Field(
        None, alias='customMeshParams'
    )
    final_status: Optional[str] = Field(None, alias='finalStatus')
    auto_char_length: Optional[float] = Field(None, alias='autoCharLength')


class Solver1(Enum):
    FLEX = 'FLEX'
    REFLEX = 'REFLEX'
    OPENFOAM = 'OPENFOAM'
    MOEBIUS = 'MOEBIUS'


class MeshCreateRequest(BaseModel):
    design_instance_id: str = Field(
        ..., alias='designInstanceId', description='UUID', example='docker-tag-id'
    )
    blob_id: str = Field(..., alias='blobId', description='UUID', example='blob-id')
    solver: Optional[Solver1] = Field(None, example='flex')
    docker_tag: Optional[str] = Field(
        None, alias='dockerTag', description='string', example='flexSolver'
    )
    docker_tag_id: Optional[str] = Field(
        None, alias='dockerTagId', description='UUID', example='docker-tag-id'
    )
    python_hash: Optional[str] = Field(
        None, alias='pythonHash', description='string', example='pythonHash'
    )
    mesh_hash: Optional[str] = Field(
        None, alias='meshHash', description='string', example='meshHash'
    )
    surface_fine_cell_size: Optional[str] = Field(None, alias='surfaceFineCellSize')
    surface_course_cell_size: Optional[str] = Field(None, alias='surfaceCourseCellSize')
    interior_cell_size: Optional[str] = Field(None, alias='interiorCellSize')
    cell_gradation: Optional[str] = Field(None, alias='cellGradation')
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')


class FeatureFlagCheckResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    feature_flag_id: Optional[str] = Field(
        None,
        alias='featureFlagId',
        description='The name of the feature flag.',
        example='foo',
    )
    enabled: Optional[bool] = Field(
        None,
        description='Whether or not the feature flag is enabled. Defaults to false if the feature flag does not exist.',
        example=False,
    )


class AuthType(Enum):
    USER_ID = 'USERID'
    ACCOUNT_ID = 'ACCOUNTID'
    GROUP_ID = 'GROUPID'
    EMAIL_DOMAIN = 'EMAILDOMAIN'


class FeatureFlag(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    feature_flag_id: Optional[str] = Field(
        None,
        alias='featureFlagId',
        description='The name of the feature flag.',
        example='foo',
    )
    feature_name: Optional[str] = Field(None, alias='featureName')
    enabled: Optional[bool] = Field(
        None,
        description='Whether or not the feature flag is enabled. Defaults to false if the feature flag does not exist.',
        example=False,
    )
    auth_type: Optional[AuthType] = Field(
        None,
        alias='authType',
        description='The class of which the authObjectId identifies.',
        example='accountId',
    )
    auth_values: Optional[List[str]] = Field(None, alias='authValues')
    sample_rate: Optional[float] = Field(None, alias='sampleRate')
    create_date: Optional[datetime] = Field(None, alias='createDate')
    last_update: Optional[datetime] = Field(None, alias='lastUpdate')
    user_id: Optional[str] = Field(None, alias='userId')
    last_update_by: Optional[str] = Field(None, alias='lastUpdateBy')
    stages: Optional[List[str]] = Field(
        None, description='The name of the stages to apply it to.', example='foo'
    )


class AuthType1(Enum):
    USER_ID = 'USERID'
    ACCOUNT_ID = 'ACCOUNTID'
    GROUP_ID = 'GROUPID'
    EMAIL_DOMAIN = 'EMAILDOMAIN'


class FeatureFlagUpdateRequest(BaseModel):
    feature_flag_id: Optional[str] = Field(
        None, alias='featureFlagId', description='UUID', example='feature-flag-id'
    )
    feature_name: Optional[str] = Field(
        None,
        alias='featureName',
        description='The UUID of the object about which this feature flag pertains. For example, the user id of a user.',
        example='feature-name',
    )
    enabled: bool = Field(
        ..., description='Whether or not the feature is enabled.', example=True
    )
    auth_type: Optional[AuthType1] = Field(
        None,
        alias='authType',
        description='The id name of the class of which the authObjectId identifies. Null identifies there are no restrictions.',
        example='accountId',
    )
    auth_values: Optional[List[str]] = Field(None, alias='authValues')
    sample_rate: Optional[float] = Field(
        None, alias='sampleRate', description='Placeholder. Not working.', example=1.0
    )


class UserIdGroupId(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    user_id: Optional[str] = Field(
        None, alias='userId', description='UUID', example='user-id'
    )
    group_id: Optional[str] = Field(
        None, alias='groupId', description='UUID', example='group-id'
    )


class GroupCreateRequest(BaseModel):
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    group_name: Optional[str] = Field(
        None, alias='groupName', example='Design Group #1'
    )
    user_id_list: Optional[List[str]] = Field(None, alias='userIdList')


class GroupUserRequest(BaseModel):
    group_id: Optional[str] = Field(
        None, alias='groupId', description='UUID', example='object-id'
    )
    user_id_list: Optional[List[str]] = Field(None, alias='userIdList')


class GroupRequest(BaseModel):
    group_id: Optional[str] = Field(
        None, alias='groupId', description='UUID', example='object-id'
    )


class FilePath(BaseModel):
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )
    simulation_id: Optional[str] = Field(
        None, alias='simulationId', description='UUID', example='simulation-id'
    )
    file_name: str = Field(
        ..., alias='fileName', description='UUID', example='disk.flxinp'
    )
    path: Optional[str] = None


class AESKey(BaseModel):
    plaintext_key: Optional[str] = Field(
        None,
        alias='plaintextKey',
        description='base64 encoded byte[]',
        example='a/VqYX0QWgplY0uGTlSC3H...',
    )


class FileAlias(BaseModel):
    file_name: Optional[str] = Field(None, alias='fileName')
    file_alias: Optional[str] = Field(None, alias='fileAlias')


class JobGetKeyResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )
    key: Optional[AESKey] = None


class TemporaryCredential(BaseModel):
    key: Optional[str] = None
    secret: Optional[str] = None
    session_id: Optional[str] = Field(None, alias='sessionId')


class JobCreateResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )


class JobInitRequest(BaseModel):
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    hpc_id: Optional[str] = Field(
        None, alias='hpcId', description='UUID', example='hpc-id'
    )


class JobRestartRequest(BaseModel):
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )
    simulation_parameters: Optional[List[str]] = Field(
        None, alias='simulationParameters'
    )


class Precision4(Enum):
    SINGLE = 'SINGLE'
    DOUBLE = 'DOUBLE'


class Estimate(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    estimate_id: Optional[str] = Field(None, alias='estimateId')
    job_id: Optional[str] = Field(None, alias='jobId')
    user_id: Optional[str] = Field(None, alias='userId')
    life_time_limit: Optional[int] = Field(None, alias='lifeTimeLimit')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    cipher_salt: Optional[str] = Field(
        None,
        alias='cipherSalt',
        description='UUID',
        example='00000000-0000-0000-0000-000000000000',
    )
    precision: Optional[Precision4] = Field(None, example='single')
    solver: Optional[str] = None
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId')
    blob_id: Optional[str] = Field(None, alias='blobId')
    application: Optional[str] = None
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')


class Solver2(Enum):
    FLEX = 'FLEX'
    REFLEX = 'REFLEX'
    OPENFOAM = 'OPENFOAM'
    MOEBIUS = 'MOEBIUS'


class Precision5(Enum):
    DOUBLE = 'DOUBLE'
    SINGLE = 'SINGLE'


class JobEstimateRequest(BaseModel):
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )
    blob_id: Optional[str] = Field(
        None, alias='blobId', description='UUID', example='blob-id'
    )
    solver: Optional[Solver2] = Field(None, example='reflex')
    precision: Precision5 = Field(..., description='string', example='DOUBLE')
    docker_tag: Optional[str] = Field(None, alias='dockerTag', description='string')
    docker_tag_id: Optional[str] = Field(
        None, alias='dockerTagId', description='UUID', example='docker-tag-id'
    )
    application: Optional[str] = None
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')


class SimulationRestartRequest(BaseModel):
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )
    simulation_id: Optional[str] = Field(
        None, alias='simulationId', description='UUID', example='simulation-id'
    )
    time_to_end: Optional[str] = Field(
        None,
        alias='timeToEnd',
        description='seconds as scientific notation',
        example='1e-3',
    )
    new_ram_estimate: Optional[int] = Field(
        None,
        alias='newRamEstimate',
        description='updated ram estimate in MBs',
        example=1000,
    )
    restart_file: Optional[str] = Field(
        None,
        alias='restartFile',
        description='file used to seed simulation',
        example='restart_data.bin',
    )


class JobLoadRequest(BaseModel):
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )
    exclude_simulation: Optional[bool] = Field(
        None, alias='excludeSimulation', example=False
    )
    exclude_job_status: Optional[bool] = Field(
        None, alias='excludeJobStatus', example=False
    )


class JobCostResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    job_id: Optional[str] = Field(
        None, alias='jobId', description='float', example='11.45'
    )
    job_cost: Optional[float] = Field(None, alias='jobCost')


class JobListLoadRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    start_date: Optional[datetime] = Field(
        None, alias='startDate', example='2020-06-01'
    )
    end_date: Optional[datetime] = Field(None, alias='endDate', example='2020-10-01')
    max_num: Optional[int] = Field(None, alias='maxNum', example=100)


class JobListPageRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=20)
    include_created: Optional[bool] = Field(None, alias='includeCreated', example=False)
    include_queued: Optional[bool] = Field(None, alias='includeQueued', example=True)
    include_finished: Optional[bool] = Field(
        None, alias='includeFinished', example=True
    )
    include_children_account: Optional[bool] = Field(
        None, alias='includeChildrenAccount', example=False
    )
    project_id: Optional[str] = Field(None, alias='projectId')
    design_id: Optional[str] = Field(None, alias='designId')
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    include_job_status: Optional[bool] = Field(
        None, alias='includeJobStatus', example=True
    )
    start_date: Optional[datetime] = Field(
        None, alias='startDate', example='2018-06-01'
    )
    end_date: Optional[datetime] = Field(None, alias='endDate', example='2019-05-31')
    include_children_jobs: Optional[bool] = Field(
        None, alias='includeChildrenJobs', example=False
    )
    project_job_only: Optional[bool] = Field(
        None, alias='projectJobOnly', example=False
    )
    no_project_job_only: Optional[bool] = Field(
        None, alias='noProjectJobOnly', example=False
    )
    include_project_access_jobs: Optional[bool] = Field(
        None, alias='includeProjectAccessJobs', example=False
    )
    job_status: Optional[str] = Field(None, alias='jobStatus', example='finished')
    include_combined: Optional[bool] = Field(
        None, alias='includeCombined', example=False
    )
    filter_by_name: Optional[str] = Field(None, alias='filterByName')


class ProjectContributor(BaseModel):
    user_id: Optional[str] = Field(None, alias='userId')
    first_name: Optional[str] = Field(None, alias='firstName')
    last_name: Optional[str] = Field(None, alias='lastName')


class SolveJobData(BaseModel):
    job_id: Optional[str] = Field(None, alias='jobId')
    account_id: Optional[str] = Field(None, alias='accountId')
    job_name: Optional[str] = Field(None, alias='jobName')
    simulation_count: Optional[int] = Field(None, alias='simulationCount')
    project_id: Optional[str] = Field(None, alias='projectId')
    design_id: Optional[str] = Field(None, alias='designId')
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    job_cost: Optional[float] = Field(None, alias='jobCost')
    user_id: Optional[str] = Field(None, alias='userId')
    last_status: Optional[str] = Field(None, alias='lastStatus')
    last_status_date: Optional[datetime] = Field(None, alias='lastStatusDate')
    final_status: Optional[str] = Field(None, alias='finalStatus')
    queued_status_date: Optional[datetime] = Field(None, alias='queuedStatusDate')
    physics_types: Optional[List[str]] = Field(None, alias='physicsTypes')
    design_title: Optional[str] = Field(None, alias='designTitle')
    design_instance_title: Optional[str] = Field(None, alias='designInstanceTitle')
    project_contributors: Optional[List[ProjectContributor]] = Field(
        None, alias='projectContributors'
    )


class ProjectOwner(Enum):
    USER = 'USER'
    TEAM = 'TEAM'


class JobAllListPageRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=20)
    job_status: Optional[str] = Field(None, alias='jobStatus', example='Finished')
    job_name: Optional[str] = Field(None, alias='jobName')
    start_date: Optional[datetime] = Field(None, alias='startDate')
    end_date: Optional[datetime] = Field(None, alias='endDate')
    author_user_id: Optional[str] = Field(None, alias='authorUserId')
    project_owner: Optional[ProjectOwner] = Field(
        None, alias='projectOwner', example='user'
    )


class ProjectOwner1(Enum):
    USER = 'USER'
    TEAM = 'TEAM'


class JobSolveListPageRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=20)
    job_status: Optional[str] = Field(None, alias='jobStatus', example='Finished')
    job_name: Optional[str] = Field(None, alias='jobName')
    start_date: Optional[datetime] = Field(None, alias='startDate')
    end_date: Optional[datetime] = Field(None, alias='endDate')
    project_id: Optional[str] = Field(None, alias='projectId')
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    author_user_id: Optional[str] = Field(None, alias='authorUserId')
    project_owner: Optional[ProjectOwner1] = Field(
        None, alias='projectOwner', example='user'
    )


class JobProgress(BaseModel):
    job_id: Optional[str] = Field(None, alias='jobId')
    simulation_progress_list: Optional[List[SimulationProgress]] = Field(
        None, alias='simulationProgressList'
    )


class Status(Enum):
    NOTFOUND = 'NOTFOUND'
    STOPPED = 'STOPPED'


class StopSimulationResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    job_id: Optional[str] = Field(None, alias='jobId')
    simulation_id: Optional[str] = Field(None, alias='simulationId')
    status: Optional[Status] = None


class SimulationRequest(BaseModel):
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )
    simulation_id: Optional[str] = Field(
        None, alias='simulationId', description='UUID', example='simulation-id'
    )


class Status1(Enum):
    NOTFOUND = 'NOTFOUND'
    PAUSED = 'PAUSED'
    NOTPAUSED = 'NOTPAUSED'


class PauseSimulationResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    job_id: Optional[str] = Field(None, alias='jobId')
    simulation_id: Optional[str] = Field(None, alias='simulationId')
    status: Optional[Status1] = None
    last_simulation_status: Optional[str] = Field(None, alias='lastSimulationStatus')


class JobAccess(BaseModel):
    cognito_email: Optional[str] = Field(
        None, alias='cognitoEmail', description='email', example='xxx@onscale.com'
    )
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )


class JobAccessRequest(BaseModel):
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )
    cognito_email: Optional[str] = Field(
        None, alias='cognitoEmail', description='email', example='xxx@onscale.com'
    )


class JobArchiveResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )


class PostProcessorResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    url: Optional[str] = None
    secret: Optional[str] = None
    ch_cost_per_hour: Optional[float] = Field(None, alias='chCostPerHour')


class ParaviewStartResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    path: Optional[str] = None
    port: Optional[str] = None
    private_key: Optional[str] = Field(None, alias='privateKey')
    cost_per_hour: Optional[float] = Field(None, alias='costPerHour')


class JobPostProcessorRequest(BaseModel):
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId', description='UUID')


class Filter(BaseModel):
    filter_by: Optional[str] = Field(None, alias='filterBy', example='p_wid')
    min_value: Optional[float] = Field(None, alias='minValue', example=0.0)
    max_value: Optional[float] = Field(None, alias='maxValue', example=1.0)
    text_match: Optional[str] = Field(None, alias='textMatch', example='a')


class SimulationListPageRequest(BaseModel):
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=20)
    sort_by: Optional[str] = Field(None, alias='sortBy', example='p_wid')
    descending_sort: Optional[bool] = Field(None, alias='descendingSort', example=False)
    filter_by_status: Optional[str] = Field(
        None, alias='filterByStatus', example='COMPLETED'
    )
    filters: Optional[List[Filter]] = None


class JobUpdateRequest(BaseModel):
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )
    job_name: Optional[str] = Field(
        None,
        alias='jobName',
        description='new job name',
        example='New Name of this Job',
    )


class LibraryObject(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    library_id: Optional[str] = Field(None, alias='libraryId')
    object_id: Optional[str] = Field(None, alias='objectId')
    account_id: Optional[str] = Field(None, alias='accountId')
    object_title: Optional[str] = Field(None, alias='objectTitle')
    object_description: Optional[str] = Field(None, alias='objectDescription')
    object_type: Optional[str] = Field(None, alias='objectType')
    blob_type: Optional[str] = Field(None, alias='blobType')
    category: Optional[str] = None
    metadata: Optional[str] = None
    original_object_id: Optional[str] = Field(None, alias='originalObjectId')
    image_blob_id: Optional[str] = Field(None, alias='imageBlobId')
    icon_blob_id: Optional[str] = Field(None, alias='iconBlobId')
    user_id: Optional[str] = Field(None, alias='userId')
    create_date: Optional[datetime] = Field(None, alias='createDate')
    public: Optional[bool] = None
    hidden: Optional[bool] = None
    owner: Optional[bool] = None


class LibObjectAddRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    original_object_id: Optional[str] = Field(None, alias='originalObjectId')
    object_title: Optional[str] = Field(None, alias='objectTitle')
    object_description: Optional[str] = Field(None, alias='objectDescription')
    blob_type: Optional[str] = Field(None, alias='blobType')
    category: Optional[str] = None
    metadata: Optional[str] = None


class LibObjectUpdateRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    original_object_id: Optional[str] = Field(None, alias='originalObjectId')
    object_title: Optional[str] = Field(None, alias='objectTitle')
    object_description: Optional[str] = Field(None, alias='objectDescription')
    blob_type: Optional[str] = Field(None, alias='blobType')
    category: Optional[str] = None
    metadata: Optional[str] = None
    object_id: Optional[str] = Field(None, alias='objectId')


class LibObjectRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    object_id: Optional[str] = Field(None, alias='objectId')


class LibraryAccess(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    library_access_id: Optional[str] = Field(None, alias='libraryAccessId')
    library_id: Optional[str] = Field(None, alias='libraryId')
    object_id: Optional[str] = Field(None, alias='objectId')
    account_id: Optional[str] = Field(None, alias='accountId')
    user_id: Optional[str] = Field(None, alias='userId')
    access_type: Optional[str] = Field(None, alias='accessType')
    create_date: Optional[datetime] = Field(None, alias='createDate')


class ShareWith(BaseModel):
    share_account_id: Optional[str] = Field(None, alias='shareAccountId')
    share_user_id: Optional[str] = Field(None, alias='shareUserId')


class LibObjectListRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    include_my_own_lib: Optional[bool] = Field(None, alias='includeMyOwnLib')
    include_shared_lib: Optional[bool] = Field(None, alias='includeSharedLib')
    include_on_scale_lib: Optional[bool] = Field(None, alias='includeOnScaleLib')
    include_hide_lib: Optional[bool] = Field(None, alias='includeHideLib')


class LibObjectListPageResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    lib_object_count: Optional[int] = Field(None, alias='libObjectCount')
    page_count: Optional[int] = Field(None, alias='pageCount')
    page_size: Optional[int] = Field(None, alias='pageSize')
    page_number: Optional[int] = Field(None, alias='pageNumber')
    library_object_list: Optional[List[LibraryObject]] = Field(
        None, alias='libraryObjectList'
    )


class LibObjectListPageRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    page_number: Optional[int] = Field(None, alias='pageNumber')
    page_size: Optional[int] = Field(None, alias='pageSize')
    create_date_start: Optional[datetime] = Field(None, alias='createDateStart')
    create_date_end: Optional[datetime] = Field(None, alias='createDateEnd')
    library_types: Optional[List[str]] = Field(None, alias='libraryTypes')
    blob_types: Optional[List[str]] = Field(None, alias='blobTypes')
    owner_list: Optional[List[str]] = Field(None, alias='ownerList')
    include_hidden: Optional[bool] = Field(None, alias='includeHidden')
    search_query: Optional[str] = Field(None, alias='searchQuery')
    search_description: Optional[bool] = Field(None, alias='searchDescription')


class LibObjectHideRequest(BaseModel):
    library_id: Optional[str] = Field(None, alias='libraryId')
    object_id: Optional[str] = Field(None, alias='objectId')
    hidden: Optional[bool] = None


class Library(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    library_id: Optional[str] = Field(None, alias='libraryId')
    account_id: Optional[str] = Field(None, alias='accountId')
    hpc_id: Optional[str] = Field(None, alias='hpcId')
    title: Optional[str] = None
    description: Optional[str] = None
    user_id: Optional[str] = Field(None, alias='userId')
    create_date: Optional[datetime] = Field(None, alias='createDate')
    last_update: Optional[datetime] = Field(None, alias='lastUpdate')
    library_object_list: Optional[List[LibraryObject]] = Field(
        None, alias='libraryObjectList'
    )
    active: Optional[bool] = None
    public: Optional[bool] = None


class LibraryCreateRequest(BaseModel):
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    hpc_id: Optional[str] = Field(
        None, alias='hpcId', description='UUID', example='hpc-id'
    )
    title: Optional[str] = None
    description: Optional[str] = None
    active: Optional[bool] = None
    public: Optional[bool] = None


class LibraryLoadRequest(BaseModel):
    library_id: Optional[str] = Field(
        None, alias='libraryId', description='UUID', example='object-id'
    )
    include_object_list: Optional[bool] = Field(None, alias='includeObjectList')


class LibraryUpdateRequest(BaseModel):
    library_id: Optional[str] = Field(
        None, alias='libraryId', description='UUID', example='object-id'
    )
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    title: Optional[str] = None
    description: Optional[str] = None
    active: Optional[bool] = None


class LibraryRequest(BaseModel):
    library_id: Optional[str] = Field(
        None, alias='libraryId', description='UUID', example='object-id'
    )


class LibraryAccountRequest(BaseModel):
    library_id: Optional[str] = Field(
        None, alias='libraryId', description='UUID', example='object-id'
    )
    account_id: Optional[str] = Field(None, alias='accountId')


class AccessType(Enum):
    """ __code__owner_ = '{@code "owner"' """
    """ _write_ = '"write"' """
    """ _read__ = '"read"}' """


class LibraryUserRequest(BaseModel):
    library_id: Optional[str] = Field(
        None, alias='libraryId', description='UUID', example='object-id'
    )
    user_id: Optional[str] = Field(
        None, alias='userId', description='UUID', example='user-id'
    )
    access_type: Optional[AccessType] = Field(
        None, alias='accessType', description='String', example='read'
    )


class LibraryObjectAddRequest(BaseModel):
    library_id: Optional[str] = Field(
        None, alias='libraryId', description='UUID', example='object-id'
    )
    original_object_id: Optional[str] = Field(None, alias='originalObjectId')
    object_type: Optional[str] = Field(None, alias='objectType')
    object_title: Optional[str] = Field(None, alias='objectTitle')
    object_description: Optional[str] = Field(None, alias='objectDescription')
    blob_type: Optional[str] = Field(None, alias='blobType')


class LibraryObjectUpdateRequest(BaseModel):
    library_id: Optional[str] = Field(
        None, alias='libraryId', description='UUID', example='object-id'
    )
    object_id: Optional[str] = Field(None, alias='objectId')
    object_title: Optional[str] = Field(None, alias='objectTitle')
    object_description: Optional[str] = Field(None, alias='objectDescription')


class LibraryObjectRemoveRequest(BaseModel):
    library_id: Optional[str] = Field(
        None, alias='libraryId', description='UUID', example='object-id'
    )
    object_id: Optional[str] = Field(None, alias='objectId')


class Material(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    material_id: Optional[str] = Field(None, alias='materialId')
    account_id: Optional[str] = Field(None, alias='accountId')
    user_id: Optional[str] = Field(None, alias='userId')
    material_title: Optional[str] = Field(None, alias='materialTitle')
    material_category: Optional[str] = Field(None, alias='materialCategory')
    material_format: Optional[str] = Field(None, alias='materialFormat')
    material_model: Optional[str] = Field(None, alias='materialModel')
    solver_used_name: Optional[str] = Field(None, alias='solverUsedName')
    material_description: Optional[str] = Field(None, alias='materialDescription')
    plain_json: Optional[str] = Field(None, alias='plainJson')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    color: Optional[str] = None
    hidden: Optional[bool] = None
    version: Optional[int] = None
    data_source: Optional[str] = Field(None, alias='dataSource')
    data_source_version: Optional[str] = Field(None, alias='dataSourceVersion')
    public: Optional[bool] = None


class MaterialCreateRequest(BaseModel):
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    material_title: Optional[str] = Field(
        None, alias='materialTitle', example='Material Title 1'
    )
    material_category: Optional[str] = Field(
        None, alias='materialCategory', example='fluid'
    )
    material_format: Optional[str] = Field(
        None, alias='materialFormat', example='os.2.0'
    )
    solver_used_name: Optional[str] = Field(None, alias='solverUsedName', example='aln')
    material_model: Optional[str] = Field(
        None, alias='materialModel', example='Linear Isotropic'
    )
    material_description: Optional[str] = Field(
        None, alias='materialDescription', example='Material Description'
    )
    material_json: Optional[str] = Field(None, alias='materialJson')
    color: Optional[str] = Field(None, example='red')
    data_source: Optional[str] = Field(None, alias='dataSource')
    data_source_version: Optional[str] = Field(None, alias='dataSourceVersion')
    public: Optional[bool] = Field(None, description='Boolean', example=False)


class MaterialRequest(BaseModel):
    material_id: Optional[str] = Field(
        None, alias='materialId', description='UUID', example='material-id'
    )


class MaterialSearchRequest(BaseModel):
    data_source: Optional[str] = Field(None, alias='dataSource')
    material_title: Optional[str] = Field(None, alias='materialTitle')
    version: Optional[int] = None


class ChatSession(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    chat_session_id: Optional[str] = Field(
        None, alias='chatSessionId', description='UUID', example='chat-session-id'
    )
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    project_id: Optional[str] = Field(None, alias='projectId')
    user_id: Optional[str] = Field(
        None, alias='userId', description='UUID', example='user-id'
    )
    chat_type: Optional[str] = Field(None, alias='chatType')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    end_date: Optional[int] = Field(
        None, alias='endDate', description='1585700000000', example=1585700000000
    )


class ChatStartSessionRequest(BaseModel):
    chat_type: Optional[str] = Field(None, alias='chatType', example='PROJECT')
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    project_id: Optional[str] = Field(None, alias='projectId', example='object-id')
    invited_user_ids: Optional[List[str]] = Field(None, alias='invitedUserIds')


class ChatSessionUser(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    chat_session_id: Optional[str] = Field(
        None, alias='chatSessionId', description='UUID', example='chat-session-id'
    )
    user_id: Optional[str] = Field(
        None, alias='userId', description='UUID', example='user-id'
    )
    join_date: Optional[int] = Field(
        None, alias='joinDate', description='1585700000000', example=1585700000000
    )
    left_date: Optional[int] = Field(
        None, alias='leftDate', description='1585700000000', example=1585700000000
    )


class ChatBaseRequest(BaseModel):
    chat_session_id: Optional[str] = Field(
        None, alias='chatSessionId', description='UUID', example='chat-session-id'
    )


class NotificationObjectRequest(BaseModel):
    object_id: Optional[str] = Field(None, alias='objectId')
    object_type: Optional[str] = Field(None, alias='objectType')


class NotificationAnnouncementRequest(BaseModel):
    exclude_acknowledged: Optional[bool] = Field(None, alias='excludeAcknowledged')


class NotificationSentRequest(BaseModel):
    include_expired: Optional[bool] = Field(None, alias='includeExpired')


class ReleaseNoteResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    notification_id: Optional[str] = Field(None, alias='notificationId')
    release_version: Optional[str] = Field(None, alias='releaseVersion')
    release_notes: Optional[str] = Field(None, alias='releaseNotes')
    active: Optional[bool] = None
    create_date: Optional[datetime] = Field(None, alias='createDate')
    acknowledged: Optional[bool] = None


class ReleaseNoteRequest(BaseModel):
    release_version: Optional[str] = Field(
        None, alias='releaseVersion', description='String', example='1.0.1'
    )
    release_notes: Optional[str] = Field(
        None,
        alias='releaseNotes',
        description='String',
        example='Release Notes for 1.0.1',
    )
    active: Optional[bool] = Field(None, description='Boolean', example=True)


class OutageNoteRequest(BaseModel):
    outage_start_date: Optional[datetime] = Field(None, alias='outageStartDate')
    outage_end_date: Optional[datetime] = Field(None, alias='outageEndDate')
    banner_start_date: Optional[datetime] = Field(None, alias='bannerStartDate')
    banner_end_date: Optional[datetime] = Field(None, alias='bannerEndDate')


class OutageNoteResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    outage_start_date: Optional[datetime] = Field(None, alias='outageStartDate')
    outage_end_date: Optional[datetime] = Field(None, alias='outageEndDate')
    banner_start_date: Optional[datetime] = Field(None, alias='bannerStartDate')
    banner_end_date: Optional[datetime] = Field(None, alias='bannerEndDate')


class ChatInvitationRequest(BaseModel):
    chat_session_id: Optional[str] = Field(
        None, alias='chatSessionId', description='UUID', example='chat-session-id'
    )
    invited_user_ids: Optional[List[str]] = Field(None, alias='invitedUserIds')


class ChatSessionMessage(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    chat_session_message_id: Optional[str] = Field(
        None,
        alias='chatSessionMessageId',
        description='UUID',
        example='chat-session-message-id',
    )
    chat_session_id: Optional[str] = Field(
        None, alias='chatSessionId', description='UUID', example='chat-session-id'
    )
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    user_id: Optional[str] = Field(
        None, alias='userId', description='UUID', example='user-id'
    )
    content: Optional[int] = Field(
        None, description='String', example='message content'
    )


class ChatSendRequest(BaseModel):
    chat_session_id: Optional[str] = Field(
        None, alias='chatSessionId', description='UUID', example='chat-session-id'
    )
    message: Optional[str] = Field(None, description='String', example='Hello')


class NotificationAddRequest(BaseModel):
    object_type: Optional[str] = Field(None, alias='objectType')
    object_id: Optional[str] = Field(None, alias='objectId')
    content: Optional[str] = None
    invited_user_ids: Optional[List[str]] = Field(None, alias='invitedUserIds')
    immediate_delivery: Optional[bool] = Field(None, alias='immediateDelivery')
    start_date: Optional[datetime] = Field(None, alias='startDate')
    end_date: Optional[datetime] = Field(None, alias='endDate')


class NotificationEndRequest(BaseModel):
    notification_id: Optional[str] = Field(None, alias='notificationId')
    end_date: Optional[datetime] = Field(None, alias='endDate')


class TreeItemOwner(BaseModel):
    state: Optional[int] = None
    image: Optional[str] = None
    href: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    accept_ownership_transfer: Optional[bool] = Field(
        None, alias='acceptOwnershipTransfer'
    )
    is_enterprise_owned_resource: Optional[bool] = Field(
        None, alias='isEnterpriseOwnedResource'
    )
    type: Optional[int] = None


class OnshapeFolderListPageRequest(BaseModel):
    tree_href: Optional[str] = Field(None, alias='treeHref')
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=20)


class Number(BaseModel):
    pass


class PartsGetPartsResponsePartsAppearanceColor(BaseModel):
    red: Optional[Number] = None
    blue: Optional[Number] = None
    green: Optional[Number] = None


class PartsGetPartsResponsePartsMaterialProperties(BaseModel):
    name: Optional[str] = None
    units: Optional[str] = None
    description: Optional[str] = None
    value: Optional[Number] = None


class DocumentsGetDocumentsResponseItemsCreatedBy(BaseModel):
    name: Optional[str] = None
    id: Optional[str] = None
    href: Optional[str] = None


class DocumentsGetDocumentsResponseItemsDefaultWorkspace(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    href: Optional[str] = None


class DocumentsGetDocumentsResponseItemsModifiedBy(BaseModel):
    name: Optional[str] = None
    id: Optional[str] = None
    href: Optional[str] = None


class DocumentsGetDocumentsResponseItemsOwner(BaseModel):
    type: Optional[Number] = None
    name: Optional[str] = None
    id: Optional[str] = None
    href: Optional[str] = None


class DocumentsGetDocumentsResponseItemsThumbnailSizes(BaseModel):
    size: Optional[str] = None
    media_type: Optional[str] = Field(None, alias='mediaType')
    href: Optional[str] = None
    view_orientation: Optional[str] = Field(None, alias='viewOrientation')
    render_mode: Optional[str] = Field(None, alias='renderMode')


class OnshapeDocumentSearchRequest(BaseModel):
    query_string: Optional[str] = Field(
        None,
        alias='queryString',
        example='Nozzle type:document,part,partstudio,assembly',
    )
    offset: Optional[float] = Field(None, example=0.0)


class OnshapeDocumentRequest(BaseModel):
    document_id: Optional[str] = Field(None, alias='documentId', example='document-id')


class WvmType(Enum):
    WORKSPACE = 'WORKSPACE'
    VERSION = 'VERSION'
    MICROVERSION = 'MICROVERSION'


class OnshapeDocumentElementRequest(BaseModel):
    document_id: Optional[str] = Field(None, alias='documentId', example='document-id')
    wvm_type: WvmType = Field(..., alias='wvmType', example='Workspace')
    wvm_id: str = Field(..., alias='wvmId', example='ab639f01269d6962479d3140')


class AssembliesGetAssemblyDefinitionResponsePartStudioFeatures(BaseModel):
    document_id: Optional[str] = Field(None, alias='documentId')
    document_microversion: Optional[str] = Field(None, alias='documentMicroversion')
    document_version: Optional[str] = Field(None, alias='documentVersion')
    element_id: Optional[str] = Field(None, alias='elementId')
    feature_id: Optional[str] = Field(None, alias='featureId')
    feature_type: Optional[str] = Field(None, alias='featureType')


class AssembliesGetAssemblyDefinitionResponseParts(BaseModel):
    document_id: Optional[str] = Field(None, alias='documentId')
    document_microversion: Optional[str] = Field(None, alias='documentMicroversion')
    document_version: Optional[str] = Field(None, alias='documentVersion')
    element_id: Optional[str] = Field(None, alias='elementId')
    part_id: Optional[str] = Field(None, alias='partId')
    configuration: Optional[str] = None
    body_type: Optional[str] = Field(None, alias='bodyType')
    is_standard_content: Optional[bool] = Field(None, alias='isStandardContent')
    revision: Optional[str] = None
    part_number: Optional[str] = Field(None, alias='partNumber')
    mate_connectors: Optional[List[Dict[str, Dict[str, Any]]]] = Field(
        None, alias='mateConnectors'
    )


class AssembliesGetAssemblyDefinitionResponseRootAssemblyFeatures(BaseModel):
    feature_type: Optional[str] = Field(None, alias='featureType')
    id: Optional[str] = None
    feature_data: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias='featureData')


class AssembliesGetAssemblyDefinitionResponseRootAssemblyInstances(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    type: Optional[str] = None
    suppressed: Optional[bool] = None
    document_id: Optional[str] = Field(None, alias='documentId')
    document_microversion: Optional[str] = Field(None, alias='documentMicroversion')
    document_version: Optional[str] = Field(None, alias='documentVersion')
    element_id: Optional[str] = Field(None, alias='elementId')
    part_id: Optional[str] = Field(None, alias='partId')
    is_standard_content: Optional[bool] = Field(None, alias='isStandardContent')
    configuration: Optional[str] = None
    revision: Optional[str] = None
    part_number: Optional[str] = Field(None, alias='partNumber')


class AssembliesGetAssemblyDefinitionResponseRootAssemblyOccurrences(BaseModel):
    path: Optional[List[str]] = None
    transform: Optional[List[Number]] = None
    fixed: Optional[bool] = None
    hidden: Optional[bool] = None


class AssembliesGetAssemblyDefinitionResponseSubAssembliesInstances(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    type: Optional[str] = None
    suppressed: Optional[bool] = None
    document_id: Optional[str] = Field(None, alias='documentId')
    document_microversion: Optional[str] = Field(None, alias='documentMicroversion')
    document_version: Optional[str] = Field(None, alias='documentVersion')
    element_id: Optional[str] = Field(None, alias='elementId')
    part_id: Optional[str] = Field(None, alias='partId')
    is_standard_content: Optional[bool] = Field(None, alias='isStandardContent')
    configuration: Optional[str] = None


class WvmType1(Enum):
    WORKSPACE = 'WORKSPACE'
    VERSION = 'VERSION'
    MICROVERSION = 'MICROVERSION'


class OnshapeDocumentConfigurationRequest(BaseModel):
    document_id: Optional[str] = Field(None, alias='documentId', example='id')
    wvm_type: WvmType1 = Field(..., alias='wvmType', example='Workspace')
    wvm_id: str = Field(..., alias='wvmId', example='id')
    element_id: Optional[str] = Field(
        None, alias='elementId', example='b53aee1db4541c279705da51'
    )


class DocumentsGetElementListResponseElementsThumbnailInfoSizes(BaseModel):
    size: Optional[str] = None
    media_type: Optional[str] = Field(None, alias='mediaType')
    href: Optional[str] = None


class EnumOption(BaseModel):
    option: Optional[str] = None
    option_name: Optional[str] = Field(None, alias='optionName')


class WvType(Enum):
    WORKSPACE = 'WORKSPACE'
    VERSION = 'VERSION'


class OnshapeImportPartRequest(BaseModel):
    document_id: Optional[str] = Field(None, alias='documentId', example='id')
    design_id: Optional[str] = Field(None, alias='designId', example='design-id')
    design_instance_id: Optional[str] = Field(
        None, alias='designInstanceId', example='design-instance-id'
    )
    element_id: Optional[str] = Field(
        None, alias='elementId', example='b53aee1db4541c279705da51'
    )
    part_id: Optional[str] = Field(None, alias='partId', example='JHD')
    configuration: Optional[Dict[str, str]] = Field(
        None, example='{"List_XI4Eh9Q2rsMyrB": "variable", "beam_length": "1.0"}'
    )
    preferred_file_name: Optional[str] = Field(None, alias='preferredFileName')
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId')
    wv_type: Optional[WvType] = Field(None, alias='wvType', example='Workspace')
    wv_id: Optional[str] = Field(None, alias='wvId', example='id')


class WvType1(Enum):
    WORKSPACE = 'WORKSPACE'
    VERSION = 'VERSION'


class OnshapeImportAssemblyRequest(BaseModel):
    document_id: Optional[str] = Field(None, alias='documentId', example='id')
    design_id: Optional[str] = Field(None, alias='designId', example='design-id')
    design_instance_id: Optional[str] = Field(
        None, alias='designInstanceId', example='design-instance-id'
    )
    element_id: Optional[str] = Field(
        None, alias='elementId', example='a2df1367f931a5cd2d2093fa'
    )
    configuration: Optional[Dict[str, str]] = Field(
        None, example='{"List_TTolFmILSxvGUv": "short"}'
    )
    preferred_file_name: Optional[str] = Field(None, alias='preferredFileName')
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId')
    wv_type: Optional[WvType1] = Field(None, alias='wvType', example='Workspace')
    wv_id: Optional[str] = Field(None, alias='wvId', example='id')


class WvmType2(Enum):
    WORKSPACE = 'WORKSPACE'
    VERSION = 'VERSION'
    MICROVERSION = 'MICROVERSION'


class OnshapeIdTranslationRequest(BaseModel):
    document_id: Optional[str] = Field(None, alias='documentId', example='id')
    wvm_type: WvmType2 = Field(..., alias='wvmType', example='Workspace')
    wvm_id: str = Field(..., alias='wvmId', example='id')
    element_id: Optional[str] = Field(
        None, alias='elementId', example='b53aee1db4541c279705da51'
    )
    source_configuration: Optional[str] = Field(None, alias='sourceConfiguration')
    target_configuration: Optional[str] = Field(None, alias='targetConfiguration')
    link_document_id: Optional[str] = Field(None, alias='linkDocumentId')
    source_document_microversion: str = Field(
        ..., alias='sourceDocumentMicroversion', example='3ee44424160284d60b567093'
    )
    ids: Optional[List[str]] = None


class AccountsGetPurchasesResponseItemsCard(BaseModel):
    type: Optional[str] = None
    last4: Optional[str] = None
    exp_year: Optional[Number] = Field(None, alias='expYear')
    exp_month: Optional[Number] = Field(None, alias='expMonth')


class OnshapePurchaseAssignRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    onshape_subscription_id: Optional[str] = Field(None, alias='onshapeSubscriptionId')


class OnshapeWebhookModelChangeRequest(BaseModel):
    timestamp: Optional[datetime] = None
    event: Optional[str] = None
    workspace_id: Optional[str] = Field(None, alias='workspaceId')
    element_id: Optional[str] = Field(None, alias='elementId')
    webhook_id: Optional[str] = Field(None, alias='webhookId')
    message_id: Optional[str] = Field(None, alias='messageId')
    data: Optional[str] = None
    document_id: Optional[str] = Field(None, alias='documentId')
    version_id: Optional[str] = Field(None, alias='versionId')


class ProjectCreateRequest(BaseModel):
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    hpc_id: Optional[str] = Field(
        None, alias='hpcId', description='UUID', example='hpc-id'
    )
    project_title: Optional[str] = Field(
        None, alias='projectTitle', description='String', example='Project #1'
    )
    project_goal: Optional[str] = Field(
        None, alias='projectGoal', description='String', example='Project Goals'
    )


class ProjectRequest(BaseModel):
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project-id'
    )


class ProjectDeleteResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project_to_be_deleted'
    )
    hash: Optional[str] = Field(None, example='hash_key_to_confirm_deletion')
    summary: Optional[Dict[str, Dict[str, Any]]] = None


class ProjectDeleteRequest(BaseModel):
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project-id'
    )
    hash: Optional[str] = Field(None, example='hash_key_to_confirm_deletion')


class ProjectContributorListPageResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    contributor_count: Optional[int] = Field(None, alias='contributorCount')
    page_count: Optional[int] = Field(None, alias='pageCount')
    page_size: Optional[int] = Field(None, alias='pageSize')
    page_number: Optional[int] = Field(None, alias='pageNumber')
    contributors: Optional[List[Contributor]] = None


class ProjectContributorListPageRequest(BaseModel):
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project-id'
    )
    page_number: Optional[int] = Field(None, alias='pageNumber')
    page_size: Optional[int] = Field(None, alias='pageSize', example=5)


class ProjectCalendarReport(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    group_by: Optional[str] = Field(None, alias='groupBy')
    calendar_usages: Optional[List[CalendarUsage]] = Field(None, alias='calendarUsages')
    start_calendar: Optional[datetime] = Field(None, alias='startCalendar')
    end_calendar: Optional[datetime] = Field(None, alias='endCalendar')
    project_id: Optional[str] = Field(None, alias='projectId')


class SupportFindUserRequest(BaseModel):
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project-id'
    )
    email_address: Optional[str] = Field(None, alias='emailAddress')


class ProjectAccess(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    project_access_id: Optional[str] = Field(
        None, alias='projectAccessId', description='UUID', example='project-access-id'
    )
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project-id'
    )
    user_id: Optional[str] = Field(None, alias='userId')
    group_id: Optional[str] = Field(None, alias='groupId')
    group_type: Optional[str] = Field(None, alias='groupType')
    access_type: Optional[str] = Field(None, alias='accessType')
    last_update: Optional[datetime] = Field(None, alias='lastUpdate')
    last_activity_date: Optional[str] = Field(None, alias='lastActivityDate')
    last_action: Optional[str] = Field(None, alias='lastAction')
    archived_designs: Optional[List[str]] = Field(None, alias='archivedDesigns')
    archived_instances: Optional[List[str]] = Field(None, alias='archivedInstances')
    archived: Optional[bool] = None
    access_level: Optional[int] = Field(None, alias='accessLevel')


class ShareWithType(BaseModel):
    share_account_id: Optional[str] = Field(None, alias='shareAccountId')
    share_user_id: Optional[str] = Field(None, alias='shareUserId')
    share_type: Optional[str] = Field(None, alias='shareType')


class ProjectUnshareRequest(BaseModel):
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project-id'
    )
    share_list: Optional[List[ShareWith]] = Field(None, alias='shareList')


class ProjectSharePageRequest(BaseModel):
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project-id'
    )
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=5)


class ProjectData(BaseModel):
    project_id: Optional[str] = Field(None, alias='projectId')
    account_id: Optional[str] = Field(None, alias='accountId')
    hpc_id: Optional[str] = Field(None, alias='hpcId')
    user_id: Optional[str] = Field(None, alias='userId')
    project_title: Optional[str] = Field(None, alias='projectTitle')
    project_goal: Optional[str] = Field(None, alias='projectGoal')
    core_hour_used: Optional[float] = Field(None, alias='coreHourUsed')
    create_date: Optional[datetime] = Field(None, alias='createDate')
    last_update: Optional[datetime] = Field(None, alias='lastUpdate')
    project_contributors: Optional[List[ProjectContributor]] = Field(
        None, alias='projectContributors'
    )
    archived: Optional[bool] = None
    favorite: Optional[bool] = None


class ProjectListPageResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    project_count: Optional[int] = Field(None, alias='projectCount')
    page_count: Optional[int] = Field(None, alias='pageCount')
    page_size: Optional[int] = Field(None, alias='pageSize')
    page_number: Optional[int] = Field(None, alias='pageNumber')
    projects: Optional[List[ProjectData]] = None


class ProjectOwner2(Enum):
    USER = 'USER'
    TEAM = 'TEAM'


class ProjectListPageRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    page_number: Optional[int] = Field(None, alias='pageNumber', example=0)
    page_size: Optional[int] = Field(None, alias='pageSize', example=20)
    last_update_from: Optional[datetime] = Field(None, alias='lastUpdateFrom')
    last_update_to: Optional[datetime] = Field(None, alias='lastUpdateTo')
    archived_only: Optional[bool] = Field(None, alias='archivedOnly', example=False)
    include_archived: Optional[bool] = Field(
        None, alias='includeArchived', example=False
    )
    project_owner: Optional[ProjectOwner2] = Field(
        None, alias='projectOwner', example='user'
    )
    filter_by_name: Optional[str] = Field(None, alias='filterByName')
    favorites_first: Optional[bool] = Field(None, alias='favoritesFirst', example=False)


class AccessType1(Enum):
    """ __code__owner_ = '{@code "owner"' """
    """ _write_ = '"write"' """
    """ _read__ = '"read"}' """


class ProjectAddGroupRequest(BaseModel):
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project-id'
    )
    group_id: Optional[str] = Field(
        None, alias='groupId', description='UUID', example='user-id'
    )
    access_type: Optional[AccessType1] = Field(
        None, alias='accessType', description='String', example='write'
    )


class ProjectRemoveGroupRequest(BaseModel):
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project-id'
    )
    group_id: Optional[str] = Field(
        None, alias='groupId', description='UUID', example='user-id'
    )


class AccessType2(Enum):
    """ __code__owner_ = '{@code "owner"' """
    """ _write_ = '"write"' """
    """ _read__ = '"read"}' """


class ProjectAddUserRequest(BaseModel):
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project-id'
    )
    user_id: Optional[str] = Field(
        None, alias='userId', description='UUID', example='user-id'
    )
    access_type: Optional[AccessType2] = Field(
        None, alias='accessType', description='String', example='write'
    )


class ProjectRemoveUserRequest(BaseModel):
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project-id'
    )
    user_id: Optional[str] = Field(
        None, alias='userId', description='UUID', example='user-id'
    )


class ProjectBlobRequest(BaseModel):
    project_id: Optional[str] = Field(None, alias='projectId')
    blob_id: Optional[str] = Field(None, alias='blobId')


class ProjectUpdateRequest(BaseModel):
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project-id'
    )
    project_title: Optional[str] = Field(
        None, alias='projectTitle', description='String', example='Project #1'
    )
    project_goal: Optional[str] = Field(
        None, alias='projectGoal', description='String', example='Project Goals'
    )


class ProjectUpdateTitleRequest(BaseModel):
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project-id'
    )
    project_title: Optional[str] = Field(
        None, alias='projectTitle', description='String', example='Project #1'
    )


class ProjectUpdateGoalRequest(BaseModel):
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project-id'
    )
    project_goal: Optional[str] = Field(
        None, alias='projectGoal', description='String', example='Project Goals'
    )


class OnScalePrice(BaseModel):
    currency: Optional[str] = None
    unit_amount: Optional[float] = Field(None, alias='unitAmount')


class CoreHourPackageRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    package_plan_code: Optional[str] = Field(None, alias='packagePlanCode')


class OnScaleSubscriptionAddOnTier(BaseModel):
    ending_quantity: Optional[int] = Field(None, alias='endingQuantity')
    unit_amount: Optional[float] = Field(None, alias='unitAmount')


class SubscriptionAddOnRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    add_on_code: Optional[str] = Field(
        None, alias='addOnCode', description='UUID', example='add-on-code'
    )


class PlanSubscriptionUpdateRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    plan_code: Optional[str] = Field(
        None, alias='planCode', description='UUID', example='standard-free'
    )
    add_on_list: Optional[List[str]] = Field(None, alias='addOnList')
    token_id: Optional[str] = Field(None, alias='tokenId', example='TOKEN_ID')


class OnScaleTier(BaseModel):
    prices: Optional[List[OnScalePrice]] = None
    ending_quantity: Optional[int] = Field(None, alias='endingQuantity')


class SupervisorFileListRequest(BaseModel):
    supervisor_id: Optional[str] = Field(
        None, alias='supervisorId', example='supervisor-id'
    )
    directory: Optional[str] = None
    file_name: Optional[str] = Field(None, alias='fileName')
    include_sub_directory: Optional[bool] = Field(None, alias='includeSubDirectory')


class SupervisorFileRequest(BaseModel):
    supervisor_id: Optional[str] = Field(
        None, alias='supervisorId', example='supervisor-id'
    )
    directory: Optional[str] = None
    file_name: Optional[str] = Field(None, alias='fileName')


class SupervisorFilePath(BaseModel):
    file_name: str = Field(
        ..., alias='fileName', description='UUID', example='disk.flxinp'
    )
    supervisor_id: Optional[str] = Field(None, alias='supervisorId')
    directory: Optional[str] = None
    path: Optional[str] = None


class Operation1(Enum):
    AGGREGATEDATA = 'AGGREGATEDATA'


class Supervisor(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    supervisor_id: Optional[str] = Field(None, alias='supervisorId')
    account_id: Optional[str] = Field(None, alias='accountId')
    user_id: Optional[str] = Field(None, alias='userId')
    hpc_id: Optional[str] = Field(None, alias='hpcId')
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    operation: Operation1 = Field(..., example='aggregatedata')
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId')
    core_hour_budget: Optional[float] = Field(None, alias='coreHourBudget')
    create_date: Optional[int] = Field(None, alias='createDate')
    included_supervisor_ids: Optional[List[str]] = Field(
        None, alias='includedSupervisorIds'
    )
    file_dependencies: Optional[List[str]] = Field(None, alias='fileDependencies')
    file_aliases: Optional[List[str]] = Field(None, alias='fileAliases')
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')


class SupervisorLaunchRequest(BaseModel):
    supervisor_id: Optional[str] = Field(
        None, alias='supervisorId', description='UUID', example='object-id'
    )
    blob_id: Optional[str] = Field(
        None, alias='blobId', description='UUID', example='object-id'
    )
    docker_tag_id: Optional[str] = Field(
        None, alias='dockerTagId', description='UUID', example='docker-tag-id'
    )


class SupervisorCreateRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    hpc_id: Optional[str] = Field(
        None, alias='hpcId', description='UUID', example='hpc-id'
    )
    design_instance_id: Optional[str] = Field(
        None, alias='designInstanceId', description='UUID', example='object-id'
    )
    core_hour_budget: Optional[float] = Field(
        None, alias='coreHourBudget', description='Float', example=50.0
    )
    operation: Optional[str] = None
    included_supervisor_ids: Optional[List[str]] = Field(
        None, alias='includedSupervisorIds'
    )
    file_dependencies: Optional[List[str]] = Field(None, alias='fileDependencies')
    file_aliases: Optional[List[str]] = Field(None, alias='fileAliases')
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')


class ExportBlobRequest(BaseModel):
    s3folder: Optional[str] = Field(None, example='s3-folder-name')
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    blob_type: Optional[str] = Field(None, alias='blobType', example='CAD')
    blob_id_list: Optional[List[str]] = Field(None, alias='blobIdList')
    max_number: Optional[int] = Field(None, alias='maxNumber', example=500)
    onshape_only: Optional[bool] = Field(None, alias='onshapeOnly')
    from_date: Optional[datetime] = Field(None, alias='fromDate')
    to_date: Optional[datetime] = Field(None, alias='toDate')


class SupportJobFileResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    job_id: Optional[str] = Field(None, alias='jobId')
    file_name: Optional[str] = Field(None, alias='fileName')
    file_size: Optional[int] = Field(None, alias='fileSize')
    file_date: Optional[datetime] = Field(None, alias='fileDate')


class TagSearch(BaseModel):
    tag: Optional[str] = Field(None, description='any string')
    type: Optional[str] = Field(None, description='any string')


class TagSearchRequest(BaseModel):
    tags: Optional[List[TagSearch]] = None


class TagAccountSearchRequest(BaseModel):
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    tags: Optional[List[TagSearch]] = None


class TagRequest(BaseModel):
    item_id: Optional[str] = Field(
        None, alias='itemId', description='UUID', example='item-id'
    )
    tag: Optional[str] = Field(None, description='any string')
    type: Optional[str] = Field(None, description='any string')


class ItemIdRequest(BaseModel):
    item_id: Optional[str] = Field(
        None, alias='itemId', description='UUID', example='object-id'
    )


class UserModifyRequest(BaseModel):
    last_name: str = Field(..., alias='lastName', example='Smith')
    first_name: str = Field(..., alias='firstName', example='Nancy')
    company_name: str = Field(..., alias='companyName', example='Albuquerque Academy')
    phone_number: Optional[str] = Field(
        None, alias='phoneNumber', example='+14046474769'
    )
    send_completion_email: Optional[bool] = Field(
        None, alias='sendCompletionEmail', example=False
    )
    department: Optional[str] = None
    title: Optional[str] = None


class UserEvent(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    event_id: Optional[str] = Field(
        None, alias='eventId', description='UUID', example='event-id'
    )
    user_id: Optional[str] = Field(None, alias='userId')
    event_type: Optional[str] = Field(None, alias='eventType')
    event_source: Optional[str] = Field(None, alias='eventSource')
    event_value: Optional[str] = Field(None, alias='eventValue')
    email_sent: Optional[bool] = Field(None, alias='emailSent')
    in_app_sent: Optional[bool] = Field(None, alias='inAppSent')
    event_date: Optional[int] = Field(None, alias='eventDate')


class EventSource(Enum):
    ONSCALELAB = 'ONSCALELAB'
    ONSCALEPORTAL = 'ONSCALEPORTAL'
    ONSCALEWEB = 'ONSCALEWEB'
    ONSCALESOLVE = 'ONSCALESOLVE'


class UserEventRequest(BaseModel):
    event_type: Optional[str] = Field(
        None, alias='eventType', description='String', example='Init Job'
    )
    event_source: Optional[EventSource] = Field(
        None, alias='eventSource', description='String', example='ONSCALELAB'
    )
    event_value: Optional[str] = Field(None, alias='eventValue')


class FavoriteRequest(BaseModel):
    object_type: Optional[str] = Field(None, alias='objectType', example='PROJECT')
    object_id: Optional[str] = Field(None, alias='objectId')


class FavoriteListRequest(BaseModel):
    object_type: Optional[str] = Field(None, alias='objectType', example='PROJECT')


class PythonInterpreterResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    url: Optional[str] = None
    secret: Optional[str] = None
    ch_cost_per_hour: Optional[float] = Field(None, alias='chCostPerHour')


class PythonInterpreterRequest(BaseModel):
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    hpc_id: Optional[str] = Field(
        None, alias='hpcId', description='UUID', example='hpc-id'
    )
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId')


class UserSetting(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    user_id: Optional[str] = Field(
        None,
        alias='userId',
        description='UUID',
        example='a31c6fd0-2640-40a9-ae1c-5bcadde5d51f',
    )
    setting_type: Optional[str] = Field(
        None, alias='settingType', example='JOB-FINISHED'
    )
    email_notification: Optional[bool] = Field(None, alias='emailNotification')
    in_app_notification: Optional[bool] = Field(None, alias='inAppNotification')
    setting_value: Optional[str] = Field(None, alias='settingValue')
    create_date: Optional[datetime] = Field(None, alias='createDate')


class UserSettingRequest(BaseModel):
    setting_type: Optional[str] = Field(
        None, alias='settingType', example='JOB_FINISHED'
    )
    email_notification: Optional[bool] = Field(None, alias='emailNotification')
    in_app_notification: Optional[bool] = Field(None, alias='inAppNotification')
    setting_value: Optional[str] = Field(None, alias='settingValue')


class UserSettingUpdateRequest(BaseModel):
    user_settings: Optional[List[UserSettingRequest]] = Field(
        None, alias='userSettings'
    )


class UserAccountDeleteResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account_to_be_deleted'
    )
    hash: Optional[str] = Field(None, example='hash_key_to_confirm_deletion')
    notes: Optional[str] = None


class UserTeam(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    account_name: Optional[str] = Field(None, alias='accountName')
    plan_code: Optional[str] = Field(None, alias='planCode')
    account_ch_available: Optional[float] = Field(None, alias='accountCHAvailable')
    account_ch_credit: Optional[float] = Field(None, alias='accountCHCredit')
    account_ch_debit: Optional[float] = Field(None, alias='accountCHDebit')


class UserTeamListRequest(BaseModel):
    team_name: Optional[str] = Field(None, alias='teamName')


class Account(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    account_name: Optional[str] = Field(
        None, alias='accountName', example='Test Account'
    )
    account_description: Optional[str] = Field(
        None, alias='accountDescription', example='Test Account Description'
    )
    overage: Optional[bool] = Field(None, example=False)
    overage_rate: Optional[float] = Field(None, alias='overageRate')
    billing_enabled: Optional[bool] = Field(None, alias='billingEnabled', example=False)
    plan_code: Optional[str] = Field(None, alias='planCode', example='on-free')
    account_created: Optional[int] = Field(
        None, alias='accountCreated', description='1585700000000', example=1585700000000
    )
    last_job_time: Optional[int] = Field(
        None, alias='lastJobTime', description='1585700000000', example=1585700000000
    )
    onscale_lab: Optional[bool] = Field(None, alias='onscaleLab', example=False)
    onscale_solve: Optional[bool] = Field(None, alias='onscaleSolve', example=False)
    onscale_cli: Optional[bool] = Field(None, alias='onscaleCli', example=False)
    onscale_python: Optional[bool] = Field(None, alias='onscalePython', example=False)
    beam_tool: Optional[bool] = Field(None, alias='beamTool', example=False)
    applications: Optional[List[str]] = None
    add_ons: Optional[List[str]] = Field(None, alias='addOns')
    operations: Optional[List[str]] = None
    product_upgrade_path: Optional[str] = Field(None, alias='productUpgradePath')
    academic: Optional[bool] = None
    currency: Optional[str] = None
    plan_rate: Optional[float] = Field(None, alias='planRate')
    invoiced_externally: Optional[bool] = Field(None, alias='invoicedExternally')
    email_address: Optional[str] = Field(None, alias='emailAddress')
    current_period_ends_at: Optional[datetime] = Field(
        None, alias='currentPeriodEndsAt'
    )
    parent_account_id: Optional[str] = Field(None, alias='parentAccountId')
    offline_rebate_rate: Optional[float] = Field(None, alias='offlineRebateRate')
    user_core_allowed: Optional[int] = Field(None, alias='userCoreAllowed')
    lead_core_allowed: Optional[int] = Field(None, alias='leadCoreAllowed')
    default_project_core_hour: Optional[float] = Field(
        None, alias='defaultProjectCoreHour'
    )
    default_max_sim_core_hour: Optional[float] = Field(
        None, alias='defaultMaxSimCoreHour'
    )
    credit_limit: Optional[float] = Field(None, alias='creditLimit')
    plan_size: Optional[float] = Field(None, alias='planSize')
    balance: Optional[float] = None
    subscription_term_months: Optional[int] = Field(
        None, alias='subscriptionTermMonths'
    )
    max_simultaneous_simulations: Optional[int] = Field(
        None, alias='maxSimultaneousSimulations'
    )
    past_due: Optional[bool] = Field(None, alias='pastDue')
    allow_support_logging: Optional[bool] = Field(None, alias='allowSupportLogging')
    allow_support_project: Optional[bool] = Field(None, alias='allowSupportProject')
    allow_share_project: Optional[bool] = Field(None, alias='allowShareProject')
    unit_system: Optional[str] = Field(None, alias='unitSystem')
    expiration_date: Optional[int] = Field(
        None, alias='expirationDate', description='1585700000000', example=1585700000000
    )
    last_update: Optional[datetime] = Field(None, alias='lastUpdate')
    onshape_subscription_id: Optional[str] = Field(None, alias='onshapeSubscriptionId')
    onshape_user_id: Optional[str] = Field(None, alias='onshapeUserId')
    onshape_plan_group: Optional[str] = Field(None, alias='onshapePlanGroup')
    account_details: Optional[AccountDetails] = Field(None, alias='accountDetails')
    number_of_free_trials_used: Optional[str] = Field(
        None, alias='numberOfFreeTrialsUsed'
    )
    enterprise: Optional[bool] = Field(None, example=False)
    enterprise_account: Optional[bool] = Field(
        None, alias='enterpriseAccount', example=False
    )
    team_user_account: Optional[bool] = Field(
        None, alias='teamUserAccount', example=False
    )
    single_user_account: Optional[bool] = Field(
        None, alias='singleUserAccount', example=False
    )
    free_account: Optional[bool] = Field(None, alias='freeAccount', example=False)


class AccountBalance(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(None, alias='accountId')
    core_hours_available: Optional[float] = Field(None, alias='coreHoursAvailable')
    allocation_available: Optional[float] = Field(None, alias='allocationAvailable')
    recent_transactions: Optional[List[AccountLedger]] = Field(
        None, alias='recentTransactions'
    )


class EnterpriseTeamCreateResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    team_account: Optional[Account] = Field(None, alias='teamAccount')
    team_users: Optional[List[AccountAccess]] = Field(None, alias='teamUsers')
    team_balance: Optional[AccountBalance] = Field(None, alias='teamBalance')


class AccountListResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account: Optional[Account] = None
    account_access: Optional[AccountAccess] = Field(None, alias='accountAccess')


class Simulation(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    simulation_id: Optional[str] = Field(
        None, alias='simulationId', description='UUID', example='simulation-id'
    )
    job_id: Optional[str] = Field(None, alias='jobId')
    console_parameters: Optional[str] = Field(
        None, alias='consoleParameters', example='var1=a, var2=b, var3=c'
    )
    simulation_status: Optional[List[SimulationStatus]] = Field(
        None, alias='simulationStatus'
    )
    simulation_index: Optional[int] = Field(None, alias='simulationIndex')
    required_blobs: Optional[List[str]] = Field(None, alias='requiredBlobs')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    account_id: Optional[str] = Field(None, alias='accountId')
    user_id: Optional[str] = Field(None, alias='userId')
    last_status: Optional[str] = Field(None, alias='lastStatus')
    last_status_date: Optional[int] = Field(
        None, alias='lastStatusDate', description='1585700000000', example=1585700000000
    )
    last_status_comment: Optional[str] = Field(None, alias='lastStatusComment')
    parent_simulation_id: Optional[str] = Field(None, alias='parentSimulationId')
    console_parameter_map: Optional[Dict[str, Dict[str, Any]]] = Field(
        None, alias='consoleParameterMap'
    )


class OfflineLicenseReturnRequest(BaseModel):
    transaction_id: Optional[str] = Field(None, alias='transactionId')
    confirmation_key: Optional[str] = Field(None, alias='confirmationKey')
    offline_transactions: Optional[List[OfflineTransaction]] = Field(
        None, alias='offlineTransactions'
    )


class AccountUsageReport(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    monthly_usages: Optional[List[MonthlyUsage]] = Field(None, alias='monthlyUsages')


class EnterpriseTeamCreateRequest(BaseModel):
    parent_account_id: Optional[str] = Field(
        None, alias='parentAccountId', description='String', example='parent-account-id'
    )
    account_name: Optional[str] = Field(
        None, alias='accountName', description='String', example='Team 1'
    )
    allocated_cor_hours: Optional[float] = Field(
        None, alias='allocatedCorHours', description='Float', example=100.0
    )
    team_users: Optional[List[TeamUser]] = Field(None, alias='teamUsers')


class AccountCalendarReport(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    group_by: Optional[str] = Field(None, alias='groupBy')
    calendar_usages: Optional[List[CalendarUsage]] = Field(None, alias='calendarUsages')
    start_calendar: Optional[datetime] = Field(None, alias='startCalendar')
    end_calendar: Optional[datetime] = Field(None, alias='endCalendar')
    account_id: Optional[str] = Field(None, alias='accountId')


class Design(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    design_id: Optional[str] = Field(
        None, alias='designId', description='UUID', example='design-id'
    )
    project_id: Optional[str] = Field(None, alias='projectId')
    user_id: Optional[str] = Field(None, alias='userId')
    design_title: Optional[str] = Field(None, alias='designTitle')
    design_description: Optional[str] = Field(None, alias='designDescription')
    design_goal: Optional[str] = Field(None, alias='designGoal')
    physics: Optional[Physics] = Field(None, example='MECHANICAL')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    parent_design_id: Optional[str] = Field(None, alias='parentDesignId')
    design_instance_list: Optional[List[DesignInstance]] = Field(
        None, alias='designInstanceList'
    )
    archived: Optional[bool] = None


class Project(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    project_id: Optional[str] = Field(None, alias='projectId')
    account_id: Optional[str] = Field(None, alias='accountId')
    hpc_id: Optional[str] = Field(None, alias='hpcId')
    user_id: Optional[str] = Field(None, alias='userId')
    project_title: Optional[str] = Field(None, alias='projectTitle')
    project_goal: Optional[str] = Field(None, alias='projectGoal')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    last_update: Optional[int] = Field(
        None, alias='lastUpdate', description='1585700000000', example=1585700000000
    )
    core_hour_used: Optional[float] = Field(None, alias='coreHourUsed')
    design_list: Optional[List[Design]] = Field(None, alias='designList')
    user_id_list: Optional[List[str]] = Field(None, alias='userIdList')
    last_update_by_me: Optional[int] = Field(
        None, alias='lastUpdateByMe', description='1585700000000', example=1585700000000
    )
    my_access_type: Optional[str] = Field(None, alias='myAccessType')
    archived: Optional[bool] = None


class ReportBundle(BaseModel):
    chart_reports: Optional[List[ChartReport]] = Field(None, alias='chartReports')
    histogram_reports: Optional[List[HistogramReport]] = Field(
        None, alias='histogramReports'
    )
    account_index: Optional[Dict[str, Account]] = Field(None, alias='accountIndex')


class FailureReport(BaseModel):
    data: Optional[Dict[str, Dict[str, Dict[str, List[Dict[str, Any]]]]]] = None
    account_data: Optional[Dict[str, Account]] = Field(None, alias='accountData')
    day: Optional[int] = None
    month: Optional[int] = None
    year: Optional[int] = None


class AdminLiveJobsResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    job_data: Optional[Dict[str, List[SimulationProgress]]] = Field(
        None, alias='jobData'
    )


class StartTimeReport(BaseModel):
    start_calendar: Optional[datetime] = Field(None, alias='startCalendar')
    end_calendar: Optional[datetime] = Field(None, alias='endCalendar')
    time_groups: Optional[List[TimeGroup]] = Field(None, alias='timeGroups')
    hpc_list: Optional[List[Hpc]] = Field(None, alias='hpcList')
    hpc_report: Optional[Dict[str, HpcReport]] = Field(None, alias='hpcReport')
    hpc_node_report: Optional[Dict[str, Dict[str, NodeReport]]] = Field(
        None, alias='hpcNodeReport'
    )
    hpc_container_report: Optional[Dict[str, Dict[str, ContainerReport]]] = Field(
        None, alias='hpcContainerReport'
    )


class AccountReport(BaseModel):
    account: Optional[Account] = None
    core_hours_consumed: Optional[float] = Field(None, alias='coreHoursConsumed')


class UserAccountDetail(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    user: Optional[User] = None
    account_list: Optional[List[AccountListResponse]] = Field(None, alias='accountList')


class CouponMaster(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    coupon_master_id: Optional[str] = Field(None, alias='couponMasterId')
    coupon_type: Optional[str] = Field(None, alias='couponType')
    coupon_code: Optional[str] = Field(None, alias='couponCode')
    core_hour_amount: Optional[float] = Field(None, alias='coreHourAmount')
    percentage: Optional[float] = None
    var_account_id: Optional[str] = Field(None, alias='var_accountId')
    max_redeemable_times: Optional[int] = Field(None, alias='maxRedeemableTimes')
    expired_date: Optional[datetime] = Field(None, alias='expiredDate')
    locked_days: Optional[int] = Field(None, alias='lockedDays')
    start_date: Optional[datetime] = Field(None, alias='startDate')
    expired: Optional[bool] = None
    coupon_name: Optional[str] = Field(None, alias='couponName')
    coupon_description: Optional[str] = Field(None, alias='couponDescription')
    create_user_id: Optional[str] = Field(None, alias='createUserId')
    create_date: Optional[datetime] = Field(None, alias='createDate')
    redeemable_list: Optional[List[CouponRedeemable]] = Field(
        None, alias='redeemableList'
    )


class Group(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    group_id: Optional[str] = Field(
        None, alias='groupId', description='UUID', example='group-id'
    )
    account_id: Optional[str] = Field(None, alias='accountId')
    group_name: Optional[str] = Field(None, alias='groupName')
    create_date: Optional[int] = Field(
        None, alias='createDate', description='1585700000000', example=1585700000000
    )
    user_id_group_id_list: Optional[List[UserIdGroupId]] = Field(
        None, alias='userIdGroupIdList'
    )


class LinkedFile(BaseModel):
    job_id: Optional[str] = Field(None, alias='jobId')
    key: Optional[JobGetKeyResponse] = None
    s3secret: Optional[str] = None
    s3key: Optional[str] = None
    s3session: Optional[str] = None
    temporary_credential: Optional[TemporaryCredential] = Field(
        None, alias='temporaryCredential'
    )
    file_path: Optional[List[FileAlias]] = Field(None, alias='filePath')


class JobSolveListResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    page_number: Optional[int] = Field(None, alias='pageNumber')
    page_size: Optional[int] = Field(None, alias='pageSize')
    job_count: Optional[int] = Field(None, alias='jobCount')
    page_count: Optional[int] = Field(None, alias='pageCount')
    has_more_job: Optional[bool] = Field(None, alias='hasMoreJob')
    job_list: Optional[List[SolveJobData]] = Field(None, alias='jobList')


class SimulationListPageResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    page_count: Optional[int] = Field(None, alias='pageCount')
    request: Optional[SimulationListPageRequest] = None
    status_summary: Optional[Dict[str, int]] = Field(None, alias='statusSummary')
    simulations: Optional[List[Simulation]] = None
    descendant_simulation_map: Optional[Dict[str, List[Simulation]]] = Field(
        None, alias='descendantSimulationMap'
    )
    console_parameter_names: Optional[List[str]] = Field(
        None, alias='consoleParameterNames'
    )


class LibObjectShareRequest(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId', example='account-id')
    object_id: Optional[str] = Field(None, alias='objectId')
    share_list: Optional[List[ShareWith]] = Field(None, alias='shareList')


class TreeItem(BaseModel):
    is_mutable: Optional[bool] = Field(None, alias='isMutable')
    is_container: Optional[bool] = Field(None, alias='isContainer')
    can_move: Optional[bool] = Field(None, alias='canMove')
    has_pending_owner: Optional[bool] = Field(None, alias='hasPendingOwner')
    description: Optional[str] = None
    owner: Optional[TreeItemOwner] = None
    created_at: Optional[datetime] = Field(None, alias='createdAt')
    project_id: Optional[str] = Field(None, alias='projectId')
    modified_at: Optional[datetime] = Field(None, alias='modifiedAt')
    created_by: Optional[TreeItemOwner] = Field(None, alias='createdBy')
    modified_by: Optional[TreeItemOwner] = Field(None, alias='modifiedBy')
    is_enterprise_owned: Optional[bool] = Field(None, alias='isEnterpriseOwned')
    resource_type: Optional[str] = Field(None, alias='resourceType')
    href: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None


class PartsGetPartsResponsePartsAppearance(BaseModel):
    opacity: Optional[Number] = None
    is_generated: Optional[bool] = Field(None, alias='isGenerated')
    color: Optional[PartsGetPartsResponsePartsAppearanceColor] = None


class PartsGetPartsResponsePartsMaterial(BaseModel):
    library_name: Optional[str] = Field(None, alias='libraryName')
    id: Optional[str] = None
    properties: Optional[List[PartsGetPartsResponsePartsMaterialProperties]] = None


class DocumentsGetDocumentsResponseItemsThumbnail(BaseModel):
    sizes: Optional[List[DocumentsGetDocumentsResponseItemsThumbnailSizes]] = None
    id: Optional[str] = None
    href: Optional[str] = None


class AssembliesGetAssemblyDefinitionResponseRootAssembly(BaseModel):
    document_id: Optional[str] = Field(None, alias='documentId')
    document_microversion: Optional[str] = Field(None, alias='documentMicroversion')
    element_id: Optional[str] = Field(None, alias='elementId')
    occurrences: Optional[
        List[AssembliesGetAssemblyDefinitionResponseRootAssemblyOccurrences]
    ] = None
    instances: Optional[
        List[AssembliesGetAssemblyDefinitionResponseRootAssemblyInstances]
    ] = None
    features: Optional[
        List[AssembliesGetAssemblyDefinitionResponseRootAssemblyFeatures]
    ] = None


class AssembliesGetAssemblyDefinitionResponseSubAssemblies(BaseModel):
    document_id: Optional[str] = Field(None, alias='documentId')
    document_microversion: Optional[str] = Field(None, alias='documentMicroversion')
    document_version: Optional[str] = Field(None, alias='documentVersion')
    element_id: Optional[str] = Field(None, alias='elementId')
    revision: Optional[str] = None
    part_number: Optional[str] = Field(None, alias='partNumber')
    instances: Optional[
        List[AssembliesGetAssemblyDefinitionResponseSubAssembliesInstances]
    ] = None


class DocumentsGetElementListResponseElementsThumbnailInfo(BaseModel):
    sizes: Optional[
        List[DocumentsGetElementListResponseElementsThumbnailInfoSizes]
    ] = None


class ConfigurationListReponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    name: Optional[str] = None
    id: Optional[str] = None
    options: Optional[List[EnumOption]] = None
    quantity: Optional[str] = None
    min_value: Optional[float] = Field(None, alias='minValue')
    max_value: Optional[float] = Field(None, alias='maxValue')
    default_value: Optional[float] = Field(None, alias='defaultValue')
    units: Optional[str] = None


class AccountsGetPurchasesResponseItems(BaseModel):
    id: Optional[str] = None
    user_ids: Optional[List[str]] = Field(None, alias='userIds')
    consumed_ids: Optional[List[str]] = Field(None, alias='consumedIds')
    seats: Optional[Number] = None
    account_id: Optional[str] = Field(None, alias='accountId')
    plan_id: Optional[str] = Field(None, alias='planId')
    plan_type: Optional[Number] = Field(None, alias='planType')
    plan_name: Optional[str] = Field(None, alias='planName')
    group: Optional[str] = None
    application_id: Optional[str] = Field(None, alias='applicationId')
    state: Optional[Number] = None
    canceled_at: Optional[str] = Field(None, alias='canceledAt')
    subscription_end_at: Optional[str] = Field(None, alias='subscriptionEndAt')
    amount_cents: Optional[Number] = Field(None, alias='amountCents')
    card: Optional[AccountsGetPurchasesResponseItemsCard] = None


class ProjectShareRequest(BaseModel):
    project_id: Optional[str] = Field(
        None, alias='projectId', description='UUID', example='project-id'
    )
    share_list: Optional[List[ShareWithType]] = Field(None, alias='shareList')


class OnScalePackage(BaseModel):
    plan_id: Optional[str] = Field(None, alias='planId')
    plan_code: Optional[str] = Field(None, alias='planCode')
    plan_name: Optional[str] = Field(None, alias='planName')
    description: Optional[str] = None
    core_hour_amount: Optional[int] = Field(None, alias='coreHourAmount')
    prices: Optional[List[OnScalePrice]] = None


class OnScaleSubscriptionAddOn(BaseModel):
    code: Optional[str] = None
    id: Optional[str] = None
    quantity: Optional[int] = None
    subscription_id: Optional[str] = Field(None, alias='subscriptionId')
    unit_amount: Optional[float] = Field(None, alias='unitAmount')
    tiers: Optional[List[OnScaleSubscriptionAddOnTier]] = None


class OnScaleAddOn(BaseModel):
    type: Optional[str] = None
    code: Optional[str] = None
    name: Optional[str] = None
    plan_id: Optional[str] = Field(None, alias='planId')
    add_on_rate: Optional[List[OnScalePrice]] = Field(None, alias='addOnRate')
    optional: Optional[bool] = None
    price_tiers: Optional[List[OnScaleTier]] = Field(None, alias='priceTiers')


class OnScalePlan(BaseModel):
    plan_id: Optional[str] = Field(None, alias='planId')
    plan_code: Optional[str] = Field(None, alias='planCode')
    plan_name: Optional[str] = Field(None, alias='planName')
    plan_tier: Optional[str] = Field(None, alias='planTier')
    description: Optional[str] = None
    interval_unit: Optional[str] = Field(None, alias='intervalUnit')
    interval_length: Optional[int] = Field(None, alias='intervalLength')
    trial_unit: Optional[str] = Field(None, alias='trialUnit')
    trial_length: Optional[int] = Field(None, alias='trialLength')
    plan_size: Optional[int] = Field(None, alias='planSize')
    plan_rate: Optional[List[OnScalePrice]] = Field(None, alias='planRate')
    add_on_list: Optional[List[OnScaleAddOn]] = Field(None, alias='addOnList')


class Job(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    job_id: Optional[str] = Field(
        None, alias='jobId', description='UUID', example='job-id'
    )
    account_id: Optional[str] = Field(
        None, alias='accountId', description='UUID', example='account-id'
    )
    job_name: Optional[str] = Field(None, alias='jobName', example='testJob')
    cores_required: Optional[int] = Field(None, alias='coresRequired', example=1)
    core_hour_estimate: Optional[float] = Field(
        None, alias='coreHourEstimate', example=1.0
    )
    ram_estimate: Optional[int] = Field(None, alias='ramEstimate', example=100)
    main_file: Optional[str] = Field(None, alias='mainFile', example='disk.flxinp')
    precision: Optional[Precision] = Field(None, example='single')
    number_of_parts: Optional[int] = Field(None, alias='numberOfParts', example=1)
    docker_tag: Optional[str] = Field(None, alias='dockerTag', example='tag')
    docker_tag_id: Optional[str] = Field(None, alias='dockerTagId')
    file_dependencies: Optional[List[str]] = Field(None, alias='fileDependencies')
    file_aliases: Optional[List[str]] = Field(None, alias='fileAliases')
    operation: Optional[Operation] = Field(None, example='simulation')
    preprocessor: Optional[Preprocessor] = Field(None, example='none')
    simulations: Optional[List[Simulation]] = None
    job_status: Optional[List[JobStatus]] = Field(None, alias='jobStatus')
    job_type: Optional[str] = Field(None, alias='jobType', example='test job')
    log_group: Optional[str] = Field(
        None, alias='logGroup', description='string', example='flexeast'
    )
    hpc_id: Optional[str] = Field(
        None, alias='hpcId', description='UUID', example='hpc-id'
    )
    application: Optional[str] = Field(None, example='onscalelab')
    simulation_count: Optional[int] = Field(None, alias='simulationCount', example=1)
    parent_job_id: Optional[str] = Field(None, alias='parentJobId')
    project_id: Optional[str] = Field(None, alias='projectId')
    design_id: Optional[str] = Field(None, alias='designId')
    design_instance_id: Optional[str] = Field(None, alias='designInstanceId')
    supervisor_id: Optional[str] = Field(None, alias='supervisorId', description='UUID')
    time_to_end: Optional[str] = Field(
        None,
        alias='timeToEnd',
        description='DEPRECATED. Seconds as scientific notation.',
        example='1e-3',
    )
    max_spend_ch: Optional[float] = Field(
        None,
        alias='maxSpendCH',
        description='Max CoreHours to spend on this job. 0 will cause the job to not timeout. null will trigger the value to be auto-generated based on estimate.',
    )
    tags: Optional[List[Tag]] = None
    job_cost: Optional[float] = Field(None, alias='jobCost')
    user_id: Optional[str] = Field(None, alias='userId')
    last_status: Optional[str] = Field(None, alias='lastStatus')
    last_status_date: Optional[int] = Field(
        None, alias='lastStatusDate', description='1585700000000', example=1585700000000
    )
    final_status: Optional[str] = Field(None, alias='finalStatus')
    queued_status_date: Optional[int] = Field(
        None,
        alias='queuedStatusDate',
        description='1585700000000',
        example=1585700000000,
    )
    deleted_date: Optional[int] = Field(
        None, alias='deletedDate', description='1585700000000', example=1585700000000
    )
    physics_types: Optional[List[str]] = Field(None, alias='physicsTypes')
    console_parameter_names: Optional[List[str]] = Field(
        None, alias='consoleParameterNames'
    )
    design_title: Optional[str] = Field(None, alias='designTitle')
    design_instance_title: Optional[str] = Field(None, alias='designInstanceTitle')
    file_dependent_job_id_list: Optional[List[str]] = Field(
        None, alias='fileDependentJobIdList'
    )


class JobListResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    page_count: Optional[int] = Field(None, alias='pageCount')
    page_number: Optional[int] = Field(None, alias='pageNumber')
    page_size: Optional[int] = Field(None, alias='pageSize')
    job_count: Optional[int] = Field(None, alias='jobCount')
    has_more_job: Optional[bool] = Field(None, alias='hasMoreJob')
    job_list_finished: Optional[List[Job]] = Field(None, alias='jobListFinished')
    job_list_queued: Optional[List[Job]] = Field(None, alias='jobListQueued')
    job_list_created: Optional[List[Job]] = Field(None, alias='jobListCreated')
    job_list_combined: Optional[List[Job]] = Field(None, alias='jobListCombined')


class AccountSearchResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    account_id: Optional[str] = Field(None, alias='accountId')
    keyword: Optional[str] = None
    field_name: Optional[str] = Field(None, alias='fieldName')
    object_type: Optional[str] = Field(None, alias='objectType')
    project_list: Optional[List[Project]] = Field(None, alias='projectList')
    design_list: Optional[List[Design]] = Field(None, alias='designList')
    design_instance_list: Optional[List[DesignInstance]] = Field(
        None, alias='designInstanceList'
    )
    job_list: Optional[List[Job]] = Field(None, alias='jobList')


class PerformanceReport(BaseModel):
    less_than_minute0: Optional[List[str]] = Field(None, alias='lessThanMinute0')
    less_than_minute1: Optional[List[str]] = Field(None, alias='lessThanMinute1')
    less_than_minute2: Optional[List[str]] = Field(None, alias='lessThanMinute2')
    less_than_minute3: Optional[List[str]] = Field(None, alias='lessThanMinute3')
    less_than_minute4: Optional[List[str]] = Field(None, alias='lessThanMinute4')
    less_than_minute5: Optional[List[str]] = Field(None, alias='lessThanMinute5')
    one_to_three_minutes0: Optional[List[str]] = Field(None, alias='oneToThreeMinutes0')
    one_to_three_minutes1: Optional[List[str]] = Field(None, alias='oneToThreeMinutes1')
    one_to_three_minutes2: Optional[List[str]] = Field(None, alias='oneToThreeMinutes2')
    one_to_three_minutes3: Optional[List[str]] = Field(None, alias='oneToThreeMinutes3')
    one_to_three_minutes4: Optional[List[str]] = Field(None, alias='oneToThreeMinutes4')
    one_to_three_minutes5: Optional[List[str]] = Field(None, alias='oneToThreeMinutes5')
    three_to_five_minutes0: Optional[List[str]] = Field(
        None, alias='threeToFiveMinutes0'
    )
    three_to_five_minutes1: Optional[List[str]] = Field(
        None, alias='threeToFiveMinutes1'
    )
    three_to_five_minutes2: Optional[List[str]] = Field(
        None, alias='threeToFiveMinutes2'
    )
    three_to_five_minutes3: Optional[List[str]] = Field(
        None, alias='threeToFiveMinutes3'
    )
    three_to_five_minutes4: Optional[List[str]] = Field(
        None, alias='threeToFiveMinutes4'
    )
    three_to_five_minutes5: Optional[List[str]] = Field(
        None, alias='threeToFiveMinutes5'
    )
    five_to_seven_minutes0: Optional[List[str]] = Field(
        None, alias='fiveToSevenMinutes0'
    )
    five_to_seven_minutes1: Optional[List[str]] = Field(
        None, alias='fiveToSevenMinutes1'
    )
    five_to_seven_minutes2: Optional[List[str]] = Field(
        None, alias='fiveToSevenMinutes2'
    )
    five_to_seven_minutes3: Optional[List[str]] = Field(
        None, alias='fiveToSevenMinutes3'
    )
    five_to_seven_minutes4: Optional[List[str]] = Field(
        None, alias='fiveToSevenMinutes4'
    )
    five_to_seven_minutes5: Optional[List[str]] = Field(
        None, alias='fiveToSevenMinutes5'
    )
    more_than_seven_minutes0: Optional[List[str]] = Field(
        None, alias='moreThanSevenMinutes0'
    )
    more_than_seven_minutes1: Optional[List[str]] = Field(
        None, alias='moreThanSevenMinutes1'
    )
    more_than_seven_minutes2: Optional[List[str]] = Field(
        None, alias='moreThanSevenMinutes2'
    )
    more_than_seven_minutes3: Optional[List[str]] = Field(
        None, alias='moreThanSevenMinutes3'
    )
    more_than_seven_minutes4: Optional[List[str]] = Field(
        None, alias='moreThanSevenMinutes4'
    )
    more_than_seven_minutes5: Optional[List[str]] = Field(
        None, alias='moreThanSevenMinutes5'
    )
    job_map: Optional[Dict[str, Job]] = Field(None, alias='jobMap')


class JobFileCredentialsResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    secret: Optional[str] = None
    key: Optional[str] = None
    session: Optional[str] = None
    linked_files: Optional[List[LinkedFile]] = Field(None, alias='linkedFiles')


class JobListLoadResponse(BaseModel):
    trace_id: Optional[str] = Field(None, alias='traceId')
    queued_job_list: Optional[List[Job]] = Field(None, alias='queuedJobList')
    finished_job_list: Optional[List[Job]] = Field(None, alias='finishedJobList')


class PartsGetPartsResponseParts(BaseModel):
    part_id: Optional[str] = Field(None, alias='partId')
    name: Optional[str] = None
    part_query: Optional[str] = Field(None, alias='partQuery')
    element_id: Optional[str] = Field(None, alias='elementId')
    is_hidden: Optional[bool] = Field(None, alias='isHidden')
    appearance: Optional[PartsGetPartsResponsePartsAppearance] = None
    material: Optional[PartsGetPartsResponsePartsMaterial] = None
    custom_properties: Optional[Dict[str, Dict[str, Any]]] = Field(
        None, alias='customProperties'
    )
    microversion_id: Optional[str] = Field(None, alias='microversionId')
    body_type: Optional[str] = Field(None, alias='bodyType')
    is_mesh: Optional[bool] = Field(None, alias='isMesh')


class DocumentsGetDocumentsResponseItems(BaseModel):
    public: Optional[bool] = None
    owner: Optional[DocumentsGetDocumentsResponseItemsOwner] = None
    permission: Optional[str] = None
    trashed_at: Optional[datetime] = Field(None, alias='trashedAt')
    trash: Optional[bool] = None
    starred: Optional[str] = None
    active: Optional[bool] = None
    created_at: Optional[datetime] = Field(None, alias='createdAt')
    thumbnail: Optional[DocumentsGetDocumentsResponseItemsThumbnail] = None
    created_by: Optional[DocumentsGetDocumentsResponseItemsCreatedBy] = Field(
        None, alias='createdBy'
    )
    modified_at: Optional[datetime] = Field(None, alias='modifiedAt')
    modified_by: Optional[DocumentsGetDocumentsResponseItemsModifiedBy] = Field(
        None, alias='modifiedBy'
    )
    default_workspace: Optional[
        DocumentsGetDocumentsResponseItemsDefaultWorkspace
    ] = Field(None, alias='defaultWorkspace')
    tags: Optional[List[str]] = None
    size_bytes: Optional[Number] = Field(None, alias='sizeBytes')
    can_unshare: Optional[bool] = Field(None, alias='canUnshare')
    name: Optional[str] = None
    id: Optional[str] = None
    href: Optional[str] = None
    total_workspaces_updating: Optional[Number] = Field(
        None, alias='totalWorkspacesUpdating'
    )
    total_workspaces_scheduled_for_update: Optional[Number] = Field(
        None, alias='totalWorkspacesScheduledForUpdate'
    )


class AssembliesGetAssemblyDefinitionResponse(BaseModel):
    root_assembly: AssembliesGetAssemblyDefinitionResponseRootAssembly = Field(
        ..., alias='rootAssembly'
    )
    sub_assemblies: List[AssembliesGetAssemblyDefinitionResponseSubAssemblies] = Field(
        ..., alias='subAssemblies'
    )
    parts: List[AssembliesGetAssemblyDefinitionResponseParts]
    part_studio_features: List[
        AssembliesGetAssemblyDefinitionResponsePartStudioFeatures
    ] = Field(..., alias='partStudioFeatures')


class DocumentsGetElementListResponseElements(BaseModel):
    name: Optional[str] = None
    id: Optional[str] = None
    element_type: Optional[str] = Field(None, alias='elementType')
    type: Optional[str] = None
    length_units: Optional[str] = Field(None, alias='lengthUnits')
    angle_units: Optional[str] = Field(None, alias='angleUnits')
    mass_units: Optional[str] = Field(None, alias='massUnits')
    thumbnail_info: Optional[
        DocumentsGetElementListResponseElementsThumbnailInfo
    ] = Field(None, alias='thumbnailInfo')
    thumbnails: Optional[Dict[str, Dict[str, Any]]] = None
    microversion_id: Optional[str] = Field(None, alias='microversionId')


class OnScaleSubscription(BaseModel):
    subscription_id: Optional[str] = Field(None, alias='subscriptionId')
    account_id: Optional[str] = Field(None, alias='accountId')
    plan_code: Optional[str] = Field(None, alias='planCode')
    plan_tier: Optional[str] = Field(None, alias='planTier')
    currency: Optional[str] = None
    plan_rate: Optional[float] = Field(None, alias='planRate')
    plan_size: Optional[float] = Field(None, alias='planSize')
    current_term_start_date: Optional[int] = Field(None, alias='currentTermStartDate')
    current_term_end_date: Optional[int] = Field(None, alias='currentTermEndDate')
    current_period_start_date: Optional[int] = Field(
        None, alias='currentPeriodStartDate'
    )
    current_period_end_date: Optional[int] = Field(None, alias='currentPeriodEndDate')
    expiration_date: Optional[int] = Field(None, alias='expirationDate')
    recurly_date: Optional[int] = Field(None, alias='recurlyDate')
    trial_period: Optional[bool] = Field(None, alias='trialPeriod')
    auto_renew: Optional[bool] = Field(None, alias='autoRenew')
    expired: Optional[bool] = None
    add_ons: Optional[List[OnScaleSubscriptionAddOn]] = Field(None, alias='addOns')
    new_plan: Optional[bool] = Field(None, alias='newPlan')
